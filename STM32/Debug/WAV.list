
WAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eab4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800ec3c  0800ec3c  0001ec3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edc4  0800edc4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800edc4  0800edc4  0001edc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edcc  0800edcc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edcc  0800edcc  0001edcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edd0  0800edd0  0001edd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800edd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f98  20000090  0800ee64  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20002028  0800ee64  00022028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7ac  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000551e  00000000  00000000  0004c86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a60  00000000  00000000  00051d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001840  00000000  00000000  000537f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002843a  00000000  00000000  00055030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c154  00000000  00000000  0007d46a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d76c7  00000000  00000000  000995be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170c85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f08  00000000  00000000  00170d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ec24 	.word	0x0800ec24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800ec24 	.word	0x0800ec24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004de:	f107 020c 	add.w	r2, r7, #12
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2302      	movs	r3, #2
 80004e8:	2194      	movs	r1, #148	; 0x94
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <write_register+0x30>)
 80004ec:	f004 fbcc 	bl	8004c88 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000ac 	.word	0x200000ac

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050c:	f107 020c 	add.w	r2, r7, #12
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <read_register+0x3c>)
 800051a:	f004 fbb5 	bl	8004c88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <read_register+0x3c>)
 800052a:	f004 fcab 	bl	8004e84 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac

0800053c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800053c:	b084      	sub	sp, #16
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	f107 0c10 	add.w	ip, r7, #16
 8000548:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <CS43_Init+0x200>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <CS43_Init+0x200>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	69da      	ldr	r2, [r3, #28]
 800055a:	4b78      	ldr	r3, [pc, #480]	; (800073c <CS43_Init+0x200>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000562:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	4875      	ldr	r0, [pc, #468]	; (8000740 <CS43_Init+0x204>)
 800056a:	f002 fd4b 	bl	8003004 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056e:	4b75      	ldr	r3, [pc, #468]	; (8000744 <CS43_Init+0x208>)
 8000570:	4618      	mov	r0, r3
 8000572:	f107 0110 	add.w	r1, r7, #16
 8000576:	2354      	movs	r3, #84	; 0x54
 8000578:	461a      	mov	r2, r3
 800057a:	f00e fa85 	bl	800ea88 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057e:	2301      	movs	r3, #1
 8000580:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	2002      	movs	r0, #2
 8000588:	f7ff ff9e 	bl	80004c8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	b2db      	uxtb	r3, r3
 8000598:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059a:	797b      	ldrb	r3, [r7, #5]
 800059c:	f043 030c 	orr.w	r3, r3, #12
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	3301      	adds	r3, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff87 	bl	80004c8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	3301      	adds	r3, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff ff7f 	bl	80004c8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	2006      	movs	r0, #6
 80005d0:	f7ff ff94 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	f023 0310 	bic.w	r3, r3, #16
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f023 0304 	bic.w	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	f043 0303 	orr.w	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	3301      	adds	r3, #1
 800061e:	4619      	mov	r1, r3
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ff51 	bl	80004c8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	3301      	adds	r3, #1
 800062a:	4619      	mov	r1, r3
 800062c:	2008      	movs	r0, #8
 800062e:	f7ff ff65 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	3301      	adds	r3, #1
 800064a:	4619      	mov	r1, r3
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff3b 	bl	80004c8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	3301      	adds	r3, #1
 8000656:	4619      	mov	r1, r3
 8000658:	2009      	movs	r0, #9
 800065a:	f7ff ff4f 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	3301      	adds	r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff25 	bl	80004c8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	3301      	adds	r3, #1
 8000682:	4619      	mov	r1, r3
 8000684:	200e      	movs	r0, #14
 8000686:	f7ff ff39 	bl	80004fc <read_register>
	if(outputMode == MODE_ANALOG)
 800068a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068e:	2b01      	cmp	r3, #1
 8000690:	d119      	bne.n	80006c6 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0310 	bic.w	r3, r3, #16
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0308 	bic.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
 80006c4:	e005      	b.n	80006d2 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	200e      	movs	r0, #14
 80006da:	f7ff fef5 	bl	80004c8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	3301      	adds	r3, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	200f      	movs	r0, #15
 80006e6:	f7ff ff09 	bl	80004fc <read_register>
	iData[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	200f      	movs	r0, #15
 80006f6:	f7ff fee7 	bl	80004c8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2014      	movs	r0, #20
 8000706:	f7ff fedf 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	3301      	adds	r3, #1
 800070e:	4619      	mov	r1, r3
 8000710:	2015      	movs	r0, #21
 8000712:	f7ff fed9 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	3301      	adds	r3, #1
 800071a:	4619      	mov	r1, r3
 800071c:	201a      	movs	r0, #26
 800071e:	f7ff fed3 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	3301      	adds	r3, #1
 8000726:	4619      	mov	r1, r3
 8000728:	201b      	movs	r0, #27
 800072a:	f7ff fecd 	bl	80004c8 <write_register>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr
 800073c:	200014d4 	.word	0x200014d4
 8000740:	40020c00 	.word	0x40020c00
 8000744:	200000ac 	.word	0x200000ac

08000748 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d82b      	bhi.n	80007b0 <CS43_Enable_RightLeft+0x68>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <CS43_Enable_RightLeft+0x18>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000771 	.word	0x08000771
 8000764:	08000781 	.word	0x08000781
 8000768:	08000791 	.word	0x08000791
 800076c:	080007a1 	.word	0x080007a1
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
			break;
 800077e:	e018      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2db      	uxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e010      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2db      	uxtb	r3, r3
 800079c:	737b      	strb	r3, [r7, #13]
			break;
 800079e:	e008      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	737b      	strb	r3, [r7, #13]
			break;
 80007ae:	e000      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	f043 030c 	orr.w	r3, r3, #12
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	f043 0303 	orr.w	r3, r3, #3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	3301      	adds	r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	2004      	movs	r0, #4
 80007d0:	f7ff fe7a 	bl	80004c8 <write_register>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3319      	adds	r3, #25
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	3301      	adds	r3, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff fe66 	bl	80004c8 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	3301      	adds	r3, #1
 8000802:	4619      	mov	r1, r3
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f7ff fe5f 	bl	80004c8 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	3301      	adds	r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff fe4a 	bl	80004c8 <write_register>
    iData[1] = 0x01;
 8000834:	2301      	movs	r3, #1
 8000836:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	3301      	adds	r3, #1
 800083e:	4619      	mov	r1, r3
 8000840:	2022      	movs	r0, #34	; 0x22
 8000842:	f7ff fe41 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	3301      	adds	r3, #1
 800084c:	4619      	mov	r1, r3
 800084e:	2023      	movs	r0, #35	; 0x23
 8000850:	f7ff fe3a 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000854:	e018      	b.n	8000888 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3301      	adds	r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	2022      	movs	r0, #34	; 0x22
 8000864:	f7ff fe30 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	3301      	adds	r3, #1
 800086e:	4619      	mov	r1, r3
 8000870:	2023      	movs	r0, #35	; 0x23
 8000872:	f7ff fe29 	bl	80004c8 <write_register>
    iData[1] = 0xAF;
 8000876:	23af      	movs	r3, #175	; 0xaf
 8000878:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	3301      	adds	r3, #1
 8000880:	4619      	mov	r1, r3
 8000882:	2004      	movs	r0, #4
 8000884:	f7ff fe20 	bl	80004c8 <write_register>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ffbb 	bl	8000812 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800089c:	2399      	movs	r3, #153	; 0x99
 800089e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	3301      	adds	r3, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe0e 	bl	80004c8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	3301      	adds	r3, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2047      	movs	r0, #71	; 0x47
 80008b8:	f7ff fe06 	bl	80004c8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	3301      	adds	r3, #1
 80008c0:	4619      	mov	r1, r3
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	3301      	adds	r3, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf5 	bl	80004c8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	3301      	adds	r3, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	3301      	adds	r3, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde4 	bl	80004c8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	2300      	movs	r3, #0
 8000902:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fddc 	bl	80004c8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000910:	239e      	movs	r3, #158	; 0x9e
 8000912:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3301      	adds	r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fdd4 	bl	80004c8 <write_register>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <CS43_Stop>:

void CS43_Stop(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff6f 	bl	8000812 <CS43_SetMute>
  iData[1] = 0x04;
 8000934:	2304      	movs	r3, #4
 8000936:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	3301      	adds	r3, #1
 800093c:	4619      	mov	r1, r3
 800093e:	200e      	movs	r0, #14
 8000940:	f7ff fdc2 	bl	80004c8 <write_register>
	iData[1] = 0x9F;
 8000944:	239f      	movs	r3, #159	; 0x9f
 8000946:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	3301      	adds	r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fdba 	bl	80004c8 <write_register>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e00b      	b.n	800098a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <audioI2S_pllClockConfig+0x8c>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d101      	bne.n	8000984 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	3301      	adds	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9f0      	bls.n	8000972 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f006 fd95 	bl	80074c4 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d111      	bne.n	80009c8 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a8:	7fbb      	ldrb	r3, [r7, #30]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <audioI2S_pllClockConfig+0x90>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <audioI2S_pllClockConfig+0x94>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f006 fc9d 	bl	8007300 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c6:	e00b      	b.n	80009e0 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d2:	2303      	movs	r3, #3
 80009d4:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fc90 	bl	8007300 <HAL_RCCEx_PeriphCLKConfig>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800ecb0 	.word	0x0800ecb0
 80009ec:	0800ecd0 	.word	0x0800ecd0
 80009f0:	0800ecf0 	.word	0x0800ecf0

080009f4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x84>)
 8000a02:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a16:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 ff67 	bl	800592c <HAL_I2S_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e000      	b.n	8000a6a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a68:	2301      	movs	r3, #1
  }
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000100 	.word	0x20000100
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <audioI2S_setHandle+0x1c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000100 	.word	0x20000100

08000a9c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff59 	bl	800095c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <I2S3_freqUpdate>
  return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac6:	f7ff fee3 	bl	8000890 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <audioI2S_play+0x38>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad4:	d203      	bcs.n	8000ade <audioI2S_play+0x22>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	e001      	b.n	8000ae2 <audioI2S_play+0x26>
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f005 f861 	bl	8005bac <HAL_I2S_Transmit_DMA>
  return true;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000100 	.word	0x20000100

08000af8 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000afc:	f7ff ff14 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <audioI2S_pause+0x18>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 f8f9 	bl	8005cfc <HAL_I2S_DMAPause>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000100 	.word	0x20000100

08000b14 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b18:	f7ff feba 	bl	8000890 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <audioI2S_resume+0x18>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 f94d 	bl	8005dc0 <HAL_I2S_DMAResume>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000100 	.word	0x20000100

08000b30 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b34:	f7ff fef8 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <audioI2S_stop+0x18>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f005 f9d3 	bl	8005ee8 <HAL_I2S_DMAStop>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000100 	.word	0x20000100

08000b4c <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_I2S_TxCpltCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b5e:	f000 f929 	bl	8000db4 <audioI2S_fullTransfer_Callback>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40003c00 	.word	0x40003c00

08000b70 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b82:	f000 f90b 	bl	8000d9c <audioI2S_halfTransfer_Callback>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <wavPlayer_reset+0x1c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <wavPlayer_reset+0x20>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20001338 	.word	0x20001338
 8000bb4:	20001340 	.word	0x20001340

08000bb8 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <wavPlayer_fileSelect+0x48>)
 8000bca:	f00c fe03 	bl	800d7d4 <f_open>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e00e      	b.n	8000bf6 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	f107 010c 	add.w	r1, r7, #12
 8000be0:	222c      	movs	r2, #44	; 0x2c
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <wavPlayer_fileSelect+0x48>)
 8000be4:	f00c ffb4 	bl	800db50 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <wavPlayer_fileSelect+0x4c>)
 8000bec:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <wavPlayer_fileSelect+0x50>)
 8000bf2:	6013      	str	r3, [r2, #0]
  return true;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000104 	.word	0x20000104
 8000c04:	20000334 	.word	0x20000334
 8000c08:	2000133c 	.word	0x2000133c

08000c0c <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <wavPlayer_play+0x48>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <wavPlayer_play+0x4c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff3e 	bl	8000a9c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <wavPlayer_play+0x50>)
 8000c24:	f00d f97b 	bl	800df1e <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <wavPlayer_play+0x54>)
 8000c2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <wavPlayer_play+0x58>)
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <wavPlayer_play+0x50>)
 8000c32:	f00c ff8d 	bl	800db50 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <wavPlayer_play+0x5c>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <wavPlayer_play+0x54>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <wavPlayer_play+0x60>)
 8000c42:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <wavPlayer_play+0x58>)
 8000c4a:	f7ff ff37 	bl	8000abc <audioI2S_play>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001344 	.word	0x20001344
 8000c58:	2000133c 	.word	0x2000133c
 8000c5c:	20000104 	.word	0x20000104
 8000c60:	20001340 	.word	0x20001340
 8000c64:	20000338 	.word	0x20000338
 8000c68:	20000334 	.word	0x20000334
 8000c6c:	20001338 	.word	0x20001338

08000c70 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <wavPlayer_process+0xc8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d859      	bhi.n	8000d32 <wavPlayer_process+0xc2>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <wavPlayer_process+0x14>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000d31 	.word	0x08000d31
 8000c88:	08000c95 	.word	0x08000c95
 8000c8c:	08000cd7 	.word	0x08000cd7
 8000c90:	08000d19 	.word	0x08000d19
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <wavPlayer_process+0xcc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <wavPlayer_process+0xc8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <wavPlayer_process+0xcc>)
 8000ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca6:	4926      	ldr	r1, [pc, #152]	; (8000d40 <wavPlayer_process+0xd0>)
 8000ca8:	4826      	ldr	r0, [pc, #152]	; (8000d44 <wavPlayer_process+0xd4>)
 8000caa:	f00c ff51 	bl	800db50 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cb6:	d907      	bls.n	8000cc8 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <wavPlayer_process+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cc4:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cc6:	e034      	b.n	8000d32 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <wavPlayer_process+0xc8>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	701a      	strb	r2, [r3, #0]
    break;
 8000cd4:	e02d      	b.n	8000d32 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <wavPlayer_process+0xcc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <wavPlayer_process+0xc8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <wavPlayer_process+0xcc>)
 8000ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce8:	4918      	ldr	r1, [pc, #96]	; (8000d4c <wavPlayer_process+0xdc>)
 8000cea:	4816      	ldr	r0, [pc, #88]	; (8000d44 <wavPlayer_process+0xd4>)
 8000cec:	f00c ff30 	bl	800db50 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf8:	d907      	bls.n	8000d0a <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <wavPlayer_process+0xcc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <wavPlayer_process+0xd8>)
 8000d06:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d08:	e013      	b.n	8000d32 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <wavPlayer_process+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <wavPlayer_process+0xc8>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
    break;
 8000d16:	e00c      	b.n	8000d32 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <wavPlayer_process+0xd4>)
 8000d1a:	f00d f8d6 	bl	800deca <f_close>
    wavPlayer_reset();
 8000d1e:	f7ff ff39 	bl	8000b94 <wavPlayer_reset>
    isFinished = true;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <wavPlayer_process+0xe0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <wavPlayer_process+0xc8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
    break;
 8000d2e:	e000      	b.n	8000d32 <wavPlayer_process+0xc2>
    break;
 8000d30:	bf00      	nop
  }
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001345 	.word	0x20001345
 8000d3c:	20001340 	.word	0x20001340
 8000d40:	20000338 	.word	0x20000338
 8000d44:	20000104 	.word	0x20000104
 8000d48:	20001338 	.word	0x20001338
 8000d4c:	20000b38 	.word	0x20000b38
 8000d50:	20001344 	.word	0x20001344

08000d54 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d58:	f7ff feea 	bl	8000b30 <audioI2S_stop>
  isFinished = true;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <wavPlayer_stop+0x14>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001344 	.word	0x20001344

08000d6c <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000d70:	f7ff fec2 	bl	8000af8 <audioI2S_pause>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000d7c:	f7ff feca 	bl	8000b14 <audioI2S_resume>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return isFinished;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <wavPlayer_isFinished+0x14>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20001344 	.word	0x20001344

08000d9c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <audioI2S_halfTransfer_Callback+0x14>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20001345 	.word	0x20001345

08000db4 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <audioI2S_fullTransfer_Callback+0x14>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20001345 	.word	0x20001345

08000dcc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  if(interrupcion>1)//ignora la primera interrupcion
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	dd01      	ble.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
	  wavPlayer_stop();
 8000ddc:	f7ff ffba 	bl	8000d54 <wavPlayer_stop>
  }
  interrupcion++;
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20001390 	.word	0x20001390

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b095      	sub	sp, #84	; 0x54
 8000dfc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f000 fddf 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f959 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 faf7 	bl	80013f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0a:	f000 fad5 	bl	80013b8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e0e:	f000 fa29 	bl	8001264 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e12:	f000 fa55 	bl	80012c0 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000e16:	f007 ff57 	bl	8008cc8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000e1a:	f00d fae5 	bl	800e3e8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000e1e:	f000 f9cd 	bl	80011bc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e22:	f000 fa7b 	bl	800131c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000e26:	4c93      	ldr	r4, [pc, #588]	; (8001074 <main+0x27c>)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8000e2c:	4668      	mov	r0, sp
 8000e2e:	f104 0310 	add.w	r3, r4, #16
 8000e32:	2244      	movs	r2, #68	; 0x44
 8000e34:	4619      	mov	r1, r3
 8000e36:	f00d fe27 	bl	800ea88 <memcpy>
 8000e3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e3e:	f7ff fb7d 	bl	800053c <CS43_Init>

  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000e42:	2003      	movs	r0, #3
 8000e44:	f7ff fc80 	bl	8000748 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000e48:	488b      	ldr	r0, [pc, #556]	; (8001078 <main+0x280>)
 8000e4a:	f7ff fe17 	bl	8000a7c <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle=0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	71bb      	strb	r3, [r7, #6]
  while (1)
  {


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e56:	f00d faed 	bl	800e434 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <main+0x284>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d106      	bne.n	8000e70 <main+0x78>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e68:	4885      	ldr	r0, [pc, #532]	; (8001080 <main+0x288>)
 8000e6a:	f002 f8cb 	bl	8003004 <HAL_GPIO_WritePin>
 8000e6e:	e010      	b.n	8000e92 <main+0x9a>

    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000e70:	4b82      	ldr	r3, [pc, #520]	; (800107c <main+0x284>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d10c      	bne.n	8000e92 <main+0x9a>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7e:	4880      	ldr	r0, [pc, #512]	; (8001080 <main+0x288>)
 8000e80:	f002 f8c0 	bl	8003004 <HAL_GPIO_WritePin>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	497f      	ldr	r1, [pc, #508]	; (8001084 <main+0x28c>)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f00c fc5d 	bl	800d748 <f_mount>
      isSdCardMounted = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
    }

    if(Appli_state == APPLICATION_READY)
 8000e92:	4b7a      	ldr	r3, [pc, #488]	; (800107c <main+0x284>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d1dd      	bne.n	8000e56 <main+0x5e>
    {


      if(!isSdCardMounted)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f083 0301 	eor.w	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <main+0xbc>
      {
        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4977      	ldr	r1, [pc, #476]	; (8001088 <main+0x290>)
 8000eaa:	4878      	ldr	r0, [pc, #480]	; (800108c <main+0x294>)
 8000eac:	f00c fc4c 	bl	800d748 <f_mount>
        isSdCardMounted = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
      }
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4876      	ldr	r0, [pc, #472]	; (8001090 <main+0x298>)
 8000eb8:	f002 f88c 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0c9      	beq.n	8000e56 <main+0x5e>
      {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec8:	486d      	ldr	r0, [pc, #436]	; (8001080 <main+0x288>)
 8000eca:	f002 f89b 	bl	8003004 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed4:	486a      	ldr	r0, [pc, #424]	; (8001080 <main+0x288>)
 8000ed6:	f002 f895 	bl	8003004 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	4867      	ldr	r0, [pc, #412]	; (8001080 <main+0x288>)
 8000ee2:	f002 f88f 	bl	8003004 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eea:	f000 fddb 	bl	8001aa4 <HAL_Delay>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8))
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	4863      	ldr	r0, [pc, #396]	; (8001080 <main+0x288>)
 8000ef4:	f002 f86e 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <main+0x10e>
        {
        	wavPlayer_fileSelect(WAV_FILE0);
 8000efe:	4865      	ldr	r0, [pc, #404]	; (8001094 <main+0x29c>)
 8000f00:	f7ff fe5a 	bl	8000bb8 <wavPlayer_fileSelect>
 8000f04:	e026      	b.n	8000f54 <main+0x15c>
        }
        else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9))
 8000f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0a:	485d      	ldr	r0, [pc, #372]	; (8001080 <main+0x288>)
 8000f0c:	f002 f862 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <main+0x126>
        {
        	wavPlayer_fileSelect(WAV_FILE1);
 8000f16:	4860      	ldr	r0, [pc, #384]	; (8001098 <main+0x2a0>)
 8000f18:	f7ff fe4e 	bl	8000bb8 <wavPlayer_fileSelect>
 8000f1c:	e01a      	b.n	8000f54 <main+0x15c>
        }
        else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10))
 8000f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f22:	4857      	ldr	r0, [pc, #348]	; (8001080 <main+0x288>)
 8000f24:	f002 f856 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <main+0x13e>
        {
        	wavPlayer_fileSelect(WAV_FILE2);
 8000f2e:	485b      	ldr	r0, [pc, #364]	; (800109c <main+0x2a4>)
 8000f30:	f7ff fe42 	bl	8000bb8 <wavPlayer_fileSelect>
 8000f34:	e00e      	b.n	8000f54 <main+0x15c>
        }
        else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11))
 8000f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3a:	4851      	ldr	r0, [pc, #324]	; (8001080 <main+0x288>)
 8000f3c:	f002 f84a 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <main+0x156>
        {
        	wavPlayer_fileSelect(WAV_FILE3);
 8000f46:	4856      	ldr	r0, [pc, #344]	; (80010a0 <main+0x2a8>)
 8000f48:	f7ff fe36 	bl	8000bb8 <wavPlayer_fileSelect>
 8000f4c:	e002      	b.n	8000f54 <main+0x15c>
        }
        else
        {
        	wavPlayer_fileSelect(WAV_FILED);
 8000f4e:	4855      	ldr	r0, [pc, #340]	; (80010a4 <main+0x2ac>)
 8000f50:	f7ff fe32 	bl	8000bb8 <wavPlayer_fileSelect>
        }
        wavPlayer_play();
 8000f54:	f7ff fe5a 	bl	8000c0c <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000f58:	e06c      	b.n	8001034 <main+0x23c>
        {

          wavPlayer_process();
 8000f5a:	f7ff fe89 	bl	8000c70 <wavPlayer_process>
    	  HAL_ADC_Start(&hadc1);
 8000f5e:	4852      	ldr	r0, [pc, #328]	; (80010a8 <main+0x2b0>)
 8000f60:	f000 fe06 	bl	8001b70 <HAL_ADC_Start>
      	  	if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK)
 8000f64:	2164      	movs	r1, #100	; 0x64
 8000f66:	4850      	ldr	r0, [pc, #320]	; (80010a8 <main+0x2b0>)
 8000f68:	f000 fefb 	bl	8001d62 <HAL_ADC_PollForConversion>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <main+0x188>
      	  	{
      	  		volumen=HAL_ADC_GetValue(&hadc1);
 8000f72:	484d      	ldr	r0, [pc, #308]	; (80010a8 <main+0x2b0>)
 8000f74:	f000 ff79 	bl	8001e6a <HAL_ADC_GetValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <main+0x2b4>)
 8000f7e:	701a      	strb	r2, [r3, #0]
      	  	}
      	  HAL_ADC_Stop(&hadc1);
 8000f80:	4849      	ldr	r0, [pc, #292]	; (80010a8 <main+0x2b0>)
 8000f82:	f000 febb 	bl	8001cfc <HAL_ADC_Stop>
      	  CS43_SetVolume(volumen);
 8000f86:	4b49      	ldr	r3, [pc, #292]	; (80010ac <main+0x2b4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fc26 	bl	80007dc <CS43_SetVolume>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f90:	2101      	movs	r1, #1
 8000f92:	483f      	ldr	r0, [pc, #252]	; (8001090 <main+0x298>)
 8000f94:	f002 f81e 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d04a      	beq.n	8001034 <main+0x23c>
          {
            pauseResumeToggle^=1;
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01d      	beq.n	8000ff2 <main+0x1fa>
            {
              HAL_TIM_Base_Start_IT(&htim2);
 8000fb6:	483e      	ldr	r0, [pc, #248]	; (80010b0 <main+0x2b8>)
 8000fb8:	f006 fb37 	bl	800762a <HAL_TIM_Base_Start_IT>
              interrupcion=0;
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <main+0x2bc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	482d      	ldr	r0, [pc, #180]	; (8001080 <main+0x288>)
 8000fca:	f002 f81b 	bl	8003004 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd4:	482a      	ldr	r0, [pc, #168]	; (8001080 <main+0x288>)
 8000fd6:	f002 f815 	bl	8003004 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	4827      	ldr	r0, [pc, #156]	; (8001080 <main+0x288>)
 8000fe2:	f002 f80f 	bl	8003004 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000fe6:	f7ff fec1 	bl	8000d6c <wavPlayer_pause>
              HAL_Delay(200);
 8000fea:	20c8      	movs	r0, #200	; 0xc8
 8000fec:	f000 fd5a 	bl	8001aa4 <HAL_Delay>
 8000ff0:	e020      	b.n	8001034 <main+0x23c>
            }
            else
            {
              HAL_TIM_Base_Stop_IT(&htim2);
 8000ff2:	482f      	ldr	r0, [pc, #188]	; (80010b0 <main+0x2b8>)
 8000ff4:	f006 fb3d 	bl	8007672 <HAL_TIM_Base_Stop_IT>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <main+0x288>)
 8001000:	f002 f800 	bl	8003004 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <main+0x288>)
 800100c:	f001 fffa 	bl	8003004 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f000 fd46 	bl	8001aa4 <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001018:	2101      	movs	r1, #1
 800101a:	481d      	ldr	r0, [pc, #116]	; (8001090 <main+0x298>)
 800101c:	f001 ffda 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <main+0x238>
              {
                HAL_TIM_Base_Stop_IT(&htim2);
 8001026:	4822      	ldr	r0, [pc, #136]	; (80010b0 <main+0x2b8>)
 8001028:	f006 fb23 	bl	8007672 <HAL_TIM_Base_Stop_IT>
                wavPlayer_stop();
 800102c:	f7ff fe92 	bl	8000d54 <wavPlayer_stop>
              }
              {
                wavPlayer_resume();
 8001030:	f7ff fea2 	bl	8000d78 <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8001034:	f7ff fea6 	bl	8000d84 <wavPlayer_isFinished>
 8001038:	4603      	mov	r3, r0
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d18a      	bne.n	8000f5a <main+0x162>
              }
            }
          }
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <main+0x288>)
 800104c:	f001 ffda 	bl	8003004 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <main+0x288>)
 8001058:	f001 ffd4 	bl	8003004 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <main+0x288>)
 8001064:	f001 ffce 	bl	8003004 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106c:	f000 fd1a 	bl	8001aa4 <HAL_Delay>
    MX_USB_HOST_Process();
 8001070:	e6f1      	b.n	8000e56 <main+0x5e>
 8001072:	bf00      	nop
 8001074:	20001394 	.word	0x20001394
 8001078:	200014d4 	.word	0x200014d4
 800107c:	20001384 	.word	0x20001384
 8001080:	40020c00 	.word	0x40020c00
 8001084:	0800ec3c 	.word	0x0800ec3c
 8001088:	20001520 	.word	0x20001520
 800108c:	20001754 	.word	0x20001754
 8001090:	40020000 	.word	0x40020000
 8001094:	0800ec40 	.word	0x0800ec40
 8001098:	0800ec48 	.word	0x0800ec48
 800109c:	0800ec50 	.word	0x0800ec50
 80010a0:	0800ec58 	.word	0x0800ec58
 80010a4:	0800ec60 	.word	0x0800ec60
 80010a8:	20001448 	.word	0x20001448
 80010ac:	20001490 	.word	0x20001490
 80010b0:	20001494 	.word	0x20001494
 80010b4:	20001390 	.word	0x20001390

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b098      	sub	sp, #96	; 0x60
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c2:	2230      	movs	r2, #48	; 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00d fce9 	bl	800ea9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <SystemClock_Config+0xfc>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <SystemClock_Config+0xfc>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <SystemClock_Config+0xfc>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <SystemClock_Config+0x100>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <SystemClock_Config+0x100>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <SystemClock_Config+0x100>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001122:	2301      	movs	r3, #1
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001134:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001136:	2308      	movs	r3, #8
 8001138:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800113a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001140:	2302      	movs	r3, #2
 8001142:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001144:	2307      	movs	r3, #7
 8001146:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114c:	4618      	mov	r0, r3
 800114e:	f005 fc89 	bl	8006a64 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001158:	f000 f9ec 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001168:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	2105      	movs	r1, #5
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fee2 	bl	8006f44 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001186:	f000 f9d5 	bl	8001534 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118a:	2301      	movs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 800118e:	f240 130f 	movw	r3, #271	; 0x10f
 8001192:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001194:	2306      	movs	r3, #6
 8001196:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4618      	mov	r0, r3
 800119e:	f006 f8af 	bl	8007300 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80011a8:	f000 f9c4 	bl	8001534 <Error_Handler>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3760      	adds	r7, #96	; 0x60
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011d0:	4a22      	ldr	r2, [pc, #136]	; (800125c <MX_ADC1_Init+0xa0>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_ADC1_Init+0x9c>)
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <MX_ADC1_Init+0xa4>)
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_ADC1_Init+0x9c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_ADC1_Init+0x9c>)
 800120c:	2201      	movs	r2, #1
 800120e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_ADC1_Init+0x9c>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_ADC1_Init+0x9c>)
 800121a:	2201      	movs	r2, #1
 800121c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <MX_ADC1_Init+0x9c>)
 8001220:	f000 fc62 	bl	8001ae8 <HAL_ADC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800122a:	f000 f983 	bl	8001534 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800122e:	2301      	movs	r3, #1
 8001230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_ADC1_Init+0x9c>)
 8001240:	f000 fe20 	bl	8001e84 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800124a:	f000 f973 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20001448 	.word	0x20001448
 800125c:	40012000 	.word	0x40012000
 8001260:	0f000001 	.word	0x0f000001

08001264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_I2C1_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_I2C1_Init+0x58>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_I2C1_Init+0x50>)
 80012a2:	f003 fbb9 	bl	8004a18 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 f942 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20001394 	.word	0x20001394
 80012b8:	40005400 	.word	0x40005400
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_I2S3_Init+0x54>)
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <MX_I2S3_Init+0x58>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2S3_Init+0x54>)
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_I2S3_Init+0x54>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2S3_Init+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <MX_I2S3_Init+0x54>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_I2S3_Init+0x54>)
 80012e8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80012ec:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2S3_Init+0x54>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2S3_Init+0x54>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2S3_Init+0x54>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2S3_Init+0x54>)
 8001302:	f004 fb13 	bl	800592c <HAL_I2S_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800130c:	f000 f912 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200014d4 	.word	0x200014d4
 8001318:	40003c00 	.word	0x40003c00

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_TIM2_Init+0x98>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_TIM2_Init+0x98>)
 8001342:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_TIM2_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_TIM2_Init+0x98>)
 8001350:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_TIM2_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_TIM2_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <MX_TIM2_Init+0x98>)
 8001364:	f006 f936 	bl	80075d4 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800136e:	f000 f8e1 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_TIM2_Init+0x98>)
 8001380:	f006 faaa 	bl	80078d8 <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800138a:	f000 f8d3 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800138e:	2320      	movs	r3, #32
 8001390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_TIM2_Init+0x98>)
 800139c:	f006 fcb6 	bl	8007d0c <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013a6:	f000 f8c5 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20001494 	.word	0x20001494

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2010      	movs	r0, #16
 80013e0:	f001 f849 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013e4:	2010      	movs	r0, #16
 80013e6:	f001 f862 	bl	80024ae <HAL_NVIC_EnableIRQ>

}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a43      	ldr	r2, [pc, #268]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <MX_GPIO_Init+0x12c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <MX_GPIO_Init+0x12c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a35      	ldr	r2, [pc, #212]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b33      	ldr	r3, [pc, #204]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <MX_GPIO_Init+0x12c>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a27      	ldr	r2, [pc, #156]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_GPIO_Init+0x12c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2101      	movs	r1, #1
 800149e:	4822      	ldr	r0, [pc, #136]	; (8001528 <MX_GPIO_Init+0x130>)
 80014a0:	f001 fdb0 	bl	8003004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80014a4:	2200      	movs	r2, #0
 80014a6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014aa:	4820      	ldr	r0, [pc, #128]	; (800152c <MX_GPIO_Init+0x134>)
 80014ac:	f001 fdaa 	bl	8003004 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_GPIO_Init+0x130>)
 80014c8:	f001 fbea 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4814      	ldr	r0, [pc, #80]	; (8001530 <MX_GPIO_Init+0x138>)
 80014e0:	f001 fbde 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80014e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_GPIO_Init+0x134>)
 80014fa:	f001 fbd1 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80014fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001502:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_GPIO_Init+0x134>)
 8001518:	f001 fbc2 	bl	8002ca0 <HAL_GPIO_Init>

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40020000 	.word	0x40020000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_ADC_MspInit+0x7c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d127      	bne.n	8001606 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_ADC_MspInit+0x80>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <HAL_ADC_MspInit+0x80>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_ADC_MspInit+0x80>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_ADC_MspInit+0x80>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_ADC_MspInit+0x80>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_ADC_MspInit+0x80>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ee:	2302      	movs	r3, #2
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <HAL_ADC_MspInit+0x84>)
 8001602:	f001 fb4d 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40012000 	.word	0x40012000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_I2C_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12c      	bne.n	8001698 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800165a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001660:	2312      	movs	r3, #18
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001664:	2301      	movs	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166c:	2304      	movs	r3, #4
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_I2C_MspInit+0x8c>)
 8001678:	f001 fb12 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400

080016ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_I2S_MspInit+0x134>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 8084 	bne.w	80017d8 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a42      	ldr	r2, [pc, #264]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 80016da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_I2S_MspInit+0x138>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001724:	2310      	movs	r3, #16
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001734:	2306      	movs	r3, #6
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	482a      	ldr	r0, [pc, #168]	; (80017e8 <HAL_I2S_MspInit+0x13c>)
 8001740:	f001 faae 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001744:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001756:	2306      	movs	r3, #6
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4822      	ldr	r0, [pc, #136]	; (80017ec <HAL_I2S_MspInit+0x140>)
 8001762:	f001 fa9d 	bl	8002ca0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_I2S_MspInit+0x148>)
 800176a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 800176e:	2200      	movs	r2, #0
 8001770:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 8001774:	2240      	movs	r2, #64	; 0x40
 8001776:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 8001780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001784:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 8001788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800178c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 8001790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001794:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 8001798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017a6:	2204      	movs	r2, #4
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017ac:	2203      	movs	r2, #3
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017be:	f000 fe91 	bl	80024e4 <HAL_DMA_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 80017c8:	f7ff feb4 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_I2S_MspInit+0x144>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40003c00 	.word	0x40003c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020800 	.word	0x40020800
 80017f0:	200013e8 	.word	0x200013e8
 80017f4:	40026088 	.word	0x40026088

080017f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d115      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_TIM_Base_MspInit+0x48>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_TIM_Base_MspInit+0x48>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x48>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	201c      	movs	r0, #28
 800182c:	f000 fe23 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001830:	201c      	movs	r0, #28
 8001832:	f000 fe3c 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f8e8 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Stream5_IRQHandler+0x10>)
 800189e:	f000 ff97 	bl	80027d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200013e8 	.word	0x200013e8

080018ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TIM2_IRQHandler+0x10>)
 80018b2:	f005 ff09 	bl	80076c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20001494 	.word	0x20001494

080018c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <OTG_FS_IRQHandler+0x10>)
 80018c6:	f001 fe45 	bl	8003554 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20001d60 	.word	0x20001d60

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f00d f886 	bl	800ea14 <__errno>
 8001908:	4602      	mov	r2, r0
 800190a:	230c      	movs	r3, #12
 800190c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20020000 	.word	0x20020000
 8001934:	00002000 	.word	0x00002000
 8001938:	20001348 	.word	0x20001348
 800193c:	20002028 	.word	0x20002028

08001940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <SystemInit+0x28>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <SystemInit+0x28>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SystemInit+0x28>)
 8001956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800195a:	609a      	str	r2, [r3, #8]
#endif
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001970:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001972:	e003      	b.n	800197c <LoopCopyDataInit>

08001974 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001976:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001978:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800197a:	3104      	adds	r1, #4

0800197c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001980:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001982:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001984:	d3f6      	bcc.n	8001974 <CopyDataInit>
  ldr  r2, =_sbss
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001988:	e002      	b.n	8001990 <LoopFillZerobss>

0800198a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800198a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800198c:	f842 3b04 	str.w	r3, [r2], #4

08001990 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001992:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001994:	d3f9      	bcc.n	800198a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001996:	f7ff ffd3 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199a:	f00d f841 	bl	800ea20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199e:	f7ff fa2b 	bl	8000df8 <main>
  bx  lr    
 80019a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019a8:	0800edd4 	.word	0x0800edd4
  ldr  r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019b0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80019b4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80019b8:	20002028 	.word	0x20002028

080019bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_Init+0x40>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_Init+0x40>)
 80019d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_Init+0x40>)
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 fd39 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f000 f808 	bl	8001a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f4:	f7ff fda6 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x54>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_InitTick+0x58>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fd51 	bl	80024ca <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00e      	b.n	8001a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d80a      	bhi.n	8001a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f000 fd19 	bl	8002476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <HAL_InitTick+0x5c>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000008 	.word	0x20000008
 8001a88:	2000151c 	.word	0x2000151c

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	2000151c 	.word	0x2000151c

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_Delay+0x40>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e033      	b.n	8001b66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fd44 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b2e:	f023 0302 	bic.w	r3, r3, #2
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fac4 	bl	80020c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
 8001b56:	e001      	b.n	8001b5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_Start+0x1a>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0a5      	b.n	8001cd6 <HAL_ADC_Start+0x166>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d018      	beq.n	8001bd2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_ADC_Start+0x174>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a4c      	ldr	r2, [pc, #304]	; (8001ce8 <HAL_ADC_Start+0x178>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0c9a      	lsrs	r2, r3, #18
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d179      	bne.n	8001cd4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f023 0206 	bic.w	r2, r3, #6
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_ADC_Start+0x17c>)
 8001c3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c48:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d12a      	bne.n	8001cac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <HAL_ADC_Start+0x180>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d015      	beq.n	8001c8c <HAL_ADC_Start+0x11c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_ADC_Start+0x184>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d105      	bne.n	8001c76 <HAL_ADC_Start+0x106>
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_ADC_Start+0x17c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_ADC_Start+0x188>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d129      	bne.n	8001cd4 <HAL_ADC_Start+0x164>
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_ADC_Start+0x17c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d823      	bhi.n	8001cd4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d11c      	bne.n	8001cd4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	e013      	b.n	8001cd4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_ADC_Start+0x180>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10e      	bne.n	8001cd4 <HAL_ADC_Start+0x164>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cd2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	40012300 	.word	0x40012300
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	40012100 	.word	0x40012100
 8001cf8:	40012200 	.word	0x40012200

08001cfc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADC_Stop+0x16>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e021      	b.n	8001d56 <HAL_ADC_Stop+0x5a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7e:	d113      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e05c      	b.n	8001e62 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001da8:	f7ff fe70 	bl	8001a8c <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dae:	e01a      	b.n	8001de6 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db6:	d016      	beq.n	8001de6 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_ADC_PollForConversion+0x6c>
 8001dbe:	f7ff fe65 	bl	8001a8c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d20b      	bcs.n	8001de6 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f043 0204 	orr.w	r2, r3, #4
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e03d      	b.n	8001e62 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d1dd      	bne.n	8001db0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0212 	mvn.w	r2, #18
 8001dfc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d123      	bne.n	8001e60 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11f      	bne.n	8001e60 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d111      	bne.n	8001e60 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1c>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e105      	b.n	80020ac <HAL_ADC_ConfigChannel+0x228>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	d925      	bls.n	8001efc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68d9      	ldr	r1, [r3, #12]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68d9      	ldr	r1, [r3, #12]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4403      	add	r3, r0
 8001eee:	3b1e      	subs	r3, #30
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	e022      	b.n	8001f42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	2207      	movs	r2, #7
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4403      	add	r3, r0
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d824      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b05      	subs	r3, #5
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b05      	subs	r3, #5
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
 8001f92:	e04c      	b.n	800202e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d824      	bhi.n	8001fe6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b23      	subs	r3, #35	; 0x23
 8001fae:	221f      	movs	r2, #31
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	400a      	ands	r2, r1
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b23      	subs	r3, #35	; 0x23
 8001fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe4:	e023      	b.n	800202e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b41      	subs	r3, #65	; 0x41
 8001ff8:	221f      	movs	r2, #31
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	400a      	ands	r2, r1
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b41      	subs	r3, #65	; 0x41
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_ADC_ConfigChannel+0x234>)
 8002030:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_ADC_ConfigChannel+0x238>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d109      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1cc>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b12      	cmp	r3, #18
 8002042:	d105      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_ADC_ConfigChannel+0x238>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d123      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x21e>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d003      	beq.n	800206a <HAL_ADC_ConfigChannel+0x1e6>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b11      	cmp	r3, #17
 8002068:	d11b      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b10      	cmp	r3, #16
 800207c:	d111      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_ADC_ConfigChannel+0x240>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9a      	lsrs	r2, r3, #18
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002094:	e002      	b.n	800209c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3b01      	subs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40012300 	.word	0x40012300
 80020bc:	40012000 	.word	0x40012000
 80020c0:	20000000 	.word	0x20000000
 80020c4:	431bde83 	.word	0x431bde83

080020c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d0:	4b79      	ldr	r3, [pc, #484]	; (80022b8 <ADC_Init+0x1f0>)
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	021a      	lsls	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6899      	ldr	r1, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	4a58      	ldr	r2, [pc, #352]	; (80022bc <ADC_Init+0x1f4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800216e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6899      	ldr	r1, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e00f      	b.n	80021c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0202 	bic.w	r2, r2, #2
 80021d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e1b      	ldrb	r3, [r3, #24]
 80021e0:	005a      	lsls	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01b      	beq.n	800222c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002212:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	3b01      	subs	r3, #1
 8002220:	035a      	lsls	r2, r3, #13
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	e007      	b.n	800223c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	3b01      	subs	r3, #1
 8002258:	051a      	lsls	r2, r3, #20
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800227e:	025a      	lsls	r2, r3, #9
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	029a      	lsls	r2, r3, #10
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40012300 	.word	0x40012300
 80022bc:	0f000001 	.word	0x0f000001

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4907      	ldr	r1, [pc, #28]	; (800235c <__NVIC_EnableIRQ+0x38>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	db0a      	blt.n	800238a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	490c      	ldr	r1, [pc, #48]	; (80023ac <__NVIC_SetPriority+0x4c>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	440b      	add	r3, r1
 8002384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002388:	e00a      	b.n	80023a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4908      	ldr	r1, [pc, #32]	; (80023b0 <__NVIC_SetPriority+0x50>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	3b04      	subs	r3, #4
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	440b      	add	r3, r1
 800239e:	761a      	strb	r2, [r3, #24]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f1c3 0307 	rsb	r3, r3, #7
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	bf28      	it	cs
 80023d2:	2304      	movcs	r3, #4
 80023d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3304      	adds	r3, #4
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d902      	bls.n	80023e4 <NVIC_EncodePriority+0x30>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3b03      	subs	r3, #3
 80023e2:	e000      	b.n	80023e6 <NVIC_EncodePriority+0x32>
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43d9      	mvns	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	4313      	orrs	r3, r2
         );
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800242c:	d301      	bcc.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <SysTick_Config+0x40>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	210f      	movs	r1, #15
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7ff ff8e 	bl	8002360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <SysTick_Config+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <SysTick_Config+0x40>)
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff29 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff3e 	bl	8002308 <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff8e 	bl	80023b4 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5d 	bl	8002360 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff31 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffa2 	bl	800241c <SysTick_Config>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff facc 	bl	8001a8c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e099      	b.n	8002634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002520:	e00f      	b.n	8002542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002522:	f7ff fab3 	bl	8001a8c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b05      	cmp	r3, #5
 800252e:	d908      	bls.n	8002542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e078      	b.n	8002634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e8      	bne.n	8002522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_DMA_Init+0x158>)
 800255c:	4013      	ands	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	2b04      	cmp	r3, #4
 800259a:	d107      	bne.n	80025ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4313      	orrs	r3, r2
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f023 0307 	bic.w	r3, r3, #7
 80025c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d117      	bne.n	8002606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fadf 	bl	8002bac <DMA_CheckFifoParam>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2240      	movs	r2, #64	; 0x40
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002602:	2301      	movs	r3, #1
 8002604:	e016      	b.n	8002634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa96 	bl	8002b40 <DMA_CalcBaseAndBitshift>
 8002614:	4603      	mov	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	223f      	movs	r2, #63	; 0x3f
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	f010803f 	.word	0xf010803f

08002640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Start_IT+0x26>
 8002662:	2302      	movs	r3, #2
 8002664:	e040      	b.n	80026e8 <HAL_DMA_Start_IT+0xa8>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d12f      	bne.n	80026da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa28 	bl	8002ae4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	223f      	movs	r2, #63	; 0x3f
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0216 	orr.w	r2, r2, #22
 80026ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0208 	orr.w	r2, r2, #8
 80026c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e005      	b.n	80026e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
 80026e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026fe:	f7ff f9c5 	bl	8001a8c <HAL_GetTick>
 8002702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d008      	beq.n	8002722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e052      	b.n	80027c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0216 	bic.w	r2, r2, #22
 8002730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <HAL_DMA_Abort+0x62>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0208 	bic.w	r2, r2, #8
 8002760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002772:	e013      	b.n	800279c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002774:	f7ff f98a 	bl	8001a8c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b05      	cmp	r3, #5
 8002780:	d90c      	bls.n	800279c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2203      	movs	r2, #3
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e015      	b.n	80027c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e4      	bne.n	8002774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	223f      	movs	r2, #63	; 0x3f
 80027b0:	409a      	lsls	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027dc:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_DMA_IRQHandler+0x258>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a92      	ldr	r2, [pc, #584]	; (8002a2c <HAL_DMA_IRQHandler+0x25c>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0a9b      	lsrs	r3, r3, #10
 80027e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fa:	2208      	movs	r2, #8
 80027fc:	409a      	lsls	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01a      	beq.n	800283c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0204 	bic.w	r2, r2, #4
 8002822:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2208      	movs	r2, #8
 800282a:	409a      	lsls	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2201      	movs	r2, #1
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2201      	movs	r2, #1
 8002860:	409a      	lsls	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2204      	movs	r2, #4
 8002878:	409a      	lsls	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2204      	movs	r2, #4
 8002896:	409a      	lsls	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	2210      	movs	r2, #16
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d043      	beq.n	8002940 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d03c      	beq.n	8002940 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	2210      	movs	r2, #16
 80028cc:	409a      	lsls	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d018      	beq.n	8002912 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d108      	bne.n	8002900 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d024      	beq.n	8002940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
 80028fe:	e01f      	b.n	8002940 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	e016      	b.n	8002940 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0208 	bic.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2220      	movs	r2, #32
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 808e 	beq.w	8002a6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8086 	beq.w	8002a6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2220      	movs	r2, #32
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b05      	cmp	r3, #5
 8002978:	d136      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0216 	bic.w	r2, r2, #22
 8002988:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002998:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <HAL_DMA_IRQHandler+0x1da>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0208 	bic.w	r2, r2, #8
 80029b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	223f      	movs	r2, #63	; 0x3f
 80029c0:	409a      	lsls	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d07d      	beq.n	8002ada <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
        }
        return;
 80029e6:	e078      	b.n	8002ada <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01c      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d108      	bne.n	8002a16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d030      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
 8002a14:	e02b      	b.n	8002a6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e022      	b.n	8002a6e <HAL_DMA_IRQHandler+0x29e>
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0210 	bic.w	r2, r2, #16
 8002a4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d032      	beq.n	8002adc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d022      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2205      	movs	r2, #5
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d307      	bcc.n	8002ab6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f2      	bne.n	8002a9a <HAL_DMA_IRQHandler+0x2ca>
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ab6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
 8002ad8:	e000      	b.n	8002adc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ada:	bf00      	nop
    }
  }
}
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop

08002ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d108      	bne.n	8002b24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b22:	e007      	b.n	8002b34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3b10      	subs	r3, #16
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d909      	bls.n	8002b82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	1d1a      	adds	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b80:	e007      	b.n	8002b92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	aaaaaaab 	.word	0xaaaaaaab
 8002ba8:	0800ed28 	.word	0x0800ed28

08002bac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d11f      	bne.n	8002c06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d855      	bhi.n	8002c78 <DMA_CheckFifoParam+0xcc>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <DMA_CheckFifoParam+0x28>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002bf7 	.word	0x08002bf7
 8002bdc:	08002be5 	.word	0x08002be5
 8002be0:	08002c79 	.word	0x08002c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d045      	beq.n	8002c7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf4:	e042      	b.n	8002c7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bfe:	d13f      	bne.n	8002c80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e03c      	b.n	8002c80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0e:	d121      	bne.n	8002c54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d836      	bhi.n	8002c84 <DMA_CheckFifoParam+0xd8>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <DMA_CheckFifoParam+0x70>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c33 	.word	0x08002c33
 8002c24:	08002c2d 	.word	0x08002c2d
 8002c28:	08002c45 	.word	0x08002c45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c30:	e02f      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d024      	beq.n	8002c88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c42:	e021      	b.n	8002c88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c4c:	d11e      	bne.n	8002c8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c52:	e01b      	b.n	8002c8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d902      	bls.n	8002c60 <DMA_CheckFifoParam+0xb4>
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d003      	beq.n	8002c66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c5e:	e018      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e015      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      break;
 8002c76:	e00b      	b.n	8002c90 <DMA_CheckFifoParam+0xe4>
      break;
 8002c78:	bf00      	nop
 8002c7a:	e00a      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e008      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      break;
 8002c80:	bf00      	nop
 8002c82:	e006      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      break;
 8002c84:	bf00      	nop
 8002c86:	e004      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e002      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <DMA_CheckFifoParam+0xe6>
      break;
 8002c90:	bf00      	nop
    }
  } 
  
  return status; 
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	e16b      	b.n	8002f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	f040 815a 	bne.w	8002f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d00b      	beq.n	8002cfa <HAL_GPIO_Init+0x5a>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cee:	2b11      	cmp	r3, #17
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b12      	cmp	r3, #18
 8002cf8:	d130      	bne.n	8002d5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	2203      	movs	r2, #3
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0201 	and.w	r2, r3, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0xfc>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b12      	cmp	r3, #18
 8002d9a:	d123      	bne.n	8002de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	08da      	lsrs	r2, r3, #3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3208      	adds	r2, #8
 8002da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	220f      	movs	r2, #15
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	08da      	lsrs	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3208      	adds	r2, #8
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0203 	and.w	r2, r3, #3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80b4 	beq.w	8002f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_GPIO_Init+0x308>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4a5e      	ldr	r2, [pc, #376]	; (8002fa8 <HAL_GPIO_Init+0x308>)
 8002e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e34:	6453      	str	r3, [r2, #68]	; 0x44
 8002e36:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <HAL_GPIO_Init+0x308>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e42:	4a5a      	ldr	r2, [pc, #360]	; (8002fac <HAL_GPIO_Init+0x30c>)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a51      	ldr	r2, [pc, #324]	; (8002fb0 <HAL_GPIO_Init+0x310>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d02b      	beq.n	8002ec6 <HAL_GPIO_Init+0x226>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a50      	ldr	r2, [pc, #320]	; (8002fb4 <HAL_GPIO_Init+0x314>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d025      	beq.n	8002ec2 <HAL_GPIO_Init+0x222>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4f      	ldr	r2, [pc, #316]	; (8002fb8 <HAL_GPIO_Init+0x318>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <HAL_GPIO_Init+0x21e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4e      	ldr	r2, [pc, #312]	; (8002fbc <HAL_GPIO_Init+0x31c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x21a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4d      	ldr	r2, [pc, #308]	; (8002fc0 <HAL_GPIO_Init+0x320>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x216>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4c      	ldr	r2, [pc, #304]	; (8002fc4 <HAL_GPIO_Init+0x324>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x212>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <HAL_GPIO_Init+0x328>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x20e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a4a      	ldr	r2, [pc, #296]	; (8002fcc <HAL_GPIO_Init+0x32c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x20a>
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	e00e      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	e00c      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002eae:	2306      	movs	r3, #6
 8002eb0:	e00a      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	e008      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	e006      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e004      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_GPIO_Init+0x228>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f002 0203 	and.w	r2, r2, #3
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed8:	4934      	ldr	r1, [pc, #208]	; (8002fac <HAL_GPIO_Init+0x30c>)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3302      	adds	r3, #2
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f0a:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f88:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HAL_GPIO_Init+0x330>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3301      	adds	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	f67f ae90 	bls.w	8002cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3724      	adds	r7, #36	; 0x24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40021c00 	.word	0x40021c00
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e001      	b.n	8002ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	807b      	strh	r3, [r7, #2]
 8003010:	4613      	mov	r3, r2
 8003012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003014:	787b      	ldrb	r3, [r7, #1]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003020:	e003      	b.n	800302a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003022:	887b      	ldrh	r3, [r7, #2]
 8003024:	041a      	lsls	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	619a      	str	r2, [r3, #24]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003038:	b08f      	sub	sp, #60	; 0x3c
 800303a:	af0a      	add	r7, sp, #40	; 0x28
 800303c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e054      	b.n	80030f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f00b fa1e 	bl	800e4a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2203      	movs	r2, #3
 800306c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 ff42 	bl	8007f10 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	687e      	ldr	r6, [r7, #4]
 8003094:	466d      	mov	r5, sp
 8003096:	f106 0410 	add.w	r4, r6, #16
 800309a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80030aa:	1d33      	adds	r3, r6, #4
 80030ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ae:	6838      	ldr	r0, [r7, #0]
 80030b0:	f004 febc 	bl	8007e2c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 ff39 	bl	8007f32 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	687e      	ldr	r6, [r7, #4]
 80030c8:	466d      	mov	r5, sp
 80030ca:	f106 0410 	add.w	r4, r6, #16
 80030ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030da:	e885 0003 	stmia.w	r5, {r0, r1}
 80030de:	1d33      	adds	r3, r6, #4
 80030e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	f005 f84c 	bl	8008180 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030fa:	b590      	push	{r4, r7, lr}
 80030fc:	b089      	sub	sp, #36	; 0x24
 80030fe:	af04      	add	r7, sp, #16
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	4608      	mov	r0, r1
 8003104:	4611      	mov	r1, r2
 8003106:	461a      	mov	r2, r3
 8003108:	4603      	mov	r3, r0
 800310a:	70fb      	strb	r3, [r7, #3]
 800310c:	460b      	mov	r3, r1
 800310e:	70bb      	strb	r3, [r7, #2]
 8003110:	4613      	mov	r3, r2
 8003112:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_HCD_HC_Init+0x28>
 800311e:	2302      	movs	r3, #2
 8003120:	e07f      	b.n	8003222 <HAL_HCD_HC_Init+0x128>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	333d      	adds	r3, #61	; 0x3d
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	3338      	adds	r3, #56	; 0x38
 800314e:	787a      	ldrb	r2, [r7, #1]
 8003150:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	3340      	adds	r3, #64	; 0x40
 8003162:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003164:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	3339      	adds	r3, #57	; 0x39
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	333f      	adds	r3, #63	; 0x3f
 800318a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800318e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	78bb      	ldrb	r3, [r7, #2]
 8003194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003198:	b2d8      	uxtb	r0, r3
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	333a      	adds	r3, #58	; 0x3a
 80031a8:	4602      	mov	r2, r0
 80031aa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80031ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da0a      	bge.n	80031ca <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	333b      	adds	r3, #59	; 0x3b
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e009      	b.n	80031de <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	333b      	adds	r3, #59	; 0x3b
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	333c      	adds	r3, #60	; 0x3c
 80031ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031f2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	787c      	ldrb	r4, [r7, #1]
 80031fa:	78ba      	ldrb	r2, [r7, #2]
 80031fc:	78f9      	ldrb	r1, [r7, #3]
 80031fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003200:	9302      	str	r3, [sp, #8]
 8003202:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	4623      	mov	r3, r4
 8003210:	f005 f938 	bl	8008484 <USB_HC_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bd90      	pop	{r4, r7, pc}

0800322a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_HCD_HC_Halt+0x1e>
 8003244:	2302      	movs	r3, #2
 8003246:	e00f      	b.n	8003268 <HAL_HCD_HC_Halt+0x3e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f005 fb74 	bl	8008946 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	70fb      	strb	r3, [r7, #3]
 8003282:	460b      	mov	r3, r1
 8003284:	70bb      	strb	r3, [r7, #2]
 8003286:	4613      	mov	r3, r2
 8003288:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	333b      	adds	r3, #59	; 0x3b
 800329a:	78ba      	ldrb	r2, [r7, #2]
 800329c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	333f      	adds	r3, #63	; 0x3f
 80032ae:	787a      	ldrb	r2, [r7, #1]
 80032b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032b2:	7c3b      	ldrb	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d114      	bne.n	80032e2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	3342      	adds	r3, #66	; 0x42
 80032c8:	2203      	movs	r2, #3
 80032ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	333d      	adds	r3, #61	; 0x3d
 80032dc:	7f3a      	ldrb	r2, [r7, #28]
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e009      	b.n	80032f6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	3342      	adds	r3, #66	; 0x42
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80032f6:	787b      	ldrb	r3, [r7, #1]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	f200 80d6 	bhi.w	80034aa <HAL_HCD_HC_SubmitRequest+0x23a>
 80032fe:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003315 	.word	0x08003315
 8003308:	08003495 	.word	0x08003495
 800330c:	08003381 	.word	0x08003381
 8003310:	0800340b 	.word	0x0800340b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003314:	7c3b      	ldrb	r3, [r7, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	f040 80c9 	bne.w	80034ae <HAL_HCD_HC_SubmitRequest+0x23e>
 800331c:	78bb      	ldrb	r3, [r7, #2]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 80c5 	bne.w	80034ae <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003324:	8b3b      	ldrh	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	3351      	adds	r3, #81	; 0x51
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	3351      	adds	r3, #81	; 0x51
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	3342      	adds	r3, #66	; 0x42
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003368:	e0a1      	b.n	80034ae <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	3342      	adds	r3, #66	; 0x42
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
      break;
 800337e:	e096      	b.n	80034ae <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003380:	78bb      	ldrb	r3, [r7, #2]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d120      	bne.n	80033c8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	3351      	adds	r3, #81	; 0x51
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10a      	bne.n	80033b2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	3342      	adds	r3, #66	; 0x42
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033b0:	e07e      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	3342      	adds	r3, #66	; 0x42
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]
      break;
 80033c6:	e073      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	3350      	adds	r3, #80	; 0x50
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	3342      	adds	r3, #66	; 0x42
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
      break;
 80033f2:	e05d      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	3342      	adds	r3, #66	; 0x42
 8003404:	2202      	movs	r2, #2
 8003406:	701a      	strb	r2, [r3, #0]
      break;
 8003408:	e052      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800340a:	78bb      	ldrb	r3, [r7, #2]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d120      	bne.n	8003452 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	3351      	adds	r3, #81	; 0x51
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	3342      	adds	r3, #66	; 0x42
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800343a:	e039      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	3342      	adds	r3, #66	; 0x42
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
      break;
 8003450:	e02e      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3350      	adds	r3, #80	; 0x50
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	3342      	adds	r3, #66	; 0x42
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
      break;
 800347c:	e018      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	3342      	adds	r3, #66	; 0x42
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]
      break;
 8003492:	e00d      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	3342      	adds	r3, #66	; 0x42
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
      break;
 80034a8:	e002      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80034ae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	3344      	adds	r3, #68	; 0x44
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	8b39      	ldrh	r1, [r7, #24]
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4403      	add	r3, r0
 80034d4:	3348      	adds	r3, #72	; 0x48
 80034d6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	335c      	adds	r3, #92	; 0x5c
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	334c      	adds	r3, #76	; 0x4c
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	3339      	adds	r3, #57	; 0x39
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	335d      	adds	r3, #93	; 0x5d
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	3338      	adds	r3, #56	; 0x38
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	18d1      	adds	r1, r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	f005 f8a8 	bl	8008698 <USB_HC_StartXfer>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop

08003554 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fdc5 	bl	80080fa <USB_GetMode>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 80ef 	bne.w	8003756 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f004 fda9 	bl	80080d4 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80e5 	beq.w	8003754 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 fda0 	bl	80080d4 <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359e:	d104      	bne.n	80035aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 fd90 	bl	80080d4 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035be:	d104      	bne.n	80035ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fd80 	bl	80080d4 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035de:	d104      	bne.n	80035ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 fd70 	bl	80080d4 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d103      	bne.n	8003606 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2202      	movs	r2, #2
 8003604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f004 fd62 	bl	80080d4 <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800361a:	d115      	bne.n	8003648 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003624:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f00a ffb2 	bl	800e5a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f004 fe58 	bl	80082f8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f004 fd41 	bl	80080d4 <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365c:	d102      	bne.n	8003664 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 f966 	bl	8004930 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f004 fd33 	bl	80080d4 <USB_ReadInterrupts>
 800366e:	4603      	mov	r3, r0
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d106      	bne.n	8003686 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f00a ff75 	bl	800e568 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2208      	movs	r2, #8
 8003684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f004 fd22 	bl	80080d4 <USB_ReadInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369a:	d138      	bne.n	800370e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f005 f93f 	bl	8008924 <USB_HC_ReadInterrupt>
 80036a6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e025      	b.n	80036fa <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d8:	d106      	bne.n	80036e8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8cf 	bl	8003884 <HCD_HC_IN_IRQHandler>
 80036e6:	e005      	b.n	80036f4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fcfd 	bl	80040ee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3301      	adds	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	429a      	cmp	r2, r3
 8003702:	d3d4      	bcc.n	80036ae <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f004 fcde 	bl	80080d4 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b10      	cmp	r3, #16
 8003720:	d101      	bne.n	8003726 <HAL_HCD_IRQHandler+0x1d2>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_HCD_IRQHandler+0x1d4>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d014      	beq.n	8003756 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0210 	bic.w	r2, r2, #16
 800373a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f001 f84b 	bl	80047d8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0210 	orr.w	r2, r2, #16
 8003750:	619a      	str	r2, [r3, #24]
 8003752:	e000      	b.n	8003756 <HAL_HCD_IRQHandler+0x202>
      return;
 8003754:	bf00      	nop
    }
  }
}
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_HCD_Start+0x16>
 800376e:	2302      	movs	r3, #2
 8003770:	e013      	b.n	800379a <HAL_HCD_Start+0x3e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f004 fbb5 	bl	8007eee <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fe18 	bl	80083c0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_HCD_Stop+0x16>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e00d      	b.n	80037d4 <HAL_HCD_Stop+0x32>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f005 f9f9 	bl	8008bbc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 fdbf 	bl	800836c <USB_ResetPort>
 80037ee:	4603      	mov	r3, r0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	335c      	adds	r3, #92	; 0x5c
 8003814:	781b      	ldrb	r3, [r3, #0]
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	334c      	adds	r3, #76	; 0x4c
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f004 fe01 	bl	8008460 <USB_GetCurrentFrame>
 800385e:	4603      	mov	r3, r0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f004 fddc 	bl	8008432 <USB_GetHostSpeed>
 800387a:	4603      	mov	r3, r0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d119      	bne.n	80038e8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c0:	461a      	mov	r2, r3
 80038c2:	2304      	movs	r3, #4
 80038c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	0151      	lsls	r1, r2, #5
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	440a      	add	r2, r1
 80038dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	60d3      	str	r3, [r2, #12]
 80038e6:	e0ce      	b.n	8003a86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d12c      	bne.n	800395a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	461a      	mov	r2, r3
 800390e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003912:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	335d      	adds	r3, #93	; 0x5d
 8003924:	2207      	movs	r2, #7
 8003926:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	0151      	lsls	r1, r2, #5
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	440a      	add	r2, r1
 800393e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003942:	f043 0302 	orr.w	r3, r3, #2
 8003946:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f004 fff7 	bl	8008946 <USB_HC_Halt>
 8003958:	e095      	b.n	8003a86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b20      	cmp	r3, #32
 800396e:	d109      	bne.n	8003984 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	461a      	mov	r2, r3
 800397e:	2320      	movs	r3, #32
 8003980:	6093      	str	r3, [r2, #8]
 8003982:	e080      	b.n	8003a86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d134      	bne.n	8003a04 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	0151      	lsls	r1, r2, #5
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	440a      	add	r2, r1
 80039b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	335d      	adds	r3, #93	; 0x5d
 80039ca:	2205      	movs	r2, #5
 80039cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	461a      	mov	r2, r3
 80039dc:	2310      	movs	r3, #16
 80039de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	461a      	mov	r2, r3
 80039ee:	2308      	movs	r3, #8
 80039f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 ffa2 	bl	8008946 <USB_HC_Halt>
 8003a02:	e040      	b.n	8003a86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1a:	d134      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 ff7d 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2310      	movs	r3, #16
 8003a5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	335d      	adds	r3, #93	; 0x5d
 8003a6e:	2208      	movs	r2, #8
 8003a70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a84:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d122      	bne.n	8003ae4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	0151      	lsls	r1, r2, #5
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	440a      	add	r2, r1
 8003ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 ff3c 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	461a      	mov	r2, r3
 8003adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ae2:	e300      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	f040 80fd 	bne.w	8003cf6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	440b      	add	r3, r1
 8003b12:	3348      	adds	r3, #72	; 0x48
 8003b14:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	0159      	lsls	r1, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	440b      	add	r3, r1
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003b28:	1ad1      	subs	r1, r2, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4403      	add	r3, r0
 8003b38:	334c      	adds	r3, #76	; 0x4c
 8003b3a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	335d      	adds	r3, #93	; 0x5d
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3358      	adds	r3, #88	; 0x58
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	461a      	mov	r2, r3
 8003b72:	2301      	movs	r3, #1
 8003b74:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	333f      	adds	r3, #63	; 0x3f
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	333f      	adds	r3, #63	; 0x3f
 8003b9c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d121      	bne.n	8003be6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f004 feba 	bl	8008946 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	2310      	movs	r3, #16
 8003be2:	6093      	str	r3, [r2, #8]
 8003be4:	e070      	b.n	8003cc8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	333f      	adds	r3, #63	; 0x3f
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d12a      	bne.n	8003c52 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c1a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	440b      	add	r3, r1
 8003c2a:	335c      	adds	r3, #92	; 0x5c
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	b2d8      	uxtb	r0, r3
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4601      	mov	r1, r0
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f00a fcb6 	bl	800e5bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c50:	e03a      	b.n	8003cc8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	440b      	add	r3, r1
 8003c60:	333f      	adds	r3, #63	; 0x3f
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d12f      	bne.n	8003cc8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	335c      	adds	r3, #92	; 0x5c
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	3350      	adds	r3, #80	; 0x50
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2d8      	uxtb	r0, r3
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3350      	adds	r3, #80	; 0x50
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	b2d8      	uxtb	r0, r3
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	335c      	adds	r3, #92	; 0x5c
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f00a fc7a 	bl	800e5bc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3350      	adds	r3, #80	; 0x50
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2d8      	uxtb	r0, r3
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	3350      	adds	r3, #80	; 0x50
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	701a      	strb	r2, [r3, #0]
}
 8003cf4:	e1f7      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	f040 811a 	bne.w	8003f42 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d28:	f023 0302 	bic.w	r3, r3, #2
 8003d2c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	335d      	adds	r3, #93	; 0x5d
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10a      	bne.n	8003d5a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	335c      	adds	r3, #92	; 0x5c
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e0d9      	b.n	8003f0e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	335d      	adds	r3, #93	; 0x5d
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d10a      	bne.n	8003d86 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	440b      	add	r3, r1
 8003d7e:	335c      	adds	r3, #92	; 0x5c
 8003d80:	2205      	movs	r2, #5
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e0c3      	b.n	8003f0e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	335d      	adds	r3, #93	; 0x5d
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d00a      	beq.n	8003db2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	440b      	add	r3, r1
 8003daa:	335d      	adds	r3, #93	; 0x5d
 8003dac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d156      	bne.n	8003e60 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3358      	adds	r3, #88	; 0x58
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4403      	add	r3, r0
 8003dd4:	3358      	adds	r3, #88	; 0x58
 8003dd6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	440b      	add	r3, r1
 8003de6:	3358      	adds	r3, #88	; 0x58
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d914      	bls.n	8003e18 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3358      	adds	r3, #88	; 0x58
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	440b      	add	r3, r1
 8003e10:	335c      	adds	r3, #92	; 0x5c
 8003e12:	2204      	movs	r2, #4
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e009      	b.n	8003e2c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	440b      	add	r3, r1
 8003e26:	335c      	adds	r3, #92	; 0x5c
 8003e28:	2202      	movs	r2, #2
 8003e2a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e42:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e4a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e056      	b.n	8003f0e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	440b      	add	r3, r1
 8003e6e:	335d      	adds	r3, #93	; 0x5d
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d123      	bne.n	8003ebe <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	335c      	adds	r3, #92	; 0x5c
 8003e86:	2202      	movs	r2, #2
 8003e88:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ea0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ea8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	e027      	b.n	8003f0e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	335d      	adds	r3, #93	; 0x5d
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b07      	cmp	r3, #7
 8003ed2:	d11c      	bne.n	8003f0e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3358      	adds	r3, #88	; 0x58
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	1c59      	adds	r1, r3, #1
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4403      	add	r3, r0
 8003ef6:	3358      	adds	r3, #88	; 0x58
 8003ef8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	335c      	adds	r3, #92	; 0x5c
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	b2d8      	uxtb	r0, r3
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	440b      	add	r3, r1
 8003f32:	335c      	adds	r3, #92	; 0x5c
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	4601      	mov	r1, r0
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f00a fb3e 	bl	800e5bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f40:	e0d1      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d13e      	bne.n	8003fd6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	440b      	add	r3, r1
 8003f86:	3358      	adds	r3, #88	; 0x58
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	1c59      	adds	r1, r3, #1
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4403      	add	r3, r0
 8003f9a:	3358      	adds	r3, #88	; 0x58
 8003f9c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	335d      	adds	r3, #93	; 0x5d
 8003fae:	2206      	movs	r2, #6
 8003fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f004 fcc2 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	6093      	str	r3, [r2, #8]
}
 8003fd4:	e087      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d17c      	bne.n	80040e6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	333f      	adds	r3, #63	; 0x3f
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d122      	bne.n	8004048 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	3358      	adds	r3, #88	; 0x58
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	440a      	add	r2, r1
 800402c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f004 fc80 	bl	8008946 <USB_HC_Halt>
 8004046:	e045      	b.n	80040d4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	333f      	adds	r3, #63	; 0x3f
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	333f      	adds	r3, #63	; 0x3f
 800406e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004070:	2b02      	cmp	r3, #2
 8004072:	d12f      	bne.n	80040d4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	3358      	adds	r3, #88	; 0x58
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d121      	bne.n	80040d4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	440b      	add	r3, r1
 800409e:	335d      	adds	r3, #93	; 0x5d
 80040a0:	2203      	movs	r2, #3
 80040a2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040be:	f043 0302 	orr.w	r3, r3, #2
 80040c2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fc39 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	2310      	movs	r3, #16
 80040e4:	6093      	str	r3, [r2, #8]
}
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d119      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	461a      	mov	r2, r3
 800412c:	2304      	movs	r3, #4
 800412e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	440a      	add	r2, r1
 8004146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004150:	e33e      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b20      	cmp	r3, #32
 8004166:	d141      	bne.n	80041ec <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004174:	461a      	mov	r2, r3
 8004176:	2320      	movs	r3, #32
 8004178:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	440b      	add	r3, r1
 8004188:	333d      	adds	r3, #61	; 0x3d
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	f040 831f 	bne.w	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	333d      	adds	r3, #61	; 0x3d
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	440b      	add	r3, r1
 80041b4:	335c      	adds	r3, #92	; 0x5c
 80041b6:	2202      	movs	r2, #2
 80041b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fbae 	bl	8008946 <USB_HC_Halt>
}
 80041ea:	e2f1      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d13f      	bne.n	8004282 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	440b      	add	r3, r1
 8004210:	335d      	adds	r3, #93	; 0x5d
 8004212:	2204      	movs	r2, #4
 8004214:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	440b      	add	r3, r1
 8004224:	333d      	adds	r3, #61	; 0x3d
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	440b      	add	r3, r1
 8004238:	3358      	adds	r3, #88	; 0x58
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	440a      	add	r2, r1
 8004254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f004 fb6c 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427a:	461a      	mov	r2, r3
 800427c:	2340      	movs	r3, #64	; 0x40
 800427e:	6093      	str	r3, [r2, #8]
}
 8004280:	e2a6      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004298:	d122      	bne.n	80042e0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fb3e 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d6:	461a      	mov	r2, r3
 80042d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042dc:	6093      	str	r3, [r2, #8]
}
 80042de:	e277      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d135      	bne.n	8004362 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	3358      	adds	r3, #88	; 0x58
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	440a      	add	r2, r1
 8004320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f004 fb06 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004346:	461a      	mov	r2, r3
 8004348:	2301      	movs	r3, #1
 800434a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	440b      	add	r3, r1
 800435a:	335d      	adds	r3, #93	; 0x5d
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
}
 8004360:	e236      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d12b      	bne.n	80043d0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	2308      	movs	r3, #8
 8004388:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f004 fac6 	bl	8008946 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	335d      	adds	r3, #93	; 0x5d
 80043ca:	2205      	movs	r2, #5
 80043cc:	701a      	strb	r2, [r3, #0]
}
 80043ce:	e1ff      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d155      	bne.n	8004492 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	3358      	adds	r3, #88	; 0x58
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	440b      	add	r3, r1
 8004408:	335d      	adds	r3, #93	; 0x5d
 800440a:	2203      	movs	r2, #3
 800440c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	440b      	add	r3, r1
 800441c:	333d      	adds	r3, #61	; 0x3d
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d114      	bne.n	800444e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	440b      	add	r3, r1
 8004432:	333c      	adds	r3, #60	; 0x3c
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	440b      	add	r3, r1
 8004448:	333d      	adds	r3, #61	; 0x3d
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	440a      	add	r2, r1
 8004464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004468:	f043 0302 	orr.w	r3, r3, #2
 800446c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f004 fa64 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	461a      	mov	r2, r3
 800448c:	2310      	movs	r3, #16
 800448e:	6093      	str	r3, [r2, #8]
}
 8004490:	e19e      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	2b80      	cmp	r3, #128	; 0x80
 80044a6:	d12b      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c2:	f043 0302 	orr.w	r3, r3, #2
 80044c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f004 fa37 	bl	8008946 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	335d      	adds	r3, #93	; 0x5d
 80044e8:	2206      	movs	r2, #6
 80044ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	6093      	str	r3, [r2, #8]
}
 80044fe:	e167      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004516:	d135      	bne.n	8004584 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	440a      	add	r2, r1
 800452e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004532:	f043 0302 	orr.w	r3, r3, #2
 8004536:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f004 f9ff 	bl	8008946 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	461a      	mov	r2, r3
 8004556:	2310      	movs	r3, #16
 8004558:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	461a      	mov	r2, r3
 8004568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800456c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	335d      	adds	r3, #93	; 0x5d
 800457e:	2208      	movs	r2, #8
 8004580:	701a      	strb	r2, [r3, #0]
}
 8004582:	e125      	b.n	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	f040 811a 	bne.w	80047d0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b6:	f023 0302 	bic.w	r3, r3, #2
 80045ba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	440b      	add	r3, r1
 80045ca:	335d      	adds	r3, #93	; 0x5d
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d137      	bne.n	8004642 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	440b      	add	r3, r1
 80045e0:	335c      	adds	r3, #92	; 0x5c
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	440b      	add	r3, r1
 80045f4:	333f      	adds	r3, #63	; 0x3f
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d00b      	beq.n	8004614 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	440b      	add	r3, r1
 800460a:	333f      	adds	r3, #63	; 0x3f
 800460c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800460e:	2b03      	cmp	r3, #3
 8004610:	f040 80c5 	bne.w	800479e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	3351      	adds	r3, #81	; 0x51
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	f083 0301 	eor.w	r3, r3, #1
 800462a:	b2d8      	uxtb	r0, r3
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	440b      	add	r3, r1
 800463a:	3351      	adds	r3, #81	; 0x51
 800463c:	4602      	mov	r2, r0
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e0ad      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	440b      	add	r3, r1
 8004650:	335d      	adds	r3, #93	; 0x5d
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d10a      	bne.n	800466e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	440b      	add	r3, r1
 8004666:	335c      	adds	r3, #92	; 0x5c
 8004668:	2202      	movs	r2, #2
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e097      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	440b      	add	r3, r1
 800467c:	335d      	adds	r3, #93	; 0x5d
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d10a      	bne.n	800469a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	440b      	add	r3, r1
 8004692:	335c      	adds	r3, #92	; 0x5c
 8004694:	2202      	movs	r2, #2
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e081      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	440b      	add	r3, r1
 80046a8:	335d      	adds	r3, #93	; 0x5d
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d10a      	bne.n	80046c6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	440b      	add	r3, r1
 80046be:	335c      	adds	r3, #92	; 0x5c
 80046c0:	2205      	movs	r2, #5
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e06b      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	335d      	adds	r3, #93	; 0x5d
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d00a      	beq.n	80046f2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	440b      	add	r3, r1
 80046ea:	335d      	adds	r3, #93	; 0x5d
 80046ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d155      	bne.n	800479e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	440b      	add	r3, r1
 8004700:	3358      	adds	r3, #88	; 0x58
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4403      	add	r3, r0
 8004714:	3358      	adds	r3, #88	; 0x58
 8004716:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	3358      	adds	r3, #88	; 0x58
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b03      	cmp	r3, #3
 800472c:	d914      	bls.n	8004758 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	440b      	add	r3, r1
 800473c:	3358      	adds	r3, #88	; 0x58
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	335c      	adds	r3, #92	; 0x5c
 8004752:	2204      	movs	r2, #4
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e009      	b.n	800476c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	440b      	add	r3, r1
 8004766:	335c      	adds	r3, #92	; 0x5c
 8004768:	2202      	movs	r2, #2
 800476a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004782:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800478a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047aa:	461a      	mov	r2, r3
 80047ac:	2302      	movs	r3, #2
 80047ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	b2d8      	uxtb	r0, r3
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	335c      	adds	r3, #92	; 0x5c
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	4601      	mov	r1, r0
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f009 fef6 	bl	800e5bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	0c5b      	lsrs	r3, r3, #17
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800480c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d003      	beq.n	800481c <HCD_RXQLVL_IRQHandler+0x44>
 8004814:	2b05      	cmp	r3, #5
 8004816:	f000 8082 	beq.w	800491e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800481a:	e083      	b.n	8004924 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d07f      	beq.n	8004922 <HCD_RXQLVL_IRQHandler+0x14a>
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	3344      	adds	r3, #68	; 0x44
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d074      	beq.n	8004922 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	3344      	adds	r3, #68	; 0x44
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	b292      	uxth	r2, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f003 fc15 	bl	8008082 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	440b      	add	r3, r1
 8004866:	3344      	adds	r3, #68	; 0x44
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	18d1      	adds	r1, r2, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4403      	add	r3, r0
 800487c:	3344      	adds	r3, #68	; 0x44
 800487e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	334c      	adds	r3, #76	; 0x4c
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	18d1      	adds	r1, r2, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4403      	add	r3, r0
 80048a4:	334c      	adds	r3, #76	; 0x4c
 80048a6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HCD_RXQLVL_IRQHandler+0x154>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d031      	beq.n	8004922 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	440b      	add	r3, r1
 80048fe:	3350      	adds	r3, #80	; 0x50
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	f083 0301 	eor.w	r3, r3, #1
 8004906:	b2d8      	uxtb	r0, r3
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	440b      	add	r3, r1
 8004916:	3350      	adds	r3, #80	; 0x50
 8004918:	4602      	mov	r2, r0
 800491a:	701a      	strb	r2, [r3, #0]
      break;
 800491c:	e001      	b.n	8004922 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004922:	bf00      	nop
  }
}
 8004924:	bf00      	nop
 8004926:	3728      	adds	r7, #40	; 0x28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	1ff80000 	.word	0x1ff80000

08004930 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800495c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d10b      	bne.n	8004980 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d102      	bne.n	8004978 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f009 fe06 	bl	800e584 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d132      	bne.n	80049f0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b04      	cmp	r3, #4
 800499a:	d126      	bne.n	80049ea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d113      	bne.n	80049cc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80049aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ae:	d106      	bne.n	80049be <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2102      	movs	r1, #2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f003 fc9e 	bl	80082f8 <USB_InitFSLSPClkSel>
 80049bc:	e011      	b.n	80049e2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	4618      	mov	r0, r3
 80049c6:	f003 fc97 	bl	80082f8 <USB_InitFSLSPClkSel>
 80049ca:	e00a      	b.n	80049e2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d106      	bne.n	80049e2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049da:	461a      	mov	r2, r3
 80049dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80049e0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f009 fdf8 	bl	800e5d8 <HAL_HCD_PortEnabled_Callback>
 80049e8:	e002      	b.n	80049f0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f009 fe02 	bl	800e5f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d103      	bne.n	8004a02 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f043 0320 	orr.w	r3, r3, #32
 8004a00:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6013      	str	r3, [r2, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e11f      	b.n	8004c6a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fdec 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f002 fc2c 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8004a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4a7b      	ldr	r2, [pc, #492]	; (8004c74 <HAL_I2C_Init+0x25c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d807      	bhi.n	8004a9c <HAL_I2C_Init+0x84>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a7a      	ldr	r2, [pc, #488]	; (8004c78 <HAL_I2C_Init+0x260>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	bf94      	ite	ls
 8004a94:	2301      	movls	r3, #1
 8004a96:	2300      	movhi	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e006      	b.n	8004aaa <HAL_I2C_Init+0x92>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a77      	ldr	r2, [pc, #476]	; (8004c7c <HAL_I2C_Init+0x264>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bf94      	ite	ls
 8004aa4:	2301      	movls	r3, #1
 8004aa6:	2300      	movhi	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e0db      	b.n	8004c6a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a72      	ldr	r2, [pc, #456]	; (8004c80 <HAL_I2C_Init+0x268>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0c9b      	lsrs	r3, r3, #18
 8004abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a64      	ldr	r2, [pc, #400]	; (8004c74 <HAL_I2C_Init+0x25c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d802      	bhi.n	8004aec <HAL_I2C_Init+0xd4>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	e009      	b.n	8004b00 <HAL_I2C_Init+0xe8>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	4a63      	ldr	r2, [pc, #396]	; (8004c84 <HAL_I2C_Init+0x26c>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	3301      	adds	r3, #1
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4956      	ldr	r1, [pc, #344]	; (8004c74 <HAL_I2C_Init+0x25c>)
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d80d      	bhi.n	8004b3c <HAL_I2C_Init+0x124>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1e59      	subs	r1, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	bf38      	it	cc
 8004b38:	2304      	movcc	r3, #4
 8004b3a:	e04f      	b.n	8004bdc <HAL_I2C_Init+0x1c4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d111      	bne.n	8004b68 <HAL_I2C_Init+0x150>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1e58      	subs	r0, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	440b      	add	r3, r1
 8004b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e012      	b.n	8004b8e <HAL_I2C_Init+0x176>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e58      	subs	r0, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	0099      	lsls	r1, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Init+0x17e>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e022      	b.n	8004bdc <HAL_I2C_Init+0x1c4>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10e      	bne.n	8004bbc <HAL_I2C_Init+0x1a4>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1e58      	subs	r0, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	440b      	add	r3, r1
 8004bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bba:	e00f      	b.n	8004bdc <HAL_I2C_Init+0x1c4>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1e58      	subs	r0, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	0099      	lsls	r1, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	6809      	ldr	r1, [r1, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6911      	ldr	r1, [r2, #16]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68d2      	ldr	r2, [r2, #12]
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	000186a0 	.word	0x000186a0
 8004c78:	001e847f 	.word	0x001e847f
 8004c7c:	003d08ff 	.word	0x003d08ff
 8004c80:	431bde83 	.word	0x431bde83
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	460b      	mov	r3, r1
 8004c96:	817b      	strh	r3, [r7, #10]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c9c:	f7fc fef6 	bl	8001a8c <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	f040 80e0 	bne.w	8004e70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2319      	movs	r3, #25
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	4970      	ldr	r1, [pc, #448]	; (8004e7c <HAL_I2C_Master_Transmit+0x1f4>)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fc58 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e0d3      	b.n	8004e72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_I2C_Master_Transmit+0x50>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e0cc      	b.n	8004e72 <HAL_I2C_Master_Transmit+0x1ea>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d007      	beq.n	8004cfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2221      	movs	r2, #33	; 0x21
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2210      	movs	r2, #16
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	893a      	ldrh	r2, [r7, #8]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a50      	ldr	r2, [pc, #320]	; (8004e80 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d40:	8979      	ldrh	r1, [r7, #10]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6a3a      	ldr	r2, [r7, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fac2 	bl	80052d0 <I2C_MasterRequestWrite>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e08d      	b.n	8004e72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d6c:	e066      	b.n	8004e3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	6a39      	ldr	r1, [r7, #32]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fcd2 	bl	800571c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d107      	bne.n	8004d96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e06b      	b.n	8004e72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	781a      	ldrb	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d11b      	bne.n	8004e10 <HAL_I2C_Master_Transmit+0x188>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d017      	beq.n	8004e10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	6a39      	ldr	r1, [r7, #32]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fcc2 	bl	800579e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d107      	bne.n	8004e38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e01a      	b.n	8004e72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d194      	bne.n	8004d6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e000      	b.n	8004e72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	00100002 	.word	0x00100002
 8004e80:	ffff0000 	.word	0xffff0000

08004e84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08c      	sub	sp, #48	; 0x30
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	460b      	mov	r3, r1
 8004e92:	817b      	strh	r3, [r7, #10]
 8004e94:	4613      	mov	r3, r2
 8004e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e98:	f7fc fdf8 	bl	8001a8c <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	f040 820b 	bne.w	80052c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2319      	movs	r3, #25
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	497c      	ldr	r1, [pc, #496]	; (80050a8 <HAL_I2C_Master_Receive+0x224>)
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fb5a 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e1fe      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_I2C_Master_Receive+0x50>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e1f7      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d007      	beq.n	8004efa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0201 	orr.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2222      	movs	r2, #34	; 0x22
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2210      	movs	r2, #16
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	893a      	ldrh	r2, [r7, #8]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a5c      	ldr	r2, [pc, #368]	; (80050ac <HAL_I2C_Master_Receive+0x228>)
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f3c:	8979      	ldrh	r1, [r7, #10]
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fa46 	bl	80053d4 <I2C_MasterRequestRead>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e1b8      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d113      	bne.n	8004f82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	623b      	str	r3, [r7, #32]
 8004f6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e18c      	b.n	800529c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d11b      	bne.n	8004fc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e16c      	b.n	800529c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d11b      	bne.n	8005002 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	e14c      	b.n	800529c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005028:	e138      	b.n	800529c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	2b03      	cmp	r3, #3
 8005030:	f200 80f1 	bhi.w	8005216 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	2b01      	cmp	r3, #1
 800503a:	d123      	bne.n	8005084 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 fbed 	bl	8005820 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e139      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005082:	e10b      	b.n	800529c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	2b02      	cmp	r3, #2
 800508a:	d14e      	bne.n	800512a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	2200      	movs	r2, #0
 8005094:	4906      	ldr	r1, [pc, #24]	; (80050b0 <HAL_I2C_Master_Receive+0x22c>)
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fa6a 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e10e      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
 80050a6:	bf00      	nop
 80050a8:	00100002 	.word	0x00100002
 80050ac:	ffff0000 	.word	0xffff0000
 80050b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005128:	e0b8      	b.n	800529c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	4966      	ldr	r1, [pc, #408]	; (80052cc <HAL_I2C_Master_Receive+0x448>)
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fa1b 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0bf      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	2200      	movs	r2, #0
 800518e:	494f      	ldr	r1, [pc, #316]	; (80052cc <HAL_I2C_Master_Receive+0x448>)
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f9ed 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e091      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005214:	e042      	b.n	800529c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fb00 	bl	8005820 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e04c      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d118      	bne.n	800529c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f47f aec2 	bne.w	800502a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e000      	b.n	80052c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
  }
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	; 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	00010004 	.word	0x00010004

080052d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	460b      	mov	r3, r1
 80052de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d006      	beq.n	80052fa <I2C_MasterRequestWrite+0x2a>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d003      	beq.n	80052fa <I2C_MasterRequestWrite+0x2a>
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f8:	d108      	bne.n	800530c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e00b      	b.n	8005324 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	2b12      	cmp	r3, #18
 8005312:	d107      	bne.n	8005324 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f91d 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534a:	d103      	bne.n	8005354 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e035      	b.n	80053c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005360:	d108      	bne.n	8005374 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005362:	897b      	ldrh	r3, [r7, #10]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005370:	611a      	str	r2, [r3, #16]
 8005372:	e01b      	b.n	80053ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005374:	897b      	ldrh	r3, [r7, #10]
 8005376:	11db      	asrs	r3, r3, #7
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0306 	and.w	r3, r3, #6
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f063 030f 	orn	r3, r3, #15
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	490e      	ldr	r1, [pc, #56]	; (80053cc <I2C_MasterRequestWrite+0xfc>)
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f943 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e010      	b.n	80053c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053a2:	897b      	ldrh	r3, [r7, #10]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4907      	ldr	r1, [pc, #28]	; (80053d0 <I2C_MasterRequestWrite+0x100>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f933 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	00010008 	.word	0x00010008
 80053d0:	00010002 	.word	0x00010002

080053d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	460b      	mov	r3, r1
 80053e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d006      	beq.n	800540e <I2C_MasterRequestRead+0x3a>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d003      	beq.n	800540e <I2C_MasterRequestRead+0x3a>
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800540c:	d108      	bne.n	8005420 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e00b      	b.n	8005438 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	2b11      	cmp	r3, #17
 8005426:	d107      	bne.n	8005438 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f893 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545e:	d103      	bne.n	8005468 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e079      	b.n	8005560 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005474:	d108      	bne.n	8005488 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005476:	897b      	ldrh	r3, [r7, #10]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	611a      	str	r2, [r3, #16]
 8005486:	e05f      	b.n	8005548 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005488:	897b      	ldrh	r3, [r7, #10]
 800548a:	11db      	asrs	r3, r3, #7
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 0306 	and.w	r3, r3, #6
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f063 030f 	orn	r3, r3, #15
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4930      	ldr	r1, [pc, #192]	; (8005568 <I2C_MasterRequestRead+0x194>)
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f8b9 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e054      	b.n	8005560 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054b6:	897b      	ldrh	r3, [r7, #10]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4929      	ldr	r1, [pc, #164]	; (800556c <I2C_MasterRequestRead+0x198>)
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f8a9 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e044      	b.n	8005560 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f831 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	d103      	bne.n	800552c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e017      	b.n	8005560 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005530:	897b      	ldrh	r3, [r7, #10]
 8005532:	11db      	asrs	r3, r3, #7
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 0306 	and.w	r3, r3, #6
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f063 030e 	orn	r3, r3, #14
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4907      	ldr	r1, [pc, #28]	; (800556c <I2C_MasterRequestRead+0x198>)
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f865 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	00010008 	.word	0x00010008
 800556c:	00010002 	.word	0x00010002

08005570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	e025      	b.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d021      	beq.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fc fa7f 	bl	8001a8c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e023      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10d      	bne.n	80055f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	e00c      	b.n	800560e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	43da      	mvns	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d0b6      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562c:	e051      	b.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563c:	d123      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e046      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d021      	beq.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fc f9fd 	bl	8001a8c <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d116      	bne.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e020      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10c      	bne.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	43da      	mvns	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e00b      	b.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	43da      	mvns	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d18d      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005728:	e02d      	b.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f8ce 	bl	80058cc <I2C_IsAcknowledgeFailed>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e02d      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d021      	beq.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fc f9a3 	bl	8001a8c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e007      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d1ca      	bne.n	800572a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057aa:	e02d      	b.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f88d 	bl	80058cc <I2C_IsAcknowledgeFailed>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e02d      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d021      	beq.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fc f962 	bl	8001a8c <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d116      	bne.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e007      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d1ca      	bne.n	80057ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800582c:	e042      	b.n	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b10      	cmp	r3, #16
 800583a:	d119      	bne.n	8005870 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0210 	mvn.w	r2, #16
 8005844:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e029      	b.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005870:	f7fc f90c 	bl	8001a8c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	d302      	bcc.n	8005886 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d116      	bne.n	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e007      	b.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d1b5      	bne.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e2:	d11b      	bne.n	800591c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e128      	b.n	8005b90 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a90      	ldr	r2, [pc, #576]	; (8005b98 <HAL_I2S_Init+0x26c>)
 8005956:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fb fea7 	bl	80016ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005974:	f023 030f 	bic.w	r3, r3, #15
 8005978:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2202      	movs	r2, #2
 8005980:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d060      	beq.n	8005a4c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005992:	2310      	movs	r3, #16
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e001      	b.n	800599c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005998:	2320      	movs	r3, #32
 800599a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d802      	bhi.n	80059aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059aa:	2001      	movs	r0, #1
 80059ac:	f001 fdb6 	bl	800751c <HAL_RCCEx_GetPeriphCLKFreq>
 80059b0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ba:	d125      	bne.n	8005a08 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	461a      	mov	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	3305      	adds	r3, #5
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	e01f      	b.n	8005a26 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	461a      	mov	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	3305      	adds	r3, #5
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	e00e      	b.n	8005a26 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	3305      	adds	r3, #5
 8005a24:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4a5c      	ldr	r2, [pc, #368]	; (8005b9c <HAL_I2S_Init+0x270>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	e003      	b.n	8005a54 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d902      	bls.n	8005a60 <HAL_I2S_Init+0x134>
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	2bff      	cmp	r3, #255	; 0xff
 8005a5e:	d907      	bls.n	8005a70 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a64:	f043 0210 	orr.w	r2, r3, #16
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e08f      	b.n	8005b90 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	ea42 0103 	orr.w	r1, r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a8e:	f023 030f 	bic.w	r3, r3, #15
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6851      	ldr	r1, [r2, #4]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6892      	ldr	r2, [r2, #8]
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	68d2      	ldr	r2, [r2, #12]
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6992      	ldr	r2, [r2, #24]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d161      	bne.n	8005b80 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a38      	ldr	r2, [pc, #224]	; (8005ba0 <HAL_I2S_Init+0x274>)
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a37      	ldr	r2, [pc, #220]	; (8005ba4 <HAL_I2S_Init+0x278>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <HAL_I2S_Init+0x1a4>
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <HAL_I2S_Init+0x27c>)
 8005ace:	e001      	b.n	8005ad4 <HAL_I2S_Init+0x1a8>
 8005ad0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	4932      	ldr	r1, [pc, #200]	; (8005ba4 <HAL_I2S_Init+0x278>)
 8005adc:	428a      	cmp	r2, r1
 8005ade:	d101      	bne.n	8005ae4 <HAL_I2S_Init+0x1b8>
 8005ae0:	4a31      	ldr	r2, [pc, #196]	; (8005ba8 <HAL_I2S_Init+0x27c>)
 8005ae2:	e001      	b.n	8005ae8 <HAL_I2S_Init+0x1bc>
 8005ae4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005ae8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005aec:	f023 030f 	bic.w	r3, r3, #15
 8005af0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <HAL_I2S_Init+0x278>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d101      	bne.n	8005b00 <HAL_I2S_Init+0x1d4>
 8005afc:	4b2a      	ldr	r3, [pc, #168]	; (8005ba8 <HAL_I2S_Init+0x27c>)
 8005afe:	e001      	b.n	8005b04 <HAL_I2S_Init+0x1d8>
 8005b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b04:	2202      	movs	r2, #2
 8005b06:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <HAL_I2S_Init+0x278>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d101      	bne.n	8005b16 <HAL_I2S_Init+0x1ea>
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <HAL_I2S_Init+0x27c>)
 8005b14:	e001      	b.n	8005b1a <HAL_I2S_Init+0x1ee>
 8005b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b26:	d003      	beq.n	8005b30 <HAL_I2S_Init+0x204>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e001      	b.n	8005b3c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	b299      	uxth	r1, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005b52:	4303      	orrs	r3, r0
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	430b      	orrs	r3, r1
 8005b58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	897b      	ldrh	r3, [r7, #10]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b68:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <HAL_I2S_Init+0x278>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d101      	bne.n	8005b78 <HAL_I2S_Init+0x24c>
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <HAL_I2S_Init+0x27c>)
 8005b76:	e001      	b.n	8005b7c <HAL_I2S_Init+0x250>
 8005b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b7c:	897a      	ldrh	r2, [r7, #10]
 8005b7e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3720      	adds	r7, #32
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	08006429 	.word	0x08006429
 8005b9c:	cccccccd 	.word	0xcccccccd
 8005ba0:	080065b1 	.word	0x080065b1
 8005ba4:	40003800 	.word	0x40003800
 8005ba8:	40003400 	.word	0x40003400

08005bac <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_I2S_Transmit_DMA+0x1a>
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e08e      	b.n	8005ce8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_I2S_Transmit_DMA+0x2e>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e086      	b.n	8005ce8 <HAL_I2S_Transmit_DMA+0x13c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d005      	beq.n	8005bfa <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e076      	b.n	8005ce8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d002      	beq.n	8005c26 <HAL_I2S_Transmit_DMA+0x7a>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d10a      	bne.n	8005c3c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c3a:	e005      	b.n	8005c48 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	4a28      	ldr	r2, [pc, #160]	; (8005cf0 <HAL_I2S_Transmit_DMA+0x144>)
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	4a27      	ldr	r2, [pc, #156]	; (8005cf4 <HAL_I2S_Transmit_DMA+0x148>)
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	4a26      	ldr	r2, [pc, #152]	; (8005cf8 <HAL_I2S_Transmit_DMA+0x14c>)
 8005c5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c68:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c70:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c78:	f7fc fce2 	bl	8002640 <HAL_DMA_Start_IT>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00f      	beq.n	8005ca2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c86:	f043 0208 	orr.w	r2, r3, #8
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e022      	b.n	8005ce8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cbe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d107      	bne.n	8005cde <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0202 	orr.w	r2, r2, #2
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	08006307 	.word	0x08006307
 8005cf4:	080062c5 	.word	0x080062c5
 8005cf8:	08006323 	.word	0x08006323

08005cfc <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_I2S_DMAPause+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e04a      	b.n	8005daa <HAL_I2S_DMAPause+0xae>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d108      	bne.n	8005d3a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0202 	bic.w	r2, r2, #2
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	e032      	b.n	8005da0 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d108      	bne.n	8005d58 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	605a      	str	r2, [r3, #4]
 8005d56:	e023      	b.n	8005da0 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d11d      	bne.n	8005da0 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0203 	bic.w	r2, r2, #3
 8005d72:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a0f      	ldr	r2, [pc, #60]	; (8005db8 <HAL_I2S_DMAPause+0xbc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2S_DMAPause+0x86>
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_I2S_DMAPause+0xc0>)
 8005d80:	e001      	b.n	8005d86 <HAL_I2S_DMAPause+0x8a>
 8005d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	490a      	ldr	r1, [pc, #40]	; (8005db8 <HAL_I2S_DMAPause+0xbc>)
 8005d8e:	428b      	cmp	r3, r1
 8005d90:	d101      	bne.n	8005d96 <HAL_I2S_DMAPause+0x9a>
 8005d92:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <HAL_I2S_DMAPause+0xc0>)
 8005d94:	e001      	b.n	8005d9a <HAL_I2S_DMAPause+0x9e>
 8005d96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d9a:	f022 0203 	bic.w	r2, r2, #3
 8005d9e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40003800 	.word	0x40003800
 8005dbc:	40003400 	.word	0x40003400

08005dc0 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_I2S_DMAResume+0x18>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e07d      	b.n	8005ed4 <HAL_I2S_DMAResume+0x114>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d108      	bne.n	8005dfe <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0202 	orr.w	r2, r2, #2
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	e056      	b.n	8005eac <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d108      	bne.n	8005e1c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	e047      	b.n	8005eac <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d141      	bne.n	8005eac <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0203 	orr.w	r2, r2, #3
 8005e36:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <HAL_I2S_DMAResume+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_I2S_DMAResume+0x86>
 8005e42:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <HAL_I2S_DMAResume+0x124>)
 8005e44:	e001      	b.n	8005e4a <HAL_I2S_DMAResume+0x8a>
 8005e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4923      	ldr	r1, [pc, #140]	; (8005ee0 <HAL_I2S_DMAResume+0x120>)
 8005e52:	428b      	cmp	r3, r1
 8005e54:	d101      	bne.n	8005e5a <HAL_I2S_DMAResume+0x9a>
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <HAL_I2S_DMAResume+0x124>)
 8005e58:	e001      	b.n	8005e5e <HAL_I2S_DMAResume+0x9e>
 8005e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e5e:	f042 0203 	orr.w	r2, r2, #3
 8005e62:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_I2S_DMAResume+0x120>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2S_DMAResume+0xb2>
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <HAL_I2S_DMAResume+0x124>)
 8005e70:	e001      	b.n	8005e76 <HAL_I2S_DMAResume+0xb6>
 8005e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d115      	bne.n	8005eac <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_I2S_DMAResume+0x120>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d101      	bne.n	8005e8e <HAL_I2S_DMAResume+0xce>
 8005e8a:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <HAL_I2S_DMAResume+0x124>)
 8005e8c:	e001      	b.n	8005e92 <HAL_I2S_DMAResume+0xd2>
 8005e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4911      	ldr	r1, [pc, #68]	; (8005ee0 <HAL_I2S_DMAResume+0x120>)
 8005e9a:	428b      	cmp	r3, r1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_I2S_DMAResume+0xe2>
 8005e9e:	4b11      	ldr	r3, [pc, #68]	; (8005ee4 <HAL_I2S_DMAResume+0x124>)
 8005ea0:	e001      	b.n	8005ea6 <HAL_I2S_DMAResume+0xe6>
 8005ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eaa:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d107      	bne.n	8005eca <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ec8:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	40003800 	.word	0x40003800
 8005ee4:	40003400 	.word	0x40003400

08005ee8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efc:	d004      	beq.n	8005f08 <HAL_I2S_DMAStop+0x20>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 80d1 	bne.w	80060aa <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fc fbeb 	bl	80026f0 <HAL_DMA_Abort>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f24:	f043 0208 	orr.w	r2, r3, #8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005f30:	2364      	movs	r3, #100	; 0x64
 8005f32:	2201      	movs	r2, #1
 8005f34:	2102      	movs	r1, #2
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fb00 	bl	800653c <I2S_WaitFlagStateUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00b      	beq.n	8005f5a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f043 0201 	orr.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005f5a:	2364      	movs	r3, #100	; 0x64
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 faeb 	bl	800653c <I2S_WaitFlagStateUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69da      	ldr	r2, [r3, #28]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f92:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0202 	bic.w	r2, r2, #2
 8005fb0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	f040 8165 	bne.w	800628a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00f      	beq.n	8005fe8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fc fb8f 	bl	80026f0 <HAL_DMA_Abort>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f043 0208 	orr.w	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a8a      	ldr	r2, [pc, #552]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2S_DMAStop+0x10e>
 8005ff2:	4b8a      	ldr	r3, [pc, #552]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8005ff4:	e001      	b.n	8005ffa <HAL_I2S_DMAStop+0x112>
 8005ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4985      	ldr	r1, [pc, #532]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 8006002:	428b      	cmp	r3, r1
 8006004:	d101      	bne.n	800600a <HAL_I2S_DMAStop+0x122>
 8006006:	4b85      	ldr	r3, [pc, #532]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8006008:	e001      	b.n	800600e <HAL_I2S_DMAStop+0x126>
 800600a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006012:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006014:	2300      	movs	r3, #0
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a7e      	ldr	r2, [pc, #504]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_I2S_DMAStop+0x13e>
 8006022:	4b7e      	ldr	r3, [pc, #504]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8006024:	e001      	b.n	800602a <HAL_I2S_DMAStop+0x142>
 8006026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a79      	ldr	r2, [pc, #484]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_I2S_DMAStop+0x154>
 8006038:	4b78      	ldr	r3, [pc, #480]	; (800621c <HAL_I2S_DMAStop+0x334>)
 800603a:	e001      	b.n	8006040 <HAL_I2S_DMAStop+0x158>
 800603c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a73      	ldr	r2, [pc, #460]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d101      	bne.n	8006054 <HAL_I2S_DMAStop+0x16c>
 8006050:	4b72      	ldr	r3, [pc, #456]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8006052:	e001      	b.n	8006058 <HAL_I2S_DMAStop+0x170>
 8006054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	496e      	ldr	r1, [pc, #440]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 8006060:	428b      	cmp	r3, r1
 8006062:	d101      	bne.n	8006068 <HAL_I2S_DMAStop+0x180>
 8006064:	4b6d      	ldr	r3, [pc, #436]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8006066:	e001      	b.n	800606c <HAL_I2S_DMAStop+0x184>
 8006068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10c      	bne.n	8006094 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006092:	e0fa      	b.n	800628a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a5f      	ldr	r2, [pc, #380]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d101      	bne.n	80060a2 <HAL_I2S_DMAStop+0x1ba>
 800609e:	4b5f      	ldr	r3, [pc, #380]	; (800621c <HAL_I2S_DMAStop+0x334>)
 80060a0:	e001      	b.n	80060a6 <HAL_I2S_DMAStop+0x1be>
 80060a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060a6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060a8:	e0ef      	b.n	800628a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b2:	d005      	beq.n	80060c0 <HAL_I2S_DMAStop+0x1d8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060bc:	f040 80e5 	bne.w	800628a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00f      	beq.n	80060e8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fc fb0f 	bl	80026f0 <HAL_DMA_Abort>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060dc:	f043 0208 	orr.w	r2, r3, #8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	f040 809a 	bne.w	800622a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00f      	beq.n	800611e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	4618      	mov	r0, r3
 8006104:	f7fc faf4 	bl	80026f0 <HAL_DMA_Abort>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800611e:	f7fb fcb5 	bl	8001a8c <HAL_GetTick>
 8006122:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006124:	e012      	b.n	800614c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006126:	f7fb fcb1 	bl	8001a8c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b64      	cmp	r3, #100	; 0x64
 8006132:	d90b      	bls.n	800614c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	f043 0201 	orr.w	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a31      	ldr	r2, [pc, #196]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <HAL_I2S_DMAStop+0x272>
 8006156:	4b31      	ldr	r3, [pc, #196]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8006158:	e001      	b.n	800615e <HAL_I2S_DMAStop+0x276>
 800615a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d1de      	bne.n	8006126 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006168:	e012      	b.n	8006190 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800616a:	f7fb fc8f 	bl	8001a8c <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b64      	cmp	r3, #100	; 0x64
 8006176:	d90b      	bls.n	8006190 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	f043 0201 	orr.w	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a20      	ldr	r2, [pc, #128]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d101      	bne.n	800619e <HAL_I2S_DMAStop+0x2b6>
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <HAL_I2S_DMAStop+0x334>)
 800619c:	e001      	b.n	80061a2 <HAL_I2S_DMAStop+0x2ba>
 800619e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a8:	2b80      	cmp	r3, #128	; 0x80
 80061aa:	d0de      	beq.n	800616a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a19      	ldr	r2, [pc, #100]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d101      	bne.n	80061ba <HAL_I2S_DMAStop+0x2d2>
 80061b6:	4b19      	ldr	r3, [pc, #100]	; (800621c <HAL_I2S_DMAStop+0x334>)
 80061b8:	e001      	b.n	80061be <HAL_I2S_DMAStop+0x2d6>
 80061ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4914      	ldr	r1, [pc, #80]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 80061c6:	428b      	cmp	r3, r1
 80061c8:	d101      	bne.n	80061ce <HAL_I2S_DMAStop+0x2e6>
 80061ca:	4b14      	ldr	r3, [pc, #80]	; (800621c <HAL_I2S_DMAStop+0x334>)
 80061cc:	e001      	b.n	80061d2 <HAL_I2S_DMAStop+0x2ea>
 80061ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a0d      	ldr	r2, [pc, #52]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d101      	bne.n	80061ea <HAL_I2S_DMAStop+0x302>
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <HAL_I2S_DMAStop+0x334>)
 80061e8:	e001      	b.n	80061ee <HAL_I2S_DMAStop+0x306>
 80061ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a07      	ldr	r2, [pc, #28]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <HAL_I2S_DMAStop+0x31a>
 80061fe:	4b07      	ldr	r3, [pc, #28]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8006200:	e001      	b.n	8006206 <HAL_I2S_DMAStop+0x31e>
 8006202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4902      	ldr	r1, [pc, #8]	; (8006218 <HAL_I2S_DMAStop+0x330>)
 800620e:	428b      	cmp	r3, r1
 8006210:	d106      	bne.n	8006220 <HAL_I2S_DMAStop+0x338>
 8006212:	4b02      	ldr	r3, [pc, #8]	; (800621c <HAL_I2S_DMAStop+0x334>)
 8006214:	e006      	b.n	8006224 <HAL_I2S_DMAStop+0x33c>
 8006216:	bf00      	nop
 8006218:	40003800 	.word	0x40003800
 800621c:	40003400 	.word	0x40003400
 8006220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006224:	f022 0202 	bic.w	r2, r2, #2
 8006228:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006238:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800623a:	2300      	movs	r3, #0
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006268:	d10c      	bne.n	8006284 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e002      	b.n	800628a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006292:	7ffb      	ldrb	r3, [r7, #31]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10e      	bne.n	80062f8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0202 	bic.w	r2, r2, #2
 80062e8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7fa fc27 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7fa fc2b 	bl	8000b70 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0203 	bic.w	r2, r2, #3
 800633e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006358:	f043 0208 	orr.w	r2, r3, #8
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff ffa5 	bl	80062b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10e      	bne.n	80063c2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fa fbc5 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	b292      	uxth	r2, r2
 80063de:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10e      	bne.n	8006420 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006410:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff ff3e 	bl	800629c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b04      	cmp	r3, #4
 8006442:	d13a      	bne.n	80064ba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d109      	bne.n	8006462 <I2S_IRQHandler+0x3a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d102      	bne.n	8006462 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ffb4 	bl	80063ca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d126      	bne.n	80064ba <I2S_IRQHandler+0x92>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b20      	cmp	r3, #32
 8006478:	d11f      	bne.n	80064ba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006488:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800648a:	2300      	movs	r3, #0
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ac:	f043 0202 	orr.w	r2, r3, #2
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fefb 	bl	80062b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d136      	bne.n	8006534 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d109      	bne.n	80064e4 <I2S_IRQHandler+0xbc>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d102      	bne.n	80064e4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff ff45 	bl	800636e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d122      	bne.n	8006534 <I2S_IRQHandler+0x10c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d11b      	bne.n	8006534 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800650a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	f043 0204 	orr.w	r2, r3, #4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff febe 	bl	80062b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006534:	bf00      	nop
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800654c:	f7fb fa9e 	bl	8001a8c <HAL_GetTick>
 8006550:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006552:	e018      	b.n	8006586 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d014      	beq.n	8006586 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800655c:	f7fb fa96 	bl	8001a8c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d902      	bls.n	8006572 <I2S_WaitFlagStateUntilTimeout+0x36>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e00f      	b.n	80065a6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d1d7      	bne.n	8006554 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4aa2      	ldr	r2, [pc, #648]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80065ca:	4ba2      	ldr	r3, [pc, #648]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065cc:	e001      	b.n	80065d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80065ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a9b      	ldr	r2, [pc, #620]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d101      	bne.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80065e8:	4b9a      	ldr	r3, [pc, #616]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065ea:	e001      	b.n	80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80065ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d004      	beq.n	8006608 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f040 8099 	bne.w	800673a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b02      	cmp	r3, #2
 8006610:	d107      	bne.n	8006622 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f925 	bl	800686c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f9c8 	bl	80069cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d13a      	bne.n	80066bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d035      	beq.n	80066bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7e      	ldr	r2, [pc, #504]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d101      	bne.n	800665e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800665a:	4b7e      	ldr	r3, [pc, #504]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800665c:	e001      	b.n	8006662 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800665e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4979      	ldr	r1, [pc, #484]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800666a:	428b      	cmp	r3, r1
 800666c:	d101      	bne.n	8006672 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800666e:	4b79      	ldr	r3, [pc, #484]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006670:	e001      	b.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006676:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800667a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800668a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	f043 0202 	orr.w	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fdfa 	bl	80062b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	f040 80be 	bne.w	8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80b8 	beq.w	8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a59      	ldr	r2, [pc, #356]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d101      	bne.n	80066f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80066ee:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066f0:	e001      	b.n	80066f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80066f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4954      	ldr	r1, [pc, #336]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066fe:	428b      	cmp	r3, r1
 8006700:	d101      	bne.n	8006706 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006702:	4b54      	ldr	r3, [pc, #336]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006704:	e001      	b.n	800670a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006706:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800670a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800670e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006710:	2300      	movs	r3, #0
 8006712:	60bb      	str	r3, [r7, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]
 800671c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fdbc 	bl	80062b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006738:	e084      	b.n	8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b02      	cmp	r3, #2
 8006742:	d107      	bne.n	8006754 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f8be 	bl	80068d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8fd 	bl	8006968 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d12f      	bne.n	80067d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d02a      	beq.n	80067d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006790:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800679c:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800679e:	e001      	b.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80067a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4929      	ldr	r1, [pc, #164]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067ac:	428b      	cmp	r3, r1
 80067ae:	d101      	bne.n	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067b2:	e001      	b.n	80067b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80067b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	f043 0202 	orr.w	r2, r3, #2
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fd6c 	bl	80062b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d131      	bne.n	8006846 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02c      	beq.n	8006846 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d101      	bne.n	80067fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067f8:	e001      	b.n	80067fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80067fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4912      	ldr	r1, [pc, #72]	; (8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006806:	428b      	cmp	r3, r1
 8006808:	d101      	bne.n	800680e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800680c:	e001      	b.n	8006812 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800680e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006812:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006816:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006826:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006834:	f043 0204 	orr.w	r2, r3, #4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fd37 	bl	80062b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006842:	e000      	b.n	8006846 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006844:	bf00      	nop
}
 8006846:	bf00      	nop
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40003800 	.word	0x40003800
 8006854:	40003400 	.word	0x40003400

08006858 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	1c99      	adds	r1, r3, #2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6251      	str	r1, [r2, #36]	; 0x24
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d113      	bne.n	80068c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ffc9 	bl	8006858 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	1c99      	adds	r1, r3, #2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6251      	str	r1, [r2, #36]	; 0x24
 80068e2:	8819      	ldrh	r1, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <I2SEx_TxISR_I2SExt+0x90>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <I2SEx_TxISR_I2SExt+0x22>
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <I2SEx_TxISR_I2SExt+0x94>)
 80068f0:	e001      	b.n	80068f6 <I2SEx_TxISR_I2SExt+0x26>
 80068f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068f6:	460a      	mov	r2, r1
 80068f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d121      	bne.n	8006956 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a12      	ldr	r2, [pc, #72]	; (8006960 <I2SEx_TxISR_I2SExt+0x90>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d101      	bne.n	8006920 <I2SEx_TxISR_I2SExt+0x50>
 800691c:	4b11      	ldr	r3, [pc, #68]	; (8006964 <I2SEx_TxISR_I2SExt+0x94>)
 800691e:	e001      	b.n	8006924 <I2SEx_TxISR_I2SExt+0x54>
 8006920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	490d      	ldr	r1, [pc, #52]	; (8006960 <I2SEx_TxISR_I2SExt+0x90>)
 800692c:	428b      	cmp	r3, r1
 800692e:	d101      	bne.n	8006934 <I2SEx_TxISR_I2SExt+0x64>
 8006930:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <I2SEx_TxISR_I2SExt+0x94>)
 8006932:	e001      	b.n	8006938 <I2SEx_TxISR_I2SExt+0x68>
 8006934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800693c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff81 	bl	8006858 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40003800 	.word	0x40003800
 8006964:	40003400 	.word	0x40003400

08006968 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68d8      	ldr	r0, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	1c99      	adds	r1, r3, #2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006980:	b282      	uxth	r2, r0
 8006982:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d113      	bne.n	80069c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff ff4a 	bl	8006858 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069c4:	bf00      	nop
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <I2SEx_RxISR_I2SExt+0x90>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d101      	bne.n	80069e2 <I2SEx_RxISR_I2SExt+0x16>
 80069de:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <I2SEx_RxISR_I2SExt+0x94>)
 80069e0:	e001      	b.n	80069e6 <I2SEx_RxISR_I2SExt+0x1a>
 80069e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069e6:	68d8      	ldr	r0, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	1c99      	adds	r1, r3, #2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80069f2:	b282      	uxth	r2, r0
 80069f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d121      	bne.n	8006a52 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a12      	ldr	r2, [pc, #72]	; (8006a5c <I2SEx_RxISR_I2SExt+0x90>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d101      	bne.n	8006a1c <I2SEx_RxISR_I2SExt+0x50>
 8006a18:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <I2SEx_RxISR_I2SExt+0x94>)
 8006a1a:	e001      	b.n	8006a20 <I2SEx_RxISR_I2SExt+0x54>
 8006a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	490d      	ldr	r1, [pc, #52]	; (8006a5c <I2SEx_RxISR_I2SExt+0x90>)
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	d101      	bne.n	8006a30 <I2SEx_RxISR_I2SExt+0x64>
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <I2SEx_RxISR_I2SExt+0x94>)
 8006a2e:	e001      	b.n	8006a34 <I2SEx_RxISR_I2SExt+0x68>
 8006a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a38:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff03 	bl	8006858 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a52:	bf00      	nop
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40003800 	.word	0x40003800
 8006a60:	40003400 	.word	0x40003400

08006a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e25b      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d075      	beq.n	8006b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a82:	4ba3      	ldr	r3, [pc, #652]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8e:	4ba0      	ldr	r3, [pc, #640]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d112      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a9a:	4b9d      	ldr	r3, [pc, #628]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa8:	4b99      	ldr	r3, [pc, #612]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d05b      	beq.n	8006b6c <HAL_RCC_OscConfig+0x108>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d157      	bne.n	8006b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e236      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac8:	d106      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x74>
 8006aca:	4b91      	ldr	r3, [pc, #580]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a90      	ldr	r2, [pc, #576]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	e01d      	b.n	8006b14 <HAL_RCC_OscConfig+0xb0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ae0:	d10c      	bne.n	8006afc <HAL_RCC_OscConfig+0x98>
 8006ae2:	4b8b      	ldr	r3, [pc, #556]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a8a      	ldr	r2, [pc, #552]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	4b88      	ldr	r3, [pc, #544]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a87      	ldr	r2, [pc, #540]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	e00b      	b.n	8006b14 <HAL_RCC_OscConfig+0xb0>
 8006afc:	4b84      	ldr	r3, [pc, #528]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a83      	ldr	r2, [pc, #524]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	4b81      	ldr	r3, [pc, #516]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a80      	ldr	r2, [pc, #512]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d013      	beq.n	8006b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1c:	f7fa ffb6 	bl	8001a8c <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b24:	f7fa ffb2 	bl	8001a8c <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b64      	cmp	r3, #100	; 0x64
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e1fb      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b36:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0f0      	beq.n	8006b24 <HAL_RCC_OscConfig+0xc0>
 8006b42:	e014      	b.n	8006b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b44:	f7fa ffa2 	bl	8001a8c <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b4c:	f7fa ff9e 	bl	8001a8c <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b64      	cmp	r3, #100	; 0x64
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e1e7      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5e:	4b6c      	ldr	r3, [pc, #432]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f0      	bne.n	8006b4c <HAL_RCC_OscConfig+0xe8>
 8006b6a:	e000      	b.n	8006b6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d063      	beq.n	8006c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7a:	4b65      	ldr	r3, [pc, #404]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b86:	4b62      	ldr	r3, [pc, #392]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d11c      	bne.n	8006bcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b92:	4b5f      	ldr	r3, [pc, #380]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d116      	bne.n	8006bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b9e:	4b5c      	ldr	r3, [pc, #368]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x152>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d001      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e1bb      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb6:	4b56      	ldr	r3, [pc, #344]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	4952      	ldr	r1, [pc, #328]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bca:	e03a      	b.n	8006c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d020      	beq.n	8006c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd4:	4b4f      	ldr	r3, [pc, #316]	; (8006d14 <HAL_RCC_OscConfig+0x2b0>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bda:	f7fa ff57 	bl	8001a8c <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006be2:	f7fa ff53 	bl	8001a8c <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e19c      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf4:	4b46      	ldr	r3, [pc, #280]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0f0      	beq.n	8006be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c00:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4940      	ldr	r1, [pc, #256]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	600b      	str	r3, [r1, #0]
 8006c14:	e015      	b.n	8006c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c16:	4b3f      	ldr	r3, [pc, #252]	; (8006d14 <HAL_RCC_OscConfig+0x2b0>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fa ff36 	bl	8001a8c <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c24:	f7fa ff32 	bl	8001a8c <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e17b      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c36:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d030      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d016      	beq.n	8006c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c56:	4b30      	ldr	r3, [pc, #192]	; (8006d18 <HAL_RCC_OscConfig+0x2b4>)
 8006c58:	2201      	movs	r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5c:	f7fa ff16 	bl	8001a8c <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c64:	f7fa ff12 	bl	8001a8c <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e15b      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c76:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCC_OscConfig+0x200>
 8006c82:	e015      	b.n	8006cb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c84:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <HAL_RCC_OscConfig+0x2b4>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8a:	f7fa feff 	bl	8001a8c <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c92:	f7fa fefb 	bl	8001a8c <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e144      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca4:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f0      	bne.n	8006c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80a0 	beq.w	8006dfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	4a0e      	ldr	r2, [pc, #56]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <HAL_RCC_OscConfig+0x2ac>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	60bb      	str	r3, [r7, #8]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_RCC_OscConfig+0x2b8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d121      	bne.n	8006d3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cfa:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <HAL_RCC_OscConfig+0x2b8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a07      	ldr	r2, [pc, #28]	; (8006d1c <HAL_RCC_OscConfig+0x2b8>)
 8006d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d06:	f7fa fec1 	bl	8001a8c <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0c:	e011      	b.n	8006d32 <HAL_RCC_OscConfig+0x2ce>
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800
 8006d14:	42470000 	.word	0x42470000
 8006d18:	42470e80 	.word	0x42470e80
 8006d1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d20:	f7fa feb4 	bl	8001a8c <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e0fd      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d32:	4b81      	ldr	r3, [pc, #516]	; (8006f38 <HAL_RCC_OscConfig+0x4d4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0f0      	beq.n	8006d20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x2f0>
 8006d46:	4b7d      	ldr	r3, [pc, #500]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	4a7c      	ldr	r2, [pc, #496]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	6713      	str	r3, [r2, #112]	; 0x70
 8006d52:	e01c      	b.n	8006d8e <HAL_RCC_OscConfig+0x32a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	2b05      	cmp	r3, #5
 8006d5a:	d10c      	bne.n	8006d76 <HAL_RCC_OscConfig+0x312>
 8006d5c:	4b77      	ldr	r3, [pc, #476]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d60:	4a76      	ldr	r2, [pc, #472]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d62:	f043 0304 	orr.w	r3, r3, #4
 8006d66:	6713      	str	r3, [r2, #112]	; 0x70
 8006d68:	4b74      	ldr	r3, [pc, #464]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	4a73      	ldr	r2, [pc, #460]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d6e:	f043 0301 	orr.w	r3, r3, #1
 8006d72:	6713      	str	r3, [r2, #112]	; 0x70
 8006d74:	e00b      	b.n	8006d8e <HAL_RCC_OscConfig+0x32a>
 8006d76:	4b71      	ldr	r3, [pc, #452]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	4a70      	ldr	r2, [pc, #448]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	6713      	str	r3, [r2, #112]	; 0x70
 8006d82:	4b6e      	ldr	r3, [pc, #440]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a6d      	ldr	r2, [pc, #436]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006d88:	f023 0304 	bic.w	r3, r3, #4
 8006d8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d015      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d96:	f7fa fe79 	bl	8001a8c <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d9e:	f7fa fe75 	bl	8001a8c <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e0bc      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db4:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0ee      	beq.n	8006d9e <HAL_RCC_OscConfig+0x33a>
 8006dc0:	e014      	b.n	8006dec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc2:	f7fa fe63 	bl	8001a8c <HAL_GetTick>
 8006dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc8:	e00a      	b.n	8006de0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dca:	f7fa fe5f 	bl	8001a8c <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e0a6      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de0:	4b56      	ldr	r3, [pc, #344]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1ee      	bne.n	8006dca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d105      	bne.n	8006dfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006df2:	4b52      	ldr	r3, [pc, #328]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	4a51      	ldr	r2, [pc, #324]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8092 	beq.w	8006f2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e08:	4b4c      	ldr	r3, [pc, #304]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 030c 	and.w	r3, r3, #12
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d05c      	beq.n	8006ece <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d141      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e1c:	4b48      	ldr	r3, [pc, #288]	; (8006f40 <HAL_RCC_OscConfig+0x4dc>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e22:	f7fa fe33 	bl	8001a8c <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e2a:	f7fa fe2f 	bl	8001a8c <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e078      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f0      	bne.n	8006e2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	019b      	lsls	r3, r3, #6
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	3b01      	subs	r3, #1
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	061b      	lsls	r3, r3, #24
 8006e6c:	4933      	ldr	r1, [pc, #204]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e72:	4b33      	ldr	r3, [pc, #204]	; (8006f40 <HAL_RCC_OscConfig+0x4dc>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e78:	f7fa fe08 	bl	8001a8c <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e80:	f7fa fe04 	bl	8001a8c <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e04d      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e92:	4b2a      	ldr	r3, [pc, #168]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x41c>
 8006e9e:	e045      	b.n	8006f2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <HAL_RCC_OscConfig+0x4dc>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea6:	f7fa fdf1 	bl	8001a8c <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eae:	f7fa fded 	bl	8001a8c <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e036      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec0:	4b1e      	ldr	r3, [pc, #120]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f0      	bne.n	8006eae <HAL_RCC_OscConfig+0x44a>
 8006ecc:	e02e      	b.n	8006f2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e029      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006eda:	4b18      	ldr	r3, [pc, #96]	; (8006f3c <HAL_RCC_OscConfig+0x4d8>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d11c      	bne.n	8006f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d115      	bne.n	8006f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f02:	4013      	ands	r3, r2
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d10d      	bne.n	8006f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d106      	bne.n	8006f28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	40007000 	.word	0x40007000
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	42470060 	.word	0x42470060

08006f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0cc      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f58:	4b68      	ldr	r3, [pc, #416]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d90c      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f66:	4b65      	ldr	r3, [pc, #404]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6e:	4b63      	ldr	r3, [pc, #396]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0b8      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f98:	4b59      	ldr	r3, [pc, #356]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4a58      	ldr	r2, [pc, #352]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb0:	4b53      	ldr	r3, [pc, #332]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4a52      	ldr	r2, [pc, #328]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fbc:	4b50      	ldr	r3, [pc, #320]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	494d      	ldr	r1, [pc, #308]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d044      	beq.n	8007064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	4b47      	ldr	r3, [pc, #284]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d119      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e07f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d003      	beq.n	8007002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007002:	4b3f      	ldr	r3, [pc, #252]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e06f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007012:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e067      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007022:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4934      	ldr	r1, [pc, #208]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007034:	f7fa fd2a 	bl	8001a8c <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7fa fd26 	bl	8001a8c <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e04f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 020c 	and.w	r2, r3, #12
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	429a      	cmp	r2, r3
 8007062:	d1eb      	bne.n	800703c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d20c      	bcs.n	800708c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707a:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e032      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007098:	4b19      	ldr	r3, [pc, #100]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4916      	ldr	r1, [pc, #88]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b6:	4b12      	ldr	r3, [pc, #72]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	490e      	ldr	r1, [pc, #56]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ca:	f000 f821 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 80070ce:	4601      	mov	r1, r0
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	4a0a      	ldr	r2, [pc, #40]	; (8007104 <HAL_RCC_ClockConfig+0x1c0>)
 80070dc:	5cd3      	ldrb	r3, [r2, r3]
 80070de:	fa21 f303 	lsr.w	r3, r1, r3
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fa fc8a 	bl	8001a04 <HAL_InitTick>

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023c00 	.word	0x40023c00
 8007100:	40023800 	.word	0x40023800
 8007104:	0800ed10 	.word	0x0800ed10
 8007108:	20000000 	.word	0x20000000
 800710c:	20000004 	.word	0x20000004

08007110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	2300      	movs	r3, #0
 8007120:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007126:	4b63      	ldr	r3, [pc, #396]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b04      	cmp	r3, #4
 8007130:	d007      	beq.n	8007142 <HAL_RCC_GetSysClockFreq+0x32>
 8007132:	2b08      	cmp	r3, #8
 8007134:	d008      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x38>
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 80b4 	bne.w	80072a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800713c:	4b5e      	ldr	r3, [pc, #376]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800713e:	60bb      	str	r3, [r7, #8]
       break;
 8007140:	e0b3      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007142:	4b5e      	ldr	r3, [pc, #376]	; (80072bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007144:	60bb      	str	r3, [r7, #8]
      break;
 8007146:	e0b0      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007148:	4b5a      	ldr	r3, [pc, #360]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007150:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007152:	4b58      	ldr	r3, [pc, #352]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d04a      	beq.n	80071f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800715e:	4b55      	ldr	r3, [pc, #340]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	099b      	lsrs	r3, r3, #6
 8007164:	f04f 0400 	mov.w	r4, #0
 8007168:	f240 11ff 	movw	r1, #511	; 0x1ff
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	ea03 0501 	and.w	r5, r3, r1
 8007174:	ea04 0602 	and.w	r6, r4, r2
 8007178:	4629      	mov	r1, r5
 800717a:	4632      	mov	r2, r6
 800717c:	f04f 0300 	mov.w	r3, #0
 8007180:	f04f 0400 	mov.w	r4, #0
 8007184:	0154      	lsls	r4, r2, #5
 8007186:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800718a:	014b      	lsls	r3, r1, #5
 800718c:	4619      	mov	r1, r3
 800718e:	4622      	mov	r2, r4
 8007190:	1b49      	subs	r1, r1, r5
 8007192:	eb62 0206 	sbc.w	r2, r2, r6
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	f04f 0400 	mov.w	r4, #0
 800719e:	0194      	lsls	r4, r2, #6
 80071a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071a4:	018b      	lsls	r3, r1, #6
 80071a6:	1a5b      	subs	r3, r3, r1
 80071a8:	eb64 0402 	sbc.w	r4, r4, r2
 80071ac:	f04f 0100 	mov.w	r1, #0
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	00e2      	lsls	r2, r4, #3
 80071b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071ba:	00d9      	lsls	r1, r3, #3
 80071bc:	460b      	mov	r3, r1
 80071be:	4614      	mov	r4, r2
 80071c0:	195b      	adds	r3, r3, r5
 80071c2:	eb44 0406 	adc.w	r4, r4, r6
 80071c6:	f04f 0100 	mov.w	r1, #0
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	0262      	lsls	r2, r4, #9
 80071d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80071d4:	0259      	lsls	r1, r3, #9
 80071d6:	460b      	mov	r3, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	4618      	mov	r0, r3
 80071dc:	4621      	mov	r1, r4
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f04f 0400 	mov.w	r4, #0
 80071e4:	461a      	mov	r2, r3
 80071e6:	4623      	mov	r3, r4
 80071e8:	f7f8 ffee 	bl	80001c8 <__aeabi_uldivmod>
 80071ec:	4603      	mov	r3, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e049      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071f4:	4b2f      	ldr	r3, [pc, #188]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	099b      	lsrs	r3, r3, #6
 80071fa:	f04f 0400 	mov.w	r4, #0
 80071fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	ea03 0501 	and.w	r5, r3, r1
 800720a:	ea04 0602 	and.w	r6, r4, r2
 800720e:	4629      	mov	r1, r5
 8007210:	4632      	mov	r2, r6
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	f04f 0400 	mov.w	r4, #0
 800721a:	0154      	lsls	r4, r2, #5
 800721c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007220:	014b      	lsls	r3, r1, #5
 8007222:	4619      	mov	r1, r3
 8007224:	4622      	mov	r2, r4
 8007226:	1b49      	subs	r1, r1, r5
 8007228:	eb62 0206 	sbc.w	r2, r2, r6
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	f04f 0400 	mov.w	r4, #0
 8007234:	0194      	lsls	r4, r2, #6
 8007236:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800723a:	018b      	lsls	r3, r1, #6
 800723c:	1a5b      	subs	r3, r3, r1
 800723e:	eb64 0402 	sbc.w	r4, r4, r2
 8007242:	f04f 0100 	mov.w	r1, #0
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	00e2      	lsls	r2, r4, #3
 800724c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007250:	00d9      	lsls	r1, r3, #3
 8007252:	460b      	mov	r3, r1
 8007254:	4614      	mov	r4, r2
 8007256:	195b      	adds	r3, r3, r5
 8007258:	eb44 0406 	adc.w	r4, r4, r6
 800725c:	f04f 0100 	mov.w	r1, #0
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	02a2      	lsls	r2, r4, #10
 8007266:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800726a:	0299      	lsls	r1, r3, #10
 800726c:	460b      	mov	r3, r1
 800726e:	4614      	mov	r4, r2
 8007270:	4618      	mov	r0, r3
 8007272:	4621      	mov	r1, r4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f04f 0400 	mov.w	r4, #0
 800727a:	461a      	mov	r2, r3
 800727c:	4623      	mov	r3, r4
 800727e:	f7f8 ffa3 	bl	80001c8 <__aeabi_uldivmod>
 8007282:	4603      	mov	r3, r0
 8007284:	460c      	mov	r4, r1
 8007286:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	3301      	adds	r3, #1
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	60bb      	str	r3, [r7, #8]
      break;
 80072a2:	e002      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80072a6:	60bb      	str	r3, [r7, #8]
      break;
 80072a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072aa:	68bb      	ldr	r3, [r7, #8]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b4:	40023800 	.word	0x40023800
 80072b8:	00f42400 	.word	0x00f42400
 80072bc:	007a1200 	.word	0x007a1200

080072c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c4:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072c6:	681b      	ldr	r3, [r3, #0]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000000 	.word	0x20000000

080072d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072dc:	f7ff fff0 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80072e0:	4601      	mov	r1, r0
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0a9b      	lsrs	r3, r3, #10
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4a03      	ldr	r2, [pc, #12]	; (80072fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40023800 	.word	0x40023800
 80072fc:	0800ed20 	.word	0x0800ed20

08007300 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007324:	2b00      	cmp	r3, #0
 8007326:	d035      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007328:	4b62      	ldr	r3, [pc, #392]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800732e:	f7fa fbad 	bl	8001a8c <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007334:	e008      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007336:	f7fa fba9 	bl	8001a8c <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e0b0      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007348:	4b5b      	ldr	r3, [pc, #364]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f0      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	019a      	lsls	r2, r3, #6
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	071b      	lsls	r3, r3, #28
 8007360:	4955      	ldr	r1, [pc, #340]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007368:	4b52      	ldr	r3, [pc, #328]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800736e:	f7fa fb8d 	bl	8001a8c <HAL_GetTick>
 8007372:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007374:	e008      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007376:	f7fa fb89 	bl	8001a8c <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e090      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007388:	4b4b      	ldr	r3, [pc, #300]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0f0      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8083 	beq.w	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	4b44      	ldr	r3, [pc, #272]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	4a43      	ldr	r2, [pc, #268]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b0:	6413      	str	r3, [r2, #64]	; 0x40
 80073b2:	4b41      	ldr	r3, [pc, #260]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073be:	4b3f      	ldr	r3, [pc, #252]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a3e      	ldr	r2, [pc, #248]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073ca:	f7fa fb5f 	bl	8001a8c <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073d0:	e008      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073d2:	f7fa fb5b 	bl	8001a8c <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e062      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073e4:	4b35      	ldr	r3, [pc, #212]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f0      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073f0:	4b31      	ldr	r3, [pc, #196]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d02f      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	429a      	cmp	r2, r3
 800740c:	d028      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800740e:	4b2a      	ldr	r3, [pc, #168]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007418:	4b29      	ldr	r3, [pc, #164]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800741a:	2201      	movs	r2, #1
 800741c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800741e:	4b28      	ldr	r3, [pc, #160]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007424:	4a24      	ldr	r2, [pc, #144]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800742a:	4b23      	ldr	r3, [pc, #140]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	d114      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007436:	f7fa fb29 	bl	8001a8c <HAL_GetTick>
 800743a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743c:	e00a      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800743e:	f7fa fb25 	bl	8001a8c <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f241 3288 	movw	r2, #5000	; 0x1388
 800744c:	4293      	cmp	r3, r2
 800744e:	d901      	bls.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e02a      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007454:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0ee      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800746c:	d10d      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800747e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007482:	490d      	ldr	r1, [pc, #52]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007484:	4313      	orrs	r3, r2
 8007486:	608b      	str	r3, [r1, #8]
 8007488:	e005      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007490:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007494:	6093      	str	r3, [r2, #8]
 8007496:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a2:	4905      	ldr	r1, [pc, #20]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	42470068 	.word	0x42470068
 80074b8:	40023800 	.word	0x40023800
 80074bc:	40007000 	.word	0x40007000
 80074c0:	42470e40 	.word	0x42470e40

080074c4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2203      	movs	r2, #3
 80074d0:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80074d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d8:	099b      	lsrs	r3, r3, #6
 80074da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074e2:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80074e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e8:	0f1b      	lsrs	r3, r3, #28
 80074ea:	f003 0207 	and.w	r2, r3, #7
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80074f2:	4b09      	ldr	r3, [pc, #36]	; (8007518 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80074fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800750c:	bf00      	nop
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	40023800 	.word	0x40023800

0800751c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d13d      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800753a:	4b22      	ldr	r3, [pc, #136]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007542:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800754a:	2b01      	cmp	r3, #1
 800754c:	d12f      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800754e:	4b1e      	ldr	r3, [pc, #120]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007550:	617b      	str	r3, [r7, #20]
          break;
 8007552:	e02f      	b.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007554:	4b1b      	ldr	r3, [pc, #108]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007560:	d108      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007562:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800756a:	4a18      	ldr	r2, [pc, #96]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800756c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007570:	613b      	str	r3, [r7, #16]
 8007572:	e007      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007574:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007582:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007584:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758a:	099b      	lsrs	r3, r3, #6
 800758c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	fb02 f303 	mul.w	r3, r2, r3
 8007596:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800759a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759e:	0f1b      	lsrs	r3, r3, #28
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075aa:	617b      	str	r3, [r7, #20]
          break;
 80075ac:	e002      	b.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]
          break;
 80075b2:	bf00      	nop
        }
      }
      break;
 80075b4:	bf00      	nop
    }
  }
  return frequency;
 80075b6:	697b      	ldr	r3, [r7, #20]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	40023800 	.word	0x40023800
 80075c8:	00bb8000 	.word	0x00bb8000
 80075cc:	007a1200 	.word	0x007a1200
 80075d0:	00f42400 	.word	0x00f42400

080075d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e01d      	b.n	8007622 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fa f8fc 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f000 fa40 	bl	8007a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0201 	orr.w	r2, r2, #1
 8007640:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b06      	cmp	r3, #6
 8007652:	d007      	beq.n	8007664 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0201 	bic.w	r2, r2, #1
 8007688:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	f241 1311 	movw	r3, #4369	; 0x1111
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10f      	bne.n	80076ba <HAL_TIM_Base_Stop_IT+0x48>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a1a      	ldr	r2, [r3, #32]
 80076a0:	f240 4344 	movw	r3, #1092	; 0x444
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d107      	bne.n	80076ba <HAL_TIM_Base_Stop_IT+0x48>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0201 	bic.w	r2, r2, #1
 80076b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d122      	bne.n	8007724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d11b      	bne.n	8007724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0202 	mvn.w	r2, #2
 80076f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9a5 	bl	8007a5a <HAL_TIM_IC_CaptureCallback>
 8007710:	e005      	b.n	800771e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f997 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f9a8 	bl	8007a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	2b04      	cmp	r3, #4
 8007730:	d122      	bne.n	8007778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d11b      	bne.n	8007778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0204 	mvn.w	r2, #4
 8007748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f97b 	bl	8007a5a <HAL_TIM_IC_CaptureCallback>
 8007764:	e005      	b.n	8007772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f96d 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f97e 	bl	8007a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b08      	cmp	r3, #8
 8007784:	d122      	bne.n	80077cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b08      	cmp	r3, #8
 8007792:	d11b      	bne.n	80077cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0208 	mvn.w	r2, #8
 800779c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2204      	movs	r2, #4
 80077a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f951 	bl	8007a5a <HAL_TIM_IC_CaptureCallback>
 80077b8:	e005      	b.n	80077c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f943 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f954 	bl	8007a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d122      	bne.n	8007820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d11b      	bne.n	8007820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0210 	mvn.w	r2, #16
 80077f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2208      	movs	r2, #8
 80077f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f927 	bl	8007a5a <HAL_TIM_IC_CaptureCallback>
 800780c:	e005      	b.n	800781a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f919 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f92a 	bl	8007a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b01      	cmp	r3, #1
 800782c:	d10e      	bne.n	800784c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b01      	cmp	r3, #1
 800783a:	d107      	bne.n	800784c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0201 	mvn.w	r2, #1
 8007844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7f9 fac0 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d10e      	bne.n	8007878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007864:	2b80      	cmp	r3, #128	; 0x80
 8007866:	d107      	bne.n	8007878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fad0 	bl	8007e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d10e      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d107      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800789c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f8ef 	bl	8007a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d10e      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d107      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0220 	mvn.w	r2, #32
 80078c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa9a 	bl	8007e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d101      	bne.n	80078f0 <HAL_TIM_ConfigClockSource+0x18>
 80078ec:	2302      	movs	r3, #2
 80078ee:	e0a6      	b.n	8007a3e <HAL_TIM_ConfigClockSource+0x166>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800790e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007916:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b40      	cmp	r3, #64	; 0x40
 8007926:	d067      	beq.n	80079f8 <HAL_TIM_ConfigClockSource+0x120>
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d80b      	bhi.n	8007944 <HAL_TIM_ConfigClockSource+0x6c>
 800792c:	2b10      	cmp	r3, #16
 800792e:	d073      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0x140>
 8007930:	2b10      	cmp	r3, #16
 8007932:	d802      	bhi.n	800793a <HAL_TIM_ConfigClockSource+0x62>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d06f      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007938:	e078      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800793a:	2b20      	cmp	r3, #32
 800793c:	d06c      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0x140>
 800793e:	2b30      	cmp	r3, #48	; 0x30
 8007940:	d06a      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007942:	e073      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007944:	2b70      	cmp	r3, #112	; 0x70
 8007946:	d00d      	beq.n	8007964 <HAL_TIM_ConfigClockSource+0x8c>
 8007948:	2b70      	cmp	r3, #112	; 0x70
 800794a:	d804      	bhi.n	8007956 <HAL_TIM_ConfigClockSource+0x7e>
 800794c:	2b50      	cmp	r3, #80	; 0x50
 800794e:	d033      	beq.n	80079b8 <HAL_TIM_ConfigClockSource+0xe0>
 8007950:	2b60      	cmp	r3, #96	; 0x60
 8007952:	d041      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007954:	e06a      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795a:	d066      	beq.n	8007a2a <HAL_TIM_ConfigClockSource+0x152>
 800795c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007960:	d017      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007962:	e063      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6899      	ldr	r1, [r3, #8]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f000 f9aa 	bl	8007ccc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007986:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	609a      	str	r2, [r3, #8]
      break;
 8007990:	e04c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6899      	ldr	r1, [r3, #8]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f000 f993 	bl	8007ccc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079b4:	609a      	str	r2, [r3, #8]
      break;
 80079b6:	e039      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	6859      	ldr	r1, [r3, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	461a      	mov	r2, r3
 80079c6:	f000 f907 	bl	8007bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2150      	movs	r1, #80	; 0x50
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f960 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 80079d6:	e029      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	6859      	ldr	r1, [r3, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	461a      	mov	r2, r3
 80079e6:	f000 f926 	bl	8007c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2160      	movs	r1, #96	; 0x60
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f950 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 80079f6:	e019      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6859      	ldr	r1, [r3, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	461a      	mov	r2, r3
 8007a06:	f000 f8e7 	bl	8007bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2140      	movs	r1, #64	; 0x40
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f940 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 8007a16:	e009      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4619      	mov	r1, r3
 8007a22:	4610      	mov	r0, r2
 8007a24:	f000 f937 	bl	8007c96 <TIM_ITRx_SetConfig>
      break;
 8007a28:	e000      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a40      	ldr	r2, [pc, #256]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d013      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d00f      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a3d      	ldr	r2, [pc, #244]	; (8007bb0 <TIM_Base_SetConfig+0x118>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a3c      	ldr	r2, [pc, #240]	; (8007bb4 <TIM_Base_SetConfig+0x11c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d007      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a3b      	ldr	r2, [pc, #236]	; (8007bb8 <TIM_Base_SetConfig+0x120>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a3a      	ldr	r2, [pc, #232]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d108      	bne.n	8007aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2f      	ldr	r2, [pc, #188]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d02b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af8:	d027      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2c      	ldr	r2, [pc, #176]	; (8007bb0 <TIM_Base_SetConfig+0x118>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d023      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a2b      	ldr	r2, [pc, #172]	; (8007bb4 <TIM_Base_SetConfig+0x11c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01f      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <TIM_Base_SetConfig+0x120>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d01b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a29      	ldr	r2, [pc, #164]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d017      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <TIM_Base_SetConfig+0x128>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d013      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <TIM_Base_SetConfig+0x12c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00f      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a26      	ldr	r2, [pc, #152]	; (8007bc8 <TIM_Base_SetConfig+0x130>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a25      	ldr	r2, [pc, #148]	; (8007bcc <TIM_Base_SetConfig+0x134>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d007      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a24      	ldr	r2, [pc, #144]	; (8007bd0 <TIM_Base_SetConfig+0x138>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a23      	ldr	r2, [pc, #140]	; (8007bd4 <TIM_Base_SetConfig+0x13c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d108      	bne.n	8007b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <TIM_Base_SetConfig+0xf8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d103      	bne.n	8007b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	615a      	str	r2, [r3, #20]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40000400 	.word	0x40000400
 8007bb4:	40000800 	.word	0x40000800
 8007bb8:	40000c00 	.word	0x40000c00
 8007bbc:	40010400 	.word	0x40010400
 8007bc0:	40014000 	.word	0x40014000
 8007bc4:	40014400 	.word	0x40014400
 8007bc8:	40014800 	.word	0x40014800
 8007bcc:	40001800 	.word	0x40001800
 8007bd0:	40001c00 	.word	0x40001c00
 8007bd4:	40002000 	.word	0x40002000

08007bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f023 0201 	bic.w	r2, r3, #1
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f023 030a 	bic.w	r3, r3, #10
 8007c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b087      	sub	sp, #28
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f023 0210 	bic.w	r2, r3, #16
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	031b      	lsls	r3, r3, #12
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f043 0307 	orr.w	r3, r3, #7
 8007cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	609a      	str	r2, [r3, #8]
}
 8007cc0:	bf00      	nop
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	021a      	lsls	r2, r3, #8
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	609a      	str	r2, [r3, #8]
}
 8007d00:	bf00      	nop
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e05a      	b.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a21      	ldr	r2, [pc, #132]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d022      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d70:	d01d      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1d      	ldr	r2, [pc, #116]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d018      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d013      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1a      	ldr	r2, [pc, #104]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00e      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d009      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d10c      	bne.n	8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40000400 	.word	0x40000400
 8007df0:	40000800 	.word	0x40000800
 8007df4:	40000c00 	.word	0x40000c00
 8007df8:	40010400 	.word	0x40010400
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40001800 	.word	0x40001800

08007e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	f107 001c 	add.w	r0, r7, #28
 8007e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d122      	bne.n	8007e8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d105      	bne.n	8007e7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f94a 	bl	8008118 <USB_CoreReset>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]
 8007e88:	e01a      	b.n	8007ec0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f93e 	bl	8008118 <USB_CoreReset>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8007eb2:	e005      	b.n	8007ec0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d10b      	bne.n	8007ede <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f043 0206 	orr.w	r2, r3, #6
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f043 0220 	orr.w	r2, r3, #32
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eea:	b004      	add	sp, #16
 8007eec:	4770      	bx	lr

08007eee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f043 0201 	orr.w	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f023 0201 	bic.w	r2, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d106      	bne.n	8007f5e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60da      	str	r2, [r3, #12]
 8007f5c:	e00b      	b.n	8007f76 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d106      	bne.n	8007f72 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60da      	str	r2, [r3, #12]
 8007f70:	e001      	b.n	8007f76 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e003      	b.n	8007f7e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007f76:	2032      	movs	r0, #50	; 0x32
 8007f78:	f7f9 fd94 	bl	8001aa4 <HAL_Delay>

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	019b      	lsls	r3, r3, #6
 8007f9a:	f043 0220 	orr.w	r2, r3, #32
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <USB_FlushTxFifo+0x48>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d901      	bls.n	8007fb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e006      	b.n	8007fc2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d0f0      	beq.n	8007fa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	00030d40 	.word	0x00030d40

08007fd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a09      	ldr	r2, [pc, #36]	; (8008014 <USB_FlushRxFifo+0x40>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e006      	b.n	8008006 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b10      	cmp	r3, #16
 8008002:	d0f0      	beq.n	8007fe6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	00030d40 	.word	0x00030d40

08008018 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008018:	b480      	push	{r7}
 800801a:	b089      	sub	sp, #36	; 0x24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4611      	mov	r1, r2
 8008024:	461a      	mov	r2, r3
 8008026:	460b      	mov	r3, r1
 8008028:	71fb      	strb	r3, [r7, #7]
 800802a:	4613      	mov	r3, r2
 800802c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800803a:	2b00      	cmp	r3, #0
 800803c:	d11a      	bne.n	8008074 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800803e:	88bb      	ldrh	r3, [r7, #4]
 8008040:	3303      	adds	r3, #3
 8008042:	089b      	lsrs	r3, r3, #2
 8008044:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008046:	2300      	movs	r3, #0
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	e00f      	b.n	800806c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	031a      	lsls	r2, r3, #12
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	4413      	add	r3, r2
 8008054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008058:	461a      	mov	r2, r3
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	3304      	adds	r3, #4
 8008064:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	3301      	adds	r3, #1
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	429a      	cmp	r2, r3
 8008072:	d3eb      	bcc.n	800804c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3724      	adds	r7, #36	; 0x24
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008082:	b480      	push	{r7}
 8008084:	b089      	sub	sp, #36	; 0x24
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	4613      	mov	r3, r2
 800808e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	3303      	adds	r3, #3
 800809c:	089b      	lsrs	r3, r3, #2
 800809e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80080a0:	2300      	movs	r3, #0
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	e00b      	b.n	80080be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	3304      	adds	r3, #4
 80080b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	3301      	adds	r3, #1
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d3ef      	bcc.n	80080a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3724      	adds	r7, #36	; 0x24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4013      	ands	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080ec:	68fb      	ldr	r3, [r7, #12]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	f003 0301 	and.w	r3, r3, #1
}
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4a13      	ldr	r2, [pc, #76]	; (800817c <USB_CoreReset+0x64>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e01b      	b.n	800816e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	daf2      	bge.n	8008124 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f043 0201 	orr.w	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4a09      	ldr	r2, [pc, #36]	; (800817c <USB_CoreReset+0x64>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d901      	bls.n	8008160 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e006      	b.n	800816e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b01      	cmp	r3, #1
 800816a:	d0f0      	beq.n	800814e <USB_CoreReset+0x36>

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	00030d40 	.word	0x00030d40

08008180 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008180:	b084      	sub	sp, #16
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	f107 001c 	add.w	r0, r7, #28
 800818e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800819c:	461a      	mov	r2, r3
 800819e:	2300      	movs	r3, #0
 80081a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d018      	beq.n	8008204 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d10a      	bne.n	80081ee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081e6:	f043 0304 	orr.w	r3, r3, #4
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	e014      	b.n	8008218 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081fc:	f023 0304 	bic.w	r3, r3, #4
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	e009      	b.n	8008218 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008212:	f023 0304 	bic.w	r3, r3, #4
 8008216:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008218:	2110      	movs	r1, #16
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff feb4 	bl	8007f88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fed7 	bl	8007fd4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e015      	b.n	8008258 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4413      	add	r3, r2
 8008234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008238:	461a      	mov	r2, r3
 800823a:	f04f 33ff 	mov.w	r3, #4294967295
 800823e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4413      	add	r3, r2
 8008248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	429a      	cmp	r2, r3
 800825e:	d3e5      	bcc.n	800822c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008260:	2101      	movs	r1, #1
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8ac 	bl	80083c0 <USB_DriveVbus>

  HAL_Delay(200U);
 8008268:	20c8      	movs	r0, #200	; 0xc8
 800826a:	f7f9 fc1b 	bl	8001aa4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a14      	ldr	r2, [pc, #80]	; (80082e4 <USB_HostInit+0x164>)
 8008294:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a13      	ldr	r2, [pc, #76]	; (80082e8 <USB_HostInit+0x168>)
 800829a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800829e:	e009      	b.n	80082b4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2280      	movs	r2, #128	; 0x80
 80082a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a10      	ldr	r2, [pc, #64]	; (80082ec <USB_HostInit+0x16c>)
 80082aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a10      	ldr	r2, [pc, #64]	; (80082f0 <USB_HostInit+0x170>)
 80082b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f043 0210 	orr.w	r2, r3, #16
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <USB_HostInit+0x174>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082de:	b004      	add	sp, #16
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	01000200 	.word	0x01000200
 80082e8:	00e00300 	.word	0x00e00300
 80082ec:	00600080 	.word	0x00600080
 80082f0:	004000e0 	.word	0x004000e0
 80082f4:	a3200008 	.word	0xa3200008

080082f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008316:	f023 0303 	bic.w	r3, r3, #3
 800831a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008330:	4313      	orrs	r3, r2
 8008332:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d107      	bne.n	800834a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008340:	461a      	mov	r2, r3
 8008342:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008346:	6053      	str	r3, [r2, #4]
 8008348:	e009      	b.n	800835e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d106      	bne.n	800835e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008356:	461a      	mov	r2, r3
 8008358:	f241 7370 	movw	r3, #6000	; 0x1770
 800835c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800838c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800839c:	2064      	movs	r0, #100	; 0x64
 800839e:	f7f9 fb81 	bl	8001aa4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80083b0:	200a      	movs	r0, #10
 80083b2:	f7f9 fb77 	bl	8001aa4 <HAL_Delay>

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <USB_DriveVbus+0x44>
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d106      	bne.n	8008404 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008402:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d109      	bne.n	8008424 <USB_DriveVbus+0x64>
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800841e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008422:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	0c5b      	lsrs	r3, r3, #17
 8008450:	f003 0303 	and.w	r3, r3, #3
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	b29b      	uxth	r3, r3
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	461a      	mov	r2, r3
 8008492:	4603      	mov	r3, r0
 8008494:	70fb      	strb	r3, [r7, #3]
 8008496:	460b      	mov	r3, r1
 8008498:	70bb      	strb	r3, [r7, #2]
 800849a:	4613      	mov	r3, r2
 800849c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b2:	461a      	mov	r2, r3
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295
 80084b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80084ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d87e      	bhi.n	80085c0 <USB_HC_Init+0x13c>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USB_HC_Init+0x44>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084d9 	.word	0x080084d9
 80084cc:	08008583 	.word	0x08008583
 80084d0:	080084d9 	.word	0x080084d9
 80084d4:	08008545 	.word	0x08008545
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e4:	461a      	mov	r2, r3
 80084e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80084ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80084ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da10      	bge.n	8008516 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	440a      	add	r2, r1
 800850a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008512:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008514:	e057      	b.n	80085c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d051      	beq.n	80085c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	440a      	add	r2, r1
 8008538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008540:	60d3      	str	r3, [r2, #12]
      break;
 8008542:	e040      	b.n	80085c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4413      	add	r3, r2
 800854c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008550:	461a      	mov	r2, r3
 8008552:	f240 639d 	movw	r3, #1693	; 0x69d
 8008556:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008558:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800855c:	2b00      	cmp	r3, #0
 800855e:	da34      	bge.n	80085ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	440a      	add	r2, r1
 8008576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800857e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008580:	e023      	b.n	80085ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858e:	461a      	mov	r2, r3
 8008590:	f240 2325 	movw	r3, #549	; 0x225
 8008594:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008596:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800859a:	2b00      	cmp	r3, #0
 800859c:	da17      	bge.n	80085ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	0151      	lsls	r1, r2, #5
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	440a      	add	r2, r1
 80085b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80085bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80085be:	e006      	b.n	80085ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
      break;
 80085c4:	e004      	b.n	80085d0 <USB_HC_Init+0x14c>
      break;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <USB_HC_Init+0x14c>
      break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <USB_HC_Init+0x14c>
      break;
 80085ce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085d6:	699a      	ldr	r2, [r3, #24]
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	2101      	movs	r1, #1
 80085e0:	fa01 f303 	lsl.w	r3, r1, r3
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80085ea:	4313      	orrs	r3, r2
 80085ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80085fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da03      	bge.n	800860a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008606:	613b      	str	r3, [r7, #16]
 8008608:	e001      	b.n	800860e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800860e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d103      	bne.n	800861e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e001      	b.n	8008622 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008622:	787b      	ldrb	r3, [r7, #1]
 8008624:	059b      	lsls	r3, r3, #22
 8008626:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800862a:	78bb      	ldrb	r3, [r7, #2]
 800862c:	02db      	lsls	r3, r3, #11
 800862e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008632:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008638:	049b      	lsls	r3, r3, #18
 800863a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800863e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008642:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008646:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	0159      	lsls	r1, r3, #5
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	440b      	add	r3, r1
 8008654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008658:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800865e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008660:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008664:	2b03      	cmp	r3, #3
 8008666:	d10f      	bne.n	8008688 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4413      	add	r3, r2
 8008670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	78fa      	ldrb	r2, [r7, #3]
 8008678:	0151      	lsls	r1, r2, #5
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	440a      	add	r2, r1
 800867e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008682:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008686:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
}
 800868a:	4618      	mov	r0, r3
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop

08008698 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08c      	sub	sp, #48	; 0x30
 800869c:	af02      	add	r7, sp, #8
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80086b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d028      	beq.n	8008714 <USB_HC_StartXfer+0x7c>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	791b      	ldrb	r3, [r3, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d124      	bne.n	8008714 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <USB_HC_StartXfer+0x50>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	795b      	ldrb	r3, [r3, #5]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d107      	bne.n	80086e8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	785b      	ldrb	r3, [r3, #1]
 80086dc:	4619      	mov	r1, r3
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fa30 	bl	8008b44 <USB_DoPing>
      return HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e114      	b.n	8008912 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d112      	bne.n	8008714 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	0151      	lsls	r1, r2, #5
 8008700:	6a3a      	ldr	r2, [r7, #32]
 8008702:	440a      	add	r2, r1
 8008704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008708:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800870c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2200      	movs	r2, #0
 8008712:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d018      	beq.n	800874e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	8912      	ldrh	r2, [r2, #8]
 8008724:	4413      	add	r3, r2
 8008726:	3b01      	subs	r3, #1
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	8912      	ldrh	r2, [r2, #8]
 800872c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008730:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008732:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008734:	8b7b      	ldrh	r3, [r7, #26]
 8008736:	429a      	cmp	r2, r3
 8008738:	d90b      	bls.n	8008752 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800873a:	8b7b      	ldrh	r3, [r7, #26]
 800873c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800873e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	8912      	ldrh	r2, [r2, #8]
 8008744:	fb02 f203 	mul.w	r2, r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	611a      	str	r2, [r3, #16]
 800874c:	e001      	b.n	8008752 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800874e:	2301      	movs	r3, #1
 8008750:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	78db      	ldrb	r3, [r3, #3]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d006      	beq.n	8008768 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800875a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	8912      	ldrh	r2, [r2, #8]
 8008760:	fb02 f203 	mul.w	r2, r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008772:	04d9      	lsls	r1, r3, #19
 8008774:	4b69      	ldr	r3, [pc, #420]	; (800891c <USB_HC_StartXfer+0x284>)
 8008776:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008778:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	7a9b      	ldrb	r3, [r3, #10]
 800877e:	075b      	lsls	r3, r3, #29
 8008780:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008784:	69f9      	ldr	r1, [r7, #28]
 8008786:	0148      	lsls	r0, r1, #5
 8008788:	6a39      	ldr	r1, [r7, #32]
 800878a:	4401      	add	r1, r0
 800878c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008790:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008792:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	68d9      	ldr	r1, [r3, #12]
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087aa:	460a      	mov	r2, r1
 80087ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bf0c      	ite	eq
 80087be:	2301      	moveq	r3, #1
 80087c0:	2300      	movne	r3, #0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	6a3a      	ldr	r2, [r7, #32]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	7e7b      	ldrb	r3, [r7, #25]
 80087f6:	075b      	lsls	r3, r3, #29
 80087f8:	69f9      	ldr	r1, [r7, #28]
 80087fa:	0148      	lsls	r0, r1, #5
 80087fc:	6a39      	ldr	r1, [r7, #32]
 80087fe:	4401      	add	r1, r0
 8008800:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008804:	4313      	orrs	r3, r2
 8008806:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	4413      	add	r3, r2
 8008810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a42      	ldr	r2, [pc, #264]	; (8008920 <USB_HC_StartXfer+0x288>)
 8008818:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800881a:	4b41      	ldr	r3, [pc, #260]	; (8008920 <USB_HC_StartXfer+0x288>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008822:	4a3f      	ldr	r2, [pc, #252]	; (8008920 <USB_HC_StartXfer+0x288>)
 8008824:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	78db      	ldrb	r3, [r3, #3]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d006      	beq.n	800883c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800882e:	4b3c      	ldr	r3, [pc, #240]	; (8008920 <USB_HC_StartXfer+0x288>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008836:	4a3a      	ldr	r2, [pc, #232]	; (8008920 <USB_HC_StartXfer+0x288>)
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e005      	b.n	8008848 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800883c:	4b38      	ldr	r3, [pc, #224]	; (8008920 <USB_HC_StartXfer+0x288>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008844:	4a36      	ldr	r2, [pc, #216]	; (8008920 <USB_HC_StartXfer+0x288>)
 8008846:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008848:	4b35      	ldr	r3, [pc, #212]	; (8008920 <USB_HC_StartXfer+0x288>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008850:	4a33      	ldr	r2, [pc, #204]	; (8008920 <USB_HC_StartXfer+0x288>)
 8008852:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008860:	461a      	mov	r2, r3
 8008862:	4b2f      	ldr	r3, [pc, #188]	; (8008920 <USB_HC_StartXfer+0x288>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008868:	79fb      	ldrb	r3, [r7, #7]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	e04f      	b.n	8008912 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	78db      	ldrb	r3, [r3, #3]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d14a      	bne.n	8008910 <USB_HC_StartXfer+0x278>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d046      	beq.n	8008910 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	79db      	ldrb	r3, [r3, #7]
 8008886:	2b03      	cmp	r3, #3
 8008888:	d830      	bhi.n	80088ec <USB_HC_StartXfer+0x254>
 800888a:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <USB_HC_StartXfer+0x1f8>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088c5 	.word	0x080088c5
 8008898:	080088a1 	.word	0x080088a1
 800889c:	080088c5 	.word	0x080088c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	3303      	adds	r3, #3
 80088a6:	089b      	lsrs	r3, r3, #2
 80088a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80088aa:	8afa      	ldrh	r2, [r7, #22]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d91c      	bls.n	80088f0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	f043 0220 	orr.w	r2, r3, #32
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80088c2:	e015      	b.n	80088f0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	3303      	adds	r3, #3
 80088ca:	089b      	lsrs	r3, r3, #2
 80088cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80088ce:	8afa      	ldrh	r2, [r7, #22]
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	429a      	cmp	r2, r3
 80088dc:	d90a      	bls.n	80088f4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80088ea:	e003      	b.n	80088f4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80088ec:	bf00      	nop
 80088ee:	e002      	b.n	80088f6 <USB_HC_StartXfer+0x25e>
        break;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <USB_HC_StartXfer+0x25e>
        break;
 80088f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	68d9      	ldr	r1, [r3, #12]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	785a      	ldrb	r2, [r3, #1]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	b298      	uxth	r0, r3
 8008904:	2300      	movs	r3, #0
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4603      	mov	r3, r0
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff fb84 	bl	8008018 <USB_WritePacket>
  }

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3728      	adds	r7, #40	; 0x28
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	1ff80000 	.word	0x1ff80000
 8008920:	2000134c 	.word	0x2000134c

08008924 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	b29b      	uxth	r3, r3
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	0c9b      	lsrs	r3, r3, #18
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <USB_HC_Halt+0x3a>
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d16c      	bne.n	8008a5a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	4413      	add	r3, r2
 8008988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	0151      	lsls	r1, r2, #5
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	440a      	add	r2, r1
 8008996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800899a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d143      	bne.n	8008a34 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	0151      	lsls	r1, r2, #5
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	440a      	add	r2, r1
 80089e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	0151      	lsls	r1, r2, #5
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	440a      	add	r2, r1
 8008a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a0a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	617b      	str	r3, [r7, #20]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a18:	d81d      	bhi.n	8008a56 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a30:	d0ec      	beq.n	8008a0c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a32:	e080      	b.n	8008b36 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a54:	e06f      	b.n	8008b36 <USB_HC_Halt+0x1f0>
          break;
 8008a56:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a58:	e06d      	b.n	8008b36 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a78:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d143      	bne.n	8008b12 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	0151      	lsls	r1, r2, #5
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aa8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ac8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ae4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ae8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	3301      	adds	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008af6:	d81d      	bhi.n	8008b34 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b0e:	d0ec      	beq.n	8008aea <USB_HC_Halt+0x1a4>
 8008b10:	e011      	b.n	8008b36 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	e000      	b.n	8008b36 <USB_HC_Halt+0x1f0>
          break;
 8008b34:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	04da      	lsls	r2, r3, #19
 8008b60:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <USB_DoPing+0x74>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	0151      	lsls	r1, r2, #5
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	440a      	add	r2, r1
 8008b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b8c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b94:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	1ff80000 	.word	0x1ff80000

08008bbc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff f99f 	bl	8007f10 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008bd2:	2110      	movs	r1, #16
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff f9d7 	bl	8007f88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff f9fa 	bl	8007fd4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008be0:	2300      	movs	r3, #0
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	e01f      	b.n	8008c26 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c04:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c0c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	3301      	adds	r3, #1
 8008c24:	613b      	str	r3, [r7, #16]
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b0f      	cmp	r3, #15
 8008c2a:	d9dc      	bls.n	8008be6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
 8008c30:	e034      	b.n	8008c9c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c48:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c58:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c66:	461a      	mov	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c78:	d80c      	bhi.n	8008c94 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c90:	d0ec      	beq.n	8008c6c <USB_StopHost+0xb0>
 8008c92:	e000      	b.n	8008c96 <USB_StopHost+0xda>
        break;
 8008c94:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b0f      	cmp	r3, #15
 8008ca0:	d9c7      	bls.n	8008c32 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff f918 	bl	8007eee <USB_EnableGlobalInt>

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008ccc:	4904      	ldr	r1, [pc, #16]	; (8008ce0 <MX_FATFS_Init+0x18>)
 8008cce:	4805      	ldr	r0, [pc, #20]	; (8008ce4 <MX_FATFS_Init+0x1c>)
 8008cd0:	f005 fb7a 	bl	800e3c8 <FATFS_LinkDriver>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <MX_FATFS_Init+0x20>)
 8008cda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008cdc:	bf00      	nop
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20001520 	.word	0x20001520
 8008ce4:	0800ed30 	.word	0x0800ed30
 8008ce8:	20001984 	.word	0x20001984

08008cec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008cf0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	4619      	mov	r1, r3
 8008d26:	4808      	ldr	r0, [pc, #32]	; (8008d48 <USBH_status+0x34>)
 8008d28:	f000 fe11 	bl	800994e <USBH_MSC_UnitIsReady>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <USBH_status+0x24>
  {
    res = RES_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]
 8008d36:	e001      	b.n	8008d3c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20001988 	.word	0x20001988

08008d4c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b094      	sub	sp, #80	; 0x50
 8008d50:	af02      	add	r7, sp, #8
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008d62:	7bf9      	ldrb	r1, [r7, #15]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	4812      	ldr	r0, [pc, #72]	; (8008db8 <USBH_read+0x6c>)
 8008d6e:	f000 fe38 	bl	80099e2 <USBH_MSC_Read>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <USBH_read+0x34>
  {
    res = RES_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d7e:	e015      	b.n	8008dac <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008d80:	f107 0210 	add.w	r2, r7, #16
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	4619      	mov	r1, r3
 8008d88:	480b      	ldr	r0, [pc, #44]	; (8008db8 <USBH_read+0x6c>)
 8008d8a:	f000 fe06 	bl	800999a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008d8e:	7f7b      	ldrb	r3, [r7, #29]
 8008d90:	2b28      	cmp	r3, #40	; 0x28
 8008d92:	d003      	beq.n	8008d9c <USBH_read+0x50>
 8008d94:	2b3a      	cmp	r3, #58	; 0x3a
 8008d96:	d001      	beq.n	8008d9c <USBH_read+0x50>
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d103      	bne.n	8008da4 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008da2:	e003      	b.n	8008dac <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008daa:	bf00      	nop
    }
  }

  return res;
 8008dac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3748      	adds	r7, #72	; 0x48
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20001988 	.word	0x20001988

08008dbc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b094      	sub	sp, #80	; 0x50
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008dd2:	7bf9      	ldrb	r1, [r7, #15]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	4817      	ldr	r0, [pc, #92]	; (8008e3c <USBH_write+0x80>)
 8008dde:	f000 fe69 	bl	8009ab4 <USBH_MSC_Write>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <USBH_write+0x34>
  {
    res = RES_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dee:	e01f      	b.n	8008e30 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008df0:	f107 0210 	add.w	r2, r7, #16
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	4619      	mov	r1, r3
 8008df8:	4810      	ldr	r0, [pc, #64]	; (8008e3c <USBH_write+0x80>)
 8008dfa:	f000 fdce 	bl	800999a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008dfe:	7f7b      	ldrb	r3, [r7, #29]
 8008e00:	2b27      	cmp	r3, #39	; 0x27
 8008e02:	d009      	beq.n	8008e18 <USBH_write+0x5c>
 8008e04:	2b27      	cmp	r3, #39	; 0x27
 8008e06:	dc02      	bgt.n	8008e0e <USBH_write+0x52>
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d009      	beq.n	8008e20 <USBH_write+0x64>
 8008e0c:	e00c      	b.n	8008e28 <USBH_write+0x6c>
 8008e0e:	2b28      	cmp	r3, #40	; 0x28
 8008e10:	d006      	beq.n	8008e20 <USBH_write+0x64>
 8008e12:	2b3a      	cmp	r3, #58	; 0x3a
 8008e14:	d004      	beq.n	8008e20 <USBH_write+0x64>
 8008e16:	e007      	b.n	8008e28 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008e1e:	e007      	b.n	8008e30 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008e20:	2303      	movs	r3, #3
 8008e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008e26:	e003      	b.n	8008e30 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008e2e:	bf00      	nop
    }
  }

  return res;
 8008e30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3748      	adds	r7, #72	; 0x48
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20001988 	.word	0x20001988

08008e40 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b090      	sub	sp, #64	; 0x40
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	603a      	str	r2, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008e56:	79bb      	ldrb	r3, [r7, #6]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d852      	bhi.n	8008f02 <USBH_ioctl+0xc2>
 8008e5c:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <USBH_ioctl+0x24>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e75 	.word	0x08008e75
 8008e68:	08008e7d 	.word	0x08008e7d
 8008e6c:	08008ea7 	.word	0x08008ea7
 8008e70:	08008ed3 	.word	0x08008ed3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008e7a:	e045      	b.n	8008f08 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008e7c:	f107 0208 	add.w	r2, r7, #8
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	4619      	mov	r1, r3
 8008e84:	4823      	ldr	r0, [pc, #140]	; (8008f14 <USBH_ioctl+0xd4>)
 8008e86:	f000 fd88 	bl	800999a <USBH_MSC_GetLUNInfo>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d106      	bne.n	8008e9e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008e9c:	e034      	b.n	8008f08 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ea4:	e030      	b.n	8008f08 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008ea6:	f107 0208 	add.w	r2, r7, #8
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	4619      	mov	r1, r3
 8008eae:	4819      	ldr	r0, [pc, #100]	; (8008f14 <USBH_ioctl+0xd4>)
 8008eb0:	f000 fd73 	bl	800999a <USBH_MSC_GetLUNInfo>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d107      	bne.n	8008eca <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008eba:	8a3b      	ldrh	r3, [r7, #16]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ec8:	e01e      	b.n	8008f08 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ed0:	e01a      	b.n	8008f08 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008ed2:	f107 0208 	add.w	r2, r7, #8
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	480e      	ldr	r0, [pc, #56]	; (8008f14 <USBH_ioctl+0xd4>)
 8008edc:	f000 fd5d 	bl	800999a <USBH_MSC_GetLUNInfo>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d109      	bne.n	8008efa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008ee6:	8a3b      	ldrh	r3, [r7, #16]
 8008ee8:	0a5b      	lsrs	r3, r3, #9
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ef8:	e006      	b.n	8008f08 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008f00:	e002      	b.n	8008f08 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008f02:	2304      	movs	r3, #4
 8008f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008f08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3740      	adds	r7, #64	; 0x40
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20001988 	.word	0x20001988

08008f18 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008f18:	b590      	push	{r4, r7, lr}
 8008f1a:	b089      	sub	sp, #36	; 0x24
 8008f1c:	af04      	add	r7, sp, #16
 8008f1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f26:	7919      	ldrb	r1, [r3, #4]
 8008f28:	2350      	movs	r3, #80	; 0x50
 8008f2a:	2206      	movs	r2, #6
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 fc4f 	bl	800a7d0 <USBH_FindInterface>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	2bff      	cmp	r3, #255	; 0xff
 8008f3a:	d002      	beq.n	8008f42 <USBH_MSC_InterfaceInit+0x2a>
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d901      	bls.n	8008f46 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f42:	2302      	movs	r3, #2
 8008f44:	e0ef      	b.n	8009126 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 fc24 	bl	800a798 <USBH_SelectInterface>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e0e3      	b.n	8009126 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008f64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f68:	f005 fd7e 	bl	800ea68 <malloc>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008f80:	2302      	movs	r3, #2
 8008f82:	e0d0      	b.n	8009126 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f88:	2100      	movs	r1, #0
 8008f8a:	68b8      	ldr	r0, [r7, #8]
 8008f8c:	f005 fd87 	bl	800ea9e <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	211a      	movs	r1, #26
 8008f96:	fb01 f303 	mul.w	r3, r1, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da16      	bge.n	8008fd6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	211a      	movs	r1, #26
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008fb8:	781a      	ldrb	r2, [r3, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	211a      	movs	r1, #26
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008fce:	881a      	ldrh	r2, [r3, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	815a      	strh	r2, [r3, #10]
 8008fd4:	e015      	b.n	8009002 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	211a      	movs	r1, #26
 8008fdc:	fb01 f303 	mul.w	r3, r1, r3
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008fe6:	781a      	ldrb	r2, [r3, #0]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	211a      	movs	r1, #26
 8008ff2:	fb01 f303 	mul.w	r3, r1, r3
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ffc:	881a      	ldrh	r2, [r3, #0]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	211a      	movs	r1, #26
 8009008:	fb01 f303 	mul.w	r3, r1, r3
 800900c:	4413      	add	r3, r2
 800900e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b25b      	sxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	da16      	bge.n	8009048 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	211a      	movs	r1, #26
 8009020:	fb01 f303 	mul.w	r3, r1, r3
 8009024:	4413      	add	r3, r2
 8009026:	f203 3356 	addw	r3, r3, #854	; 0x356
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	211a      	movs	r1, #26
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009040:	881a      	ldrh	r2, [r3, #0]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	815a      	strh	r2, [r3, #10]
 8009046:	e015      	b.n	8009074 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	211a      	movs	r1, #26
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	211a      	movs	r1, #26
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	4413      	add	r3, r2
 800906a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800906e:	881a      	ldrh	r2, [r3, #0]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2200      	movs	r2, #0
 8009078:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2200      	movs	r2, #0
 800907e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2200      	movs	r2, #0
 8009084:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	799b      	ldrb	r3, [r3, #6]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f002 fdc2 	bl	800bc16 <USBH_AllocPipe>
 8009092:	4603      	mov	r3, r0
 8009094:	461a      	mov	r2, r3
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	79db      	ldrb	r3, [r3, #7]
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f002 fdb8 	bl	800bc16 <USBH_AllocPipe>
 80090a6:	4603      	mov	r3, r0
 80090a8:	461a      	mov	r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fda4 	bl	8009bfc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	7959      	ldrb	r1, [r3, #5]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	7998      	ldrb	r0, [r3, #6]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	8912      	ldrh	r2, [r2, #8]
 80090cc:	9202      	str	r2, [sp, #8]
 80090ce:	2202      	movs	r2, #2
 80090d0:	9201      	str	r2, [sp, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	4623      	mov	r3, r4
 80090d6:	4602      	mov	r2, r0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f002 fd6d 	bl	800bbb8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	7919      	ldrb	r1, [r3, #4]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	79d8      	ldrb	r0, [r3, #7]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	8952      	ldrh	r2, [r2, #10]
 80090f6:	9202      	str	r2, [sp, #8]
 80090f8:	2202      	movs	r2, #2
 80090fa:	9201      	str	r2, [sp, #4]
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4623      	mov	r3, r4
 8009100:	4602      	mov	r2, r0
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f002 fd58 	bl	800bbb8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	791b      	ldrb	r3, [r3, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f005 fbe2 	bl	800e8da <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	795b      	ldrb	r3, [r3, #5]
 800911a:	2200      	movs	r2, #0
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f005 fbdb 	bl	800e8da <USBH_LL_SetToggle>

  return USBH_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bd90      	pop	{r4, r7, pc}

0800912e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	795b      	ldrb	r3, [r3, #5]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00e      	beq.n	8009166 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	795b      	ldrb	r3, [r3, #5]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f002 fd51 	bl	800bbf6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	795b      	ldrb	r3, [r3, #5]
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f002 fd7c 	bl	800bc58 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	791b      	ldrb	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00e      	beq.n	800918c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	791b      	ldrb	r3, [r3, #4]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f002 fd3e 	bl	800bbf6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	791b      	ldrb	r3, [r3, #4]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f002 fd69 	bl	800bc58 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f005 fc69 	bl	800ea78 <free>
    phost->pActiveClass->pData = 0U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091ac:	2200      	movs	r2, #0
 80091ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80091cc:	2301      	movs	r3, #1
 80091ce:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	7b9b      	ldrb	r3, [r3, #14]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d004      	beq.n	80091e2 <USBH_MSC_ClassRequest+0x28>
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d03e      	beq.n	800925a <USBH_MSC_ClassRequest+0xa0>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d000      	beq.n	80091e2 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80091e0:	e04a      	b.n	8009278 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fcea 	bl	8009bc0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d104      	bne.n	8009200 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d135      	bne.n	8009272 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b02      	cmp	r3, #2
 800920c:	d804      	bhi.n	8009218 <USBH_MSC_ClassRequest+0x5e>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	b2da      	uxtb	r2, r3
 8009216:	e000      	b.n	800921a <USBH_MSC_ClassRequest+0x60>
 8009218:	2202      	movs	r2, #2
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800921e:	2300      	movs	r3, #0
 8009220:	73bb      	strb	r3, [r7, #14]
 8009222:	e014      	b.n	800924e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	2134      	movs	r1, #52	; 0x34
 800922a:	fb01 f303 	mul.w	r3, r1, r3
 800922e:	4413      	add	r3, r2
 8009230:	3392      	adds	r3, #146	; 0x92
 8009232:	2202      	movs	r2, #2
 8009234:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	2134      	movs	r1, #52	; 0x34
 800923c:	fb01 f303 	mul.w	r3, r1, r3
 8009240:	4413      	add	r3, r2
 8009242:	33c1      	adds	r3, #193	; 0xc1
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	3301      	adds	r3, #1
 800924c:	73bb      	strb	r3, [r7, #14]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	7bba      	ldrb	r2, [r7, #14]
 8009254:	429a      	cmp	r2, r3
 8009256:	d3e5      	bcc.n	8009224 <USBH_MSC_ClassRequest+0x6a>
      break;
 8009258:	e00b      	b.n	8009272 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800925a:	2100      	movs	r1, #0
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f002 f878 	bl	800b352 <USBH_ClrFeature>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	7bda      	ldrb	r2, [r3, #15]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	739a      	strb	r2, [r3, #14]
      break;
 8009270:	e001      	b.n	8009276 <USBH_MSC_ClassRequest+0xbc>
      break;
 8009272:	bf00      	nop
 8009274:	e000      	b.n	8009278 <USBH_MSC_ClassRequest+0xbe>
      break;
 8009276:	bf00      	nop
  }

  return status;
 8009278:	7bfb      	ldrb	r3, [r7, #15]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009296:	2301      	movs	r3, #1
 8009298:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800929a:	2301      	movs	r3, #1
 800929c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800929e:	2301      	movs	r3, #1
 80092a0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	7b1b      	ldrb	r3, [r3, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <USBH_MSC_Process+0x2e>
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	f000 8271 	beq.w	8009792 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80092b0:	e272      	b.n	8009798 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	429a      	cmp	r2, r3
 80092c0:	f080 824f 	bcs.w	8009762 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ca:	4619      	mov	r1, r3
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	2334      	movs	r3, #52	; 0x34
 80092d0:	fb03 f301 	mul.w	r3, r3, r1
 80092d4:	4413      	add	r3, r2
 80092d6:	3391      	adds	r3, #145	; 0x91
 80092d8:	2201      	movs	r2, #1
 80092da:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e2:	4619      	mov	r1, r3
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	2334      	movs	r3, #52	; 0x34
 80092e8:	fb03 f301 	mul.w	r3, r3, r1
 80092ec:	4413      	add	r3, r2
 80092ee:	3390      	adds	r3, #144	; 0x90
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b08      	cmp	r3, #8
 80092f4:	f200 8243 	bhi.w	800977e <USBH_MSC_Process+0x4fa>
 80092f8:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <USBH_MSC_Process+0x7c>)
 80092fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fe:	bf00      	nop
 8009300:	08009325 	.word	0x08009325
 8009304:	0800977f 	.word	0x0800977f
 8009308:	080093ed 	.word	0x080093ed
 800930c:	08009571 	.word	0x08009571
 8009310:	0800934b 	.word	0x0800934b
 8009314:	0800963d 	.word	0x0800963d
 8009318:	0800977f 	.word	0x0800977f
 800931c:	0800977f 	.word	0x0800977f
 8009320:	08009751 	.word	0x08009751
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800932a:	4619      	mov	r1, r3
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	2334      	movs	r3, #52	; 0x34
 8009330:	fb03 f301 	mul.w	r3, r3, r1
 8009334:	4413      	add	r3, r2
 8009336:	3390      	adds	r3, #144	; 0x90
 8009338:	2204      	movs	r2, #4
 800933a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009348:	e222      	b.n	8009790 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009350:	b2d9      	uxtb	r1, r3
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009358:	461a      	mov	r2, r3
 800935a:	2334      	movs	r3, #52	; 0x34
 800935c:	fb03 f302 	mul.w	r3, r3, r2
 8009360:	3398      	adds	r3, #152	; 0x98
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4413      	add	r3, r2
 8009366:	3307      	adds	r3, #7
 8009368:	461a      	mov	r2, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 ff68 	bl	800a240 <USBH_MSC_SCSI_Inquiry>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10b      	bne.n	8009392 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009380:	4619      	mov	r1, r3
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	2334      	movs	r3, #52	; 0x34
 8009386:	fb03 f301 	mul.w	r3, r3, r1
 800938a:	4413      	add	r3, r2
 800938c:	3390      	adds	r3, #144	; 0x90
 800938e:	2202      	movs	r2, #2
 8009390:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d10c      	bne.n	80093b2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939e:	4619      	mov	r1, r3
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	2334      	movs	r3, #52	; 0x34
 80093a4:	fb03 f301 	mul.w	r3, r3, r1
 80093a8:	4413      	add	r3, r2
 80093aa:	3390      	adds	r3, #144	; 0x90
 80093ac:	2205      	movs	r2, #5
 80093ae:	701a      	strb	r2, [r3, #0]
            break;
 80093b0:	e1e7      	b.n	8009782 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	f040 81e4 	bne.w	8009782 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093c0:	4619      	mov	r1, r3
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	2334      	movs	r3, #52	; 0x34
 80093c6:	fb03 f301 	mul.w	r3, r3, r1
 80093ca:	4413      	add	r3, r2
 80093cc:	3390      	adds	r3, #144	; 0x90
 80093ce:	2201      	movs	r2, #1
 80093d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093d8:	4619      	mov	r1, r3
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	2334      	movs	r3, #52	; 0x34
 80093de:	fb03 f301 	mul.w	r3, r3, r1
 80093e2:	4413      	add	r3, r2
 80093e4:	3391      	adds	r3, #145	; 0x91
 80093e6:	2202      	movs	r2, #2
 80093e8:	701a      	strb	r2, [r3, #0]
            break;
 80093ea:	e1ca      	b.n	8009782 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fe64 	bl	800a0c4 <USBH_MSC_SCSI_TestUnitReady>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d149      	bne.n	800949a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800940c:	4619      	mov	r1, r3
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	2334      	movs	r3, #52	; 0x34
 8009412:	fb03 f301 	mul.w	r3, r3, r1
 8009416:	4413      	add	r3, r2
 8009418:	3392      	adds	r3, #146	; 0x92
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00c      	beq.n	800943a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009426:	4619      	mov	r1, r3
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	2334      	movs	r3, #52	; 0x34
 800942c:	fb03 f301 	mul.w	r3, r3, r1
 8009430:	4413      	add	r3, r2
 8009432:	33c1      	adds	r3, #193	; 0xc1
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
 8009438:	e00b      	b.n	8009452 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009440:	4619      	mov	r1, r3
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	2334      	movs	r3, #52	; 0x34
 8009446:	fb03 f301 	mul.w	r3, r3, r1
 800944a:	4413      	add	r3, r2
 800944c:	33c1      	adds	r3, #193	; 0xc1
 800944e:	2200      	movs	r2, #0
 8009450:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009458:	4619      	mov	r1, r3
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	2334      	movs	r3, #52	; 0x34
 800945e:	fb03 f301 	mul.w	r3, r3, r1
 8009462:	4413      	add	r3, r2
 8009464:	3390      	adds	r3, #144	; 0x90
 8009466:	2203      	movs	r2, #3
 8009468:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009470:	4619      	mov	r1, r3
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	2334      	movs	r3, #52	; 0x34
 8009476:	fb03 f301 	mul.w	r3, r3, r1
 800947a:	4413      	add	r3, r2
 800947c:	3391      	adds	r3, #145	; 0x91
 800947e:	2200      	movs	r2, #0
 8009480:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009488:	4619      	mov	r1, r3
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	2334      	movs	r3, #52	; 0x34
 800948e:	fb03 f301 	mul.w	r3, r3, r1
 8009492:	4413      	add	r3, r2
 8009494:	3392      	adds	r3, #146	; 0x92
 8009496:	2200      	movs	r2, #0
 8009498:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d14a      	bne.n	8009536 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094a6:	4619      	mov	r1, r3
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	2334      	movs	r3, #52	; 0x34
 80094ac:	fb03 f301 	mul.w	r3, r3, r1
 80094b0:	4413      	add	r3, r2
 80094b2:	3392      	adds	r3, #146	; 0x92
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d00c      	beq.n	80094d4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094c0:	4619      	mov	r1, r3
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	2334      	movs	r3, #52	; 0x34
 80094c6:	fb03 f301 	mul.w	r3, r3, r1
 80094ca:	4413      	add	r3, r2
 80094cc:	33c1      	adds	r3, #193	; 0xc1
 80094ce:	2201      	movs	r2, #1
 80094d0:	701a      	strb	r2, [r3, #0]
 80094d2:	e00b      	b.n	80094ec <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094da:	4619      	mov	r1, r3
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	2334      	movs	r3, #52	; 0x34
 80094e0:	fb03 f301 	mul.w	r3, r3, r1
 80094e4:	4413      	add	r3, r2
 80094e6:	33c1      	adds	r3, #193	; 0xc1
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094f2:	4619      	mov	r1, r3
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	2334      	movs	r3, #52	; 0x34
 80094f8:	fb03 f301 	mul.w	r3, r3, r1
 80094fc:	4413      	add	r3, r2
 80094fe:	3390      	adds	r3, #144	; 0x90
 8009500:	2205      	movs	r2, #5
 8009502:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800950a:	4619      	mov	r1, r3
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	2334      	movs	r3, #52	; 0x34
 8009510:	fb03 f301 	mul.w	r3, r3, r1
 8009514:	4413      	add	r3, r2
 8009516:	3391      	adds	r3, #145	; 0x91
 8009518:	2201      	movs	r2, #1
 800951a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009522:	4619      	mov	r1, r3
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	2334      	movs	r3, #52	; 0x34
 8009528:	fb03 f301 	mul.w	r3, r3, r1
 800952c:	4413      	add	r3, r2
 800952e:	3392      	adds	r3, #146	; 0x92
 8009530:	2202      	movs	r2, #2
 8009532:	701a      	strb	r2, [r3, #0]
            break;
 8009534:	e127      	b.n	8009786 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b04      	cmp	r3, #4
 800953a:	f040 8124 	bne.w	8009786 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009544:	4619      	mov	r1, r3
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	2334      	movs	r3, #52	; 0x34
 800954a:	fb03 f301 	mul.w	r3, r3, r1
 800954e:	4413      	add	r3, r2
 8009550:	3390      	adds	r3, #144	; 0x90
 8009552:	2201      	movs	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800955c:	4619      	mov	r1, r3
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	2334      	movs	r3, #52	; 0x34
 8009562:	fb03 f301 	mul.w	r3, r3, r1
 8009566:	4413      	add	r3, r2
 8009568:	3391      	adds	r3, #145	; 0x91
 800956a:	2202      	movs	r2, #2
 800956c:	701a      	strb	r2, [r3, #0]
            break;
 800956e:	e10a      	b.n	8009786 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009576:	b2d9      	uxtb	r1, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800957e:	461a      	mov	r2, r3
 8009580:	2334      	movs	r3, #52	; 0x34
 8009582:	fb03 f302 	mul.w	r3, r3, r2
 8009586:	3390      	adds	r3, #144	; 0x90
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4413      	add	r3, r2
 800958c:	3304      	adds	r3, #4
 800958e:	461a      	mov	r2, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fdda 	bl	800a14a <USBH_MSC_SCSI_ReadCapacity>
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d120      	bne.n	80095e2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095a6:	4619      	mov	r1, r3
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	2334      	movs	r3, #52	; 0x34
 80095ac:	fb03 f301 	mul.w	r3, r3, r1
 80095b0:	4413      	add	r3, r2
 80095b2:	3390      	adds	r3, #144	; 0x90
 80095b4:	2201      	movs	r2, #1
 80095b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095be:	4619      	mov	r1, r3
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	2334      	movs	r3, #52	; 0x34
 80095c4:	fb03 f301 	mul.w	r3, r3, r1
 80095c8:	4413      	add	r3, r2
 80095ca:	3391      	adds	r3, #145	; 0x91
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095d6:	3301      	adds	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80095e0:	e0d3      	b.n	800978a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d10c      	bne.n	8009602 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095ee:	4619      	mov	r1, r3
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	2334      	movs	r3, #52	; 0x34
 80095f4:	fb03 f301 	mul.w	r3, r3, r1
 80095f8:	4413      	add	r3, r2
 80095fa:	3390      	adds	r3, #144	; 0x90
 80095fc:	2205      	movs	r2, #5
 80095fe:	701a      	strb	r2, [r3, #0]
            break;
 8009600:	e0c3      	b.n	800978a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b04      	cmp	r3, #4
 8009606:	f040 80c0 	bne.w	800978a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009610:	4619      	mov	r1, r3
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	2334      	movs	r3, #52	; 0x34
 8009616:	fb03 f301 	mul.w	r3, r3, r1
 800961a:	4413      	add	r3, r2
 800961c:	3390      	adds	r3, #144	; 0x90
 800961e:	2201      	movs	r2, #1
 8009620:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009628:	4619      	mov	r1, r3
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	2334      	movs	r3, #52	; 0x34
 800962e:	fb03 f301 	mul.w	r3, r3, r1
 8009632:	4413      	add	r3, r2
 8009634:	3391      	adds	r3, #145	; 0x91
 8009636:	2202      	movs	r2, #2
 8009638:	701a      	strb	r2, [r3, #0]
            break;
 800963a:	e0a6      	b.n	800978a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009642:	b2d9      	uxtb	r1, r3
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800964a:	461a      	mov	r2, r3
 800964c:	2334      	movs	r3, #52	; 0x34
 800964e:	fb03 f302 	mul.w	r3, r3, r2
 8009652:	3398      	adds	r3, #152	; 0x98
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4413      	add	r3, r2
 8009658:	3304      	adds	r3, #4
 800965a:	461a      	mov	r2, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fe94 	bl	800a38a <USBH_MSC_SCSI_RequestSense>
 8009662:	4603      	mov	r3, r0
 8009664:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d145      	bne.n	80096f8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009672:	4619      	mov	r1, r3
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	2334      	movs	r3, #52	; 0x34
 8009678:	fb03 f301 	mul.w	r3, r3, r1
 800967c:	4413      	add	r3, r2
 800967e:	339c      	adds	r3, #156	; 0x9c
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b06      	cmp	r3, #6
 8009684:	d00c      	beq.n	80096a0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800968c:	4619      	mov	r1, r3
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	2334      	movs	r3, #52	; 0x34
 8009692:	fb03 f301 	mul.w	r3, r3, r1
 8009696:	4413      	add	r3, r2
 8009698:	339c      	adds	r3, #156	; 0x9c
 800969a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800969c:	2b02      	cmp	r3, #2
 800969e:	d117      	bne.n	80096d0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d80c      	bhi.n	80096d0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096bc:	4619      	mov	r1, r3
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	2334      	movs	r3, #52	; 0x34
 80096c2:	fb03 f301 	mul.w	r3, r3, r1
 80096c6:	4413      	add	r3, r2
 80096c8:	3390      	adds	r3, #144	; 0x90
 80096ca:	2202      	movs	r2, #2
 80096cc:	701a      	strb	r2, [r3, #0]
                  break;
 80096ce:	e05f      	b.n	8009790 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096d6:	4619      	mov	r1, r3
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	2334      	movs	r3, #52	; 0x34
 80096dc:	fb03 f301 	mul.w	r3, r3, r1
 80096e0:	4413      	add	r3, r2
 80096e2:	3390      	adds	r3, #144	; 0x90
 80096e4:	2201      	movs	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096ee:	3301      	adds	r3, #1
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d10c      	bne.n	8009718 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009704:	4619      	mov	r1, r3
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	2334      	movs	r3, #52	; 0x34
 800970a:	fb03 f301 	mul.w	r3, r3, r1
 800970e:	4413      	add	r3, r2
 8009710:	3390      	adds	r3, #144	; 0x90
 8009712:	2208      	movs	r2, #8
 8009714:	701a      	strb	r2, [r3, #0]
            break;
 8009716:	e03a      	b.n	800978e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	2b04      	cmp	r3, #4
 800971c:	d137      	bne.n	800978e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009724:	4619      	mov	r1, r3
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	2334      	movs	r3, #52	; 0x34
 800972a:	fb03 f301 	mul.w	r3, r3, r1
 800972e:	4413      	add	r3, r2
 8009730:	3390      	adds	r3, #144	; 0x90
 8009732:	2201      	movs	r2, #1
 8009734:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800973c:	4619      	mov	r1, r3
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	2334      	movs	r3, #52	; 0x34
 8009742:	fb03 f301 	mul.w	r3, r3, r1
 8009746:	4413      	add	r3, r2
 8009748:	3391      	adds	r3, #145	; 0x91
 800974a:	2202      	movs	r2, #2
 800974c:	701a      	strb	r2, [r3, #0]
            break;
 800974e:	e01e      	b.n	800978e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009756:	3301      	adds	r3, #1
 8009758:	b29a      	uxth	r2, r3
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009760:	e016      	b.n	8009790 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2200      	movs	r2, #0
 8009766:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2201      	movs	r2, #1
 800976e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009776:	2102      	movs	r1, #2
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	4798      	blx	r3
      break;
 800977c:	e00c      	b.n	8009798 <USBH_MSC_Process+0x514>
            break;
 800977e:	bf00      	nop
 8009780:	e00a      	b.n	8009798 <USBH_MSC_Process+0x514>
            break;
 8009782:	bf00      	nop
 8009784:	e008      	b.n	8009798 <USBH_MSC_Process+0x514>
            break;
 8009786:	bf00      	nop
 8009788:	e006      	b.n	8009798 <USBH_MSC_Process+0x514>
            break;
 800978a:	bf00      	nop
 800978c:	e004      	b.n	8009798 <USBH_MSC_Process+0x514>
            break;
 800978e:	bf00      	nop
      break;
 8009790:	e002      	b.n	8009798 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	75fb      	strb	r3, [r7, #23]
      break;
 8009796:	bf00      	nop
  }
  return error;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop

080097a4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b088      	sub	sp, #32
 80097be:	af02      	add	r7, sp, #8
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80097d0:	2301      	movs	r3, #1
 80097d2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	2134      	movs	r1, #52	; 0x34
 80097de:	fb01 f303 	mul.w	r3, r1, r3
 80097e2:	4413      	add	r3, r2
 80097e4:	3390      	adds	r3, #144	; 0x90
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b06      	cmp	r3, #6
 80097ea:	d004      	beq.n	80097f6 <USBH_MSC_RdWrProcess+0x3c>
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d037      	beq.n	8009860 <USBH_MSC_RdWrProcess+0xa6>
 80097f0:	2b05      	cmp	r3, #5
 80097f2:	d06a      	beq.n	80098ca <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 80097f4:	e0a6      	b.n	8009944 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80097f6:	78f9      	ldrb	r1, [r7, #3]
 80097f8:	2300      	movs	r3, #0
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2300      	movs	r3, #0
 80097fe:	2200      	movs	r2, #0
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fea6 	bl	800a552 <USBH_MSC_SCSI_Read>
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10b      	bne.n	8009828 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	2134      	movs	r1, #52	; 0x34
 8009816:	fb01 f303 	mul.w	r3, r1, r3
 800981a:	4413      	add	r3, r2
 800981c:	3390      	adds	r3, #144	; 0x90
 800981e:	2201      	movs	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]
      break;
 8009826:	e088      	b.n	800993a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d109      	bne.n	8009842 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	2134      	movs	r1, #52	; 0x34
 8009834:	fb01 f303 	mul.w	r3, r1, r3
 8009838:	4413      	add	r3, r2
 800983a:	3390      	adds	r3, #144	; 0x90
 800983c:	2205      	movs	r2, #5
 800983e:	701a      	strb	r2, [r3, #0]
      break;
 8009840:	e07b      	b.n	800993a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b04      	cmp	r3, #4
 8009846:	d178      	bne.n	800993a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	2134      	movs	r1, #52	; 0x34
 800984e:	fb01 f303 	mul.w	r3, r1, r3
 8009852:	4413      	add	r3, r2
 8009854:	3390      	adds	r3, #144	; 0x90
 8009856:	2208      	movs	r2, #8
 8009858:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800985a:	2302      	movs	r3, #2
 800985c:	75fb      	strb	r3, [r7, #23]
      break;
 800985e:	e06c      	b.n	800993a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009860:	78f9      	ldrb	r1, [r7, #3]
 8009862:	2300      	movs	r3, #0
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2300      	movs	r3, #0
 8009868:	2200      	movs	r2, #0
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fe06 	bl	800a47c <USBH_MSC_SCSI_Write>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	2134      	movs	r1, #52	; 0x34
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	4413      	add	r3, r2
 8009886:	3390      	adds	r3, #144	; 0x90
 8009888:	2201      	movs	r2, #1
 800988a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	75fb      	strb	r3, [r7, #23]
      break;
 8009890:	e055      	b.n	800993e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d109      	bne.n	80098ac <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009898:	78fb      	ldrb	r3, [r7, #3]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	2134      	movs	r1, #52	; 0x34
 800989e:	fb01 f303 	mul.w	r3, r1, r3
 80098a2:	4413      	add	r3, r2
 80098a4:	3390      	adds	r3, #144	; 0x90
 80098a6:	2205      	movs	r2, #5
 80098a8:	701a      	strb	r2, [r3, #0]
      break;
 80098aa:	e048      	b.n	800993e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	d145      	bne.n	800993e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	2134      	movs	r1, #52	; 0x34
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	3390      	adds	r3, #144	; 0x90
 80098c0:	2208      	movs	r2, #8
 80098c2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80098c4:	2302      	movs	r3, #2
 80098c6:	75fb      	strb	r3, [r7, #23]
      break;
 80098c8:	e039      	b.n	800993e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	2234      	movs	r2, #52	; 0x34
 80098ce:	fb02 f303 	mul.w	r3, r2, r3
 80098d2:	3398      	adds	r3, #152	; 0x98
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	4413      	add	r3, r2
 80098d8:	1d1a      	adds	r2, r3, #4
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fd53 	bl	800a38a <USBH_MSC_SCSI_RequestSense>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d113      	bne.n	8009916 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	2134      	movs	r1, #52	; 0x34
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	4413      	add	r3, r2
 80098fa:	3390      	adds	r3, #144	; 0x90
 80098fc:	2201      	movs	r2, #1
 80098fe:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	2134      	movs	r1, #52	; 0x34
 8009906:	fb01 f303 	mul.w	r3, r1, r3
 800990a:	4413      	add	r3, r2
 800990c:	3391      	adds	r3, #145	; 0x91
 800990e:	2202      	movs	r2, #2
 8009910:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8009912:	2302      	movs	r3, #2
 8009914:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d012      	beq.n	8009942 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	2b04      	cmp	r3, #4
 8009920:	d10f      	bne.n	8009942 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	2134      	movs	r1, #52	; 0x34
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	4413      	add	r3, r2
 800992e:	3390      	adds	r3, #144	; 0x90
 8009930:	2208      	movs	r2, #8
 8009932:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009934:	2302      	movs	r3, #2
 8009936:	75fb      	strb	r3, [r7, #23]
      break;
 8009938:	e003      	b.n	8009942 <USBH_MSC_RdWrProcess+0x188>
      break;
 800993a:	bf00      	nop
 800993c:	e002      	b.n	8009944 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800993e:	bf00      	nop
 8009940:	e000      	b.n	8009944 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8009942:	bf00      	nop

  }
  return error;
 8009944:	7dfb      	ldrb	r3, [r7, #23]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800994e:	b480      	push	{r7}
 8009950:	b085      	sub	sp, #20
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	460b      	mov	r3, r1
 8009958:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b0b      	cmp	r3, #11
 800996c:	d10c      	bne.n	8009988 <USBH_MSC_UnitIsReady+0x3a>
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	2134      	movs	r1, #52	; 0x34
 8009974:	fb01 f303 	mul.w	r3, r1, r3
 8009978:	4413      	add	r3, r2
 800997a:	3391      	adds	r3, #145	; 0x91
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d102      	bne.n	8009988 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009982:	2301      	movs	r3, #1
 8009984:	73fb      	strb	r3, [r7, #15]
 8009986:	e001      	b.n	800998c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b086      	sub	sp, #24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	460b      	mov	r3, r1
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b0b      	cmp	r3, #11
 80099ba:	d10d      	bne.n	80099d8 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80099bc:	7afb      	ldrb	r3, [r7, #11]
 80099be:	2234      	movs	r2, #52	; 0x34
 80099c0:	fb02 f303 	mul.w	r3, r2, r3
 80099c4:	3390      	adds	r3, #144	; 0x90
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	4413      	add	r3, r2
 80099ca:	2234      	movs	r2, #52	; 0x34
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f005 f85a 	bl	800ea88 <memcpy>
    return USBH_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	e000      	b.n	80099da <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80099d8:	2302      	movs	r3, #2
  }
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b088      	sub	sp, #32
 80099e6:	af02      	add	r7, sp, #8
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
 80099ee:	460b      	mov	r3, r1
 80099f0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00e      	beq.n	8009a26 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009a0e:	2b0b      	cmp	r3, #11
 8009a10:	d109      	bne.n	8009a26 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	2134      	movs	r1, #52	; 0x34
 8009a18:	fb01 f303 	mul.w	r3, r1, r3
 8009a1c:	4413      	add	r3, r2
 8009a1e:	3390      	adds	r3, #144	; 0x90
 8009a20:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d001      	beq.n	8009a2a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009a26:	2302      	movs	r3, #2
 8009a28:	e040      	b.n	8009aac <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2206      	movs	r2, #6
 8009a2e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	2134      	movs	r1, #52	; 0x34
 8009a36:	fb01 f303 	mul.w	r3, r1, r3
 8009a3a:	4413      	add	r3, r2
 8009a3c:	3390      	adds	r3, #144	; 0x90
 8009a3e:	2206      	movs	r2, #6
 8009a40:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009a42:	7afb      	ldrb	r3, [r7, #11]
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009a4c:	7af9      	ldrb	r1, [r7, #11]
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 fd7b 	bl	800a552 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a62:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a64:	e016      	b.n	8009a94 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	f242 7110 	movw	r1, #10000	; 0x2710
 8009a76:	fb01 f303 	mul.w	r3, r1, r3
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d805      	bhi.n	8009a8a <USBH_MSC_Read+0xa8>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d104      	bne.n	8009a94 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009a90:	2302      	movs	r3, #2
 8009a92:	e00b      	b.n	8009aac <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a94:	7afb      	ldrb	r3, [r7, #11]
 8009a96:	4619      	mov	r1, r3
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff fe8e 	bl	80097ba <USBH_MSC_RdWrProcess>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d0e0      	beq.n	8009a66 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af02      	add	r7, sp, #8
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	607a      	str	r2, [r7, #4]
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00e      	beq.n	8009af8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009ae0:	2b0b      	cmp	r3, #11
 8009ae2:	d109      	bne.n	8009af8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	2134      	movs	r1, #52	; 0x34
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	4413      	add	r3, r2
 8009af0:	3390      	adds	r3, #144	; 0x90
 8009af2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d001      	beq.n	8009afc <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009af8:	2302      	movs	r3, #2
 8009afa:	e040      	b.n	8009b7e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2207      	movs	r2, #7
 8009b00:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	2134      	movs	r1, #52	; 0x34
 8009b08:	fb01 f303 	mul.w	r3, r1, r3
 8009b0c:	4413      	add	r3, r2
 8009b0e:	3390      	adds	r3, #144	; 0x90
 8009b10:	2207      	movs	r2, #7
 8009b12:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009b1e:	7af9      	ldrb	r1, [r7, #11]
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 fca7 	bl	800a47c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b34:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b36:	e016      	b.n	8009b66 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	1ad2      	subs	r2, r2, r3
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f242 7110 	movw	r1, #10000	; 0x2710
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d805      	bhi.n	8009b5c <USBH_MSC_Write+0xa8>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d104      	bne.n	8009b66 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009b62:	2302      	movs	r3, #2
 8009b64:	e00b      	b.n	8009b7e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b66:	7afb      	ldrb	r3, [r7, #11]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f7ff fe25 	bl	80097ba <USBH_MSC_RdWrProcess>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d0e0      	beq.n	8009b38 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2221      	movs	r2, #33	; 0x21
 8009b92:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	22ff      	movs	r2, #255	; 0xff
 8009b98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009bac:	2200      	movs	r2, #0
 8009bae:	2100      	movs	r1, #0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 fdae 	bl	800b712 <USBH_CtlReq>
 8009bb6:	4603      	mov	r3, r0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	22a1      	movs	r2, #161	; 0xa1
 8009bce:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	22fe      	movs	r2, #254	; 0xfe
 8009bd4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009be8:	2201      	movs	r2, #1
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 fd90 	bl	800b712 <USBH_CtlReq>
 8009bf2:	4603      	mov	r3, r0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4a09      	ldr	r2, [pc, #36]	; (8009c38 <USBH_MSC_BOT_Init+0x3c>)
 8009c12:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4a09      	ldr	r2, [pc, #36]	; (8009c3c <USBH_MSC_BOT_Init+0x40>)
 8009c18:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	43425355 	.word	0x43425355
 8009c3c:	20304050 	.word	0x20304050

08009c40 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009c50:	2301      	movs	r3, #1
 8009c52:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009c54:	2301      	movs	r3, #1
 8009c56:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c70:	3b01      	subs	r3, #1
 8009c72:	2b0a      	cmp	r3, #10
 8009c74:	f200 81a1 	bhi.w	8009fba <USBH_MSC_BOT_Process+0x37a>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <USBH_MSC_BOT_Process+0x40>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009cad 	.word	0x08009cad
 8009c84:	08009cd7 	.word	0x08009cd7
 8009c88:	08009d41 	.word	0x08009d41
 8009c8c:	08009d5f 	.word	0x08009d5f
 8009c90:	08009de3 	.word	0x08009de3
 8009c94:	08009e07 	.word	0x08009e07
 8009c98:	08009ea1 	.word	0x08009ea1
 8009c9c:	08009ebd 	.word	0x08009ebd
 8009ca0:	08009f0f 	.word	0x08009f0f
 8009ca4:	08009f3f 	.word	0x08009f3f
 8009ca8:	08009fa1 	.word	0x08009fa1
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	78fa      	ldrb	r2, [r7, #3]
 8009cb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	795a      	ldrb	r2, [r3, #5]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	221f      	movs	r2, #31
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 ff2f 	bl	800bb32 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009cd4:	e180      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	795b      	ldrb	r3, [r3, #5]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f004 fddb 	bl	800e898 <USBH_LL_GetURBState>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009ce6:	7d3b      	ldrb	r3, [r7, #20]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d118      	bne.n	8009d1e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00f      	beq.n	8009d14 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009cfa:	b25b      	sxtb	r3, r3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da04      	bge.n	8009d0a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2203      	movs	r2, #3
 8009d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d08:	e159      	b.n	8009fbe <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2205      	movs	r2, #5
 8009d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d12:	e154      	b.n	8009fbe <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	2207      	movs	r2, #7
 8009d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d1c:	e14f      	b.n	8009fbe <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d1e:	7d3b      	ldrb	r3, [r7, #20]
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d104      	bne.n	8009d2e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d2c:	e147      	b.n	8009fbe <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8009d2e:	7d3b      	ldrb	r3, [r7, #20]
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	f040 8144 	bne.w	8009fbe <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	220a      	movs	r2, #10
 8009d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d3e:	e13e      	b.n	8009fbe <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	895a      	ldrh	r2, [r3, #10]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	791b      	ldrb	r3, [r3, #4]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 ff14 	bl	800bb7c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2204      	movs	r2, #4
 8009d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009d5c:	e13c      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	791b      	ldrb	r3, [r3, #4]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f004 fd97 	bl	800e898 <USBH_LL_GetURBState>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009d6e:	7d3b      	ldrb	r3, [r7, #20]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d12d      	bne.n	8009dd0 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	8952      	ldrh	r2, [r2, #10]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d910      	bls.n	8009da2 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	8952      	ldrh	r2, [r2, #10]
 8009d8a:	441a      	add	r2, r3
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	8952      	ldrh	r2, [r2, #10]
 8009d9a:	1a9a      	subs	r2, r3, r2
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009da0:	e002      	b.n	8009da8 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2200      	movs	r2, #0
 8009da6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	895a      	ldrh	r2, [r3, #10]
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	791b      	ldrb	r3, [r3, #4]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 fedc 	bl	800bb7c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009dc4:	e0fd      	b.n	8009fc2 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2207      	movs	r2, #7
 8009dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dce:	e0f8      	b.n	8009fc2 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8009dd0:	7d3b      	ldrb	r3, [r7, #20]
 8009dd2:	2b05      	cmp	r3, #5
 8009dd4:	f040 80f5 	bne.w	8009fc2 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2209      	movs	r2, #9
 8009ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009de0:	e0ef      	b.n	8009fc2 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	891a      	ldrh	r2, [r3, #8]
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	7958      	ldrb	r0, [r3, #5]
 8009df0:	2301      	movs	r3, #1
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4603      	mov	r3, r0
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 fe9b 	bl	800bb32 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	2206      	movs	r2, #6
 8009e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e04:	e0e8      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	795b      	ldrb	r3, [r3, #5]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f004 fd43 	bl	800e898 <USBH_LL_GetURBState>
 8009e12:	4603      	mov	r3, r0
 8009e14:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009e16:	7d3b      	ldrb	r3, [r7, #20]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d130      	bne.n	8009e7e <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	8912      	ldrh	r2, [r2, #8]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d910      	bls.n	8009e4a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	8912      	ldrh	r2, [r2, #8]
 8009e32:	441a      	add	r2, r3
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	8912      	ldrh	r2, [r2, #8]
 8009e42:	1a9a      	subs	r2, r3, r2
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e48:	e002      	b.n	8009e50 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00d      	beq.n	8009e74 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	891a      	ldrh	r2, [r3, #8]
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	7958      	ldrb	r0, [r3, #5]
 8009e66:	2301      	movs	r3, #1
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 fe60 	bl	800bb32 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009e72:	e0a8      	b.n	8009fc6 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2207      	movs	r2, #7
 8009e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e7c:	e0a3      	b.n	8009fc6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e7e:	7d3b      	ldrb	r3, [r7, #20]
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d104      	bne.n	8009e8e <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2205      	movs	r2, #5
 8009e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e8c:	e09b      	b.n	8009fc6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009e8e:	7d3b      	ldrb	r3, [r7, #20]
 8009e90:	2b05      	cmp	r3, #5
 8009e92:	f040 8098 	bne.w	8009fc6 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	220a      	movs	r2, #10
 8009e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e9e:	e092      	b.n	8009fc6 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	791b      	ldrb	r3, [r3, #4]
 8009eaa:	220d      	movs	r2, #13
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 fe65 	bl	800bb7c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2208      	movs	r2, #8
 8009eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009eba:	e08d      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	791b      	ldrb	r3, [r3, #4]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f004 fce8 	bl	800e898 <USBH_LL_GetURBState>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009ecc:	7d3b      	ldrb	r3, [r7, #20]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d115      	bne.n	8009efe <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f8aa 	bl	800a03c <USBH_MSC_DecodeCSW>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009eec:	7d7b      	ldrb	r3, [r7, #21]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d102      	bne.n	8009ef8 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009ef6:	e068      	b.n	8009fca <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009ef8:	2302      	movs	r3, #2
 8009efa:	75fb      	strb	r3, [r7, #23]
      break;
 8009efc:	e065      	b.n	8009fca <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8009efe:	7d3b      	ldrb	r3, [r7, #20]
 8009f00:	2b05      	cmp	r3, #5
 8009f02:	d162      	bne.n	8009fca <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2209      	movs	r2, #9
 8009f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f0c:	e05d      	b.n	8009fca <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009f0e:	78fb      	ldrb	r3, [r7, #3]
 8009f10:	2200      	movs	r2, #0
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f865 	bl	8009fe4 <USBH_MSC_BOT_Abort>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009f1e:	7dbb      	ldrb	r3, [r7, #22]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2207      	movs	r2, #7
 8009f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009f2c:	e04f      	b.n	8009fce <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009f2e:	7dbb      	ldrb	r3, [r7, #22]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d14c      	bne.n	8009fce <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	220b      	movs	r2, #11
 8009f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f3c:	e047      	b.n	8009fce <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009f3e:	78fb      	ldrb	r3, [r7, #3]
 8009f40:	2201      	movs	r2, #1
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f84d 	bl	8009fe4 <USBH_MSC_BOT_Abort>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009f4e:	7dbb      	ldrb	r3, [r7, #22]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d11d      	bne.n	8009f90 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	795b      	ldrb	r3, [r3, #5]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f004 fcf0 	bl	800e940 <USBH_LL_GetToggle>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	7959      	ldrb	r1, [r3, #5]
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	f1c3 0301 	rsb	r3, r3, #1
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	461a      	mov	r2, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f004 fcb1 	bl	800e8da <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	791b      	ldrb	r3, [r3, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f004 fcaa 	bl	800e8da <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2209      	movs	r2, #9
 8009f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009f8e:	e020      	b.n	8009fd2 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009f90:	7dbb      	ldrb	r3, [r7, #22]
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d11d      	bne.n	8009fd2 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	220b      	movs	r2, #11
 8009f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f9e:	e018      	b.n	8009fd2 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff fdf0 	bl	8009b86 <USBH_MSC_BOT_REQ_Reset>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d112      	bne.n	8009fd6 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009fb8:	e00d      	b.n	8009fd6 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8009fba:	bf00      	nop
 8009fbc:	e00c      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009fbe:	bf00      	nop
 8009fc0:	e00a      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009fc2:	bf00      	nop
 8009fc4:	e008      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009fc6:	bf00      	nop
 8009fc8:	e006      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009fca:	bf00      	nop
 8009fcc:	e004      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009fce:	bf00      	nop
 8009fd0:	e002      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009fd2:	bf00      	nop
 8009fd4:	e000      	b.n	8009fd8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009fd6:	bf00      	nop
  }
  return status;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop

08009fe4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a002:	78bb      	ldrb	r3, [r7, #2]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <USBH_MSC_BOT_Abort+0x2a>
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d009      	beq.n	800a020 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a00c:	e011      	b.n	800a032 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	79db      	ldrb	r3, [r3, #7]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 f99c 	bl	800b352 <USBH_ClrFeature>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]
      break;
 800a01e:	e008      	b.n	800a032 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	799b      	ldrb	r3, [r3, #6]
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 f993 	bl	800b352 <USBH_ClrFeature>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73fb      	strb	r3, [r7, #15]
      break;
 800a030:	bf00      	nop
  }
  return status;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a04e:	2301      	movs	r3, #1
 800a050:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	791b      	ldrb	r3, [r3, #4]
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f004 fb8b 	bl	800e774 <USBH_LL_GetLastXferSize>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b0d      	cmp	r3, #13
 800a062:	d002      	beq.n	800a06a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a064:	2302      	movs	r3, #2
 800a066:	73fb      	strb	r3, [r7, #15]
 800a068:	e024      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a06e:	4a14      	ldr	r2, [pc, #80]	; (800a0c0 <USBH_MSC_DecodeCSW+0x84>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d11d      	bne.n	800a0b0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d119      	bne.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a086:	2b00      	cmp	r3, #0
 800a088:	d102      	bne.n	800a090 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
 800a08e:	e011      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a096:	2b01      	cmp	r3, #1
 800a098:	d102      	bne.n	800a0a0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a09a:	2301      	movs	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]
 800a09e:	e009      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d104      	bne.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	73fb      	strb	r3, [r7, #15]
 800a0ae:	e001      	b.n	800a0b4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	53425355 	.word	0x53425355

0800a0c4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d002      	beq.n	800a0ee <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d021      	beq.n	800a130 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a0ec:	e028      	b.n	800a140 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	220a      	movs	r2, #10
 800a100:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	3363      	adds	r3, #99	; 0x63
 800a108:	2210      	movs	r2, #16
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f004 fcc6 	bl	800ea9e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2202      	movs	r2, #2
 800a126:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
      break;
 800a12e:	e007      	b.n	800a140 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fd83 	bl	8009c40 <USBH_MSC_BOT_Process>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
      break;
 800a13e:	bf00      	nop
  }

  return error;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	460b      	mov	r3, r1
 800a154:	607a      	str	r2, [r7, #4]
 800a156:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a158:	2301      	movs	r3, #1
 800a15a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d002      	beq.n	800a176 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a170:	2b02      	cmp	r3, #2
 800a172:	d027      	beq.n	800a1c4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a174:	e05f      	b.n	800a236 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2208      	movs	r2, #8
 800a17a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2280      	movs	r2, #128	; 0x80
 800a180:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	220a      	movs	r2, #10
 800a188:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	3363      	adds	r3, #99	; 0x63
 800a190:	2210      	movs	r2, #16
 800a192:	2100      	movs	r1, #0
 800a194:	4618      	mov	r0, r3
 800a196:	f004 fc82 	bl	800ea9e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2225      	movs	r2, #37	; 0x25
 800a19e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f103 0210 	add.w	r2, r3, #16
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c2:	e038      	b.n	800a236 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff fd39 	bl	8009c40 <USBH_MSC_BOT_Process>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d12d      	bne.n	800a234 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1de:	3303      	adds	r3, #3
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ea:	3302      	adds	r3, #2
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	021b      	lsls	r3, r3, #8
 800a1f0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1fe:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	061b      	lsls	r3, r3, #24
 800a20a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a216:	3307      	adds	r3, #7
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a222:	3306      	adds	r3, #6
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	b29b      	uxth	r3, r3
 800a228:	021b      	lsls	r3, r3, #8
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4313      	orrs	r3, r2
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	809a      	strh	r2, [r3, #4]
      break;
 800a234:	bf00      	nop
  }

  return error;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	460b      	mov	r3, r1
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a24e:	2302      	movs	r3, #2
 800a250:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a262:	2b01      	cmp	r3, #1
 800a264:	d002      	beq.n	800a26c <USBH_MSC_SCSI_Inquiry+0x2c>
 800a266:	2b02      	cmp	r3, #2
 800a268:	d03d      	beq.n	800a2e6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a26a:	e089      	b.n	800a380 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2224      	movs	r2, #36	; 0x24
 800a270:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2280      	movs	r2, #128	; 0x80
 800a276:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	220a      	movs	r2, #10
 800a27e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	3363      	adds	r3, #99	; 0x63
 800a286:	220a      	movs	r2, #10
 800a288:	2100      	movs	r1, #0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f004 fc07 	bl	800ea9e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2212      	movs	r2, #18
 800a294:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	015b      	lsls	r3, r3, #5
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2224      	movs	r2, #36	; 0x24
 800a2b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f103 0210 	add.w	r2, r3, #16
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e4:	e04c      	b.n	800a380 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fca8 	bl	8009c40 <USBH_MSC_BOT_Process>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d141      	bne.n	800a37e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a2fa:	2222      	movs	r2, #34	; 0x22
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f004 fbcd 	bl	800ea9e <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 031f 	and.w	r3, r3, #31
 800a310:	b2da      	uxtb	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	b2da      	uxtb	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a32c:	3301      	adds	r3, #1
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	b25b      	sxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	da03      	bge.n	800a33e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	709a      	strb	r2, [r3, #2]
 800a33c:	e002      	b.n	800a344 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	1cd8      	adds	r0, r3, #3
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a34e:	3308      	adds	r3, #8
 800a350:	2208      	movs	r2, #8
 800a352:	4619      	mov	r1, r3
 800a354:	f004 fb98 	bl	800ea88 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f103 000c 	add.w	r0, r3, #12
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a364:	3310      	adds	r3, #16
 800a366:	2210      	movs	r2, #16
 800a368:	4619      	mov	r1, r3
 800a36a:	f004 fb8d 	bl	800ea88 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	331d      	adds	r3, #29
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a378:	3220      	adds	r2, #32
 800a37a:	6812      	ldr	r2, [r2, #0]
 800a37c:	601a      	str	r2, [r3, #0]
      break;
 800a37e:	bf00      	nop
  }

  return error;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	460b      	mov	r3, r1
 800a394:	607a      	str	r2, [r7, #4]
 800a396:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a398:	2302      	movs	r3, #2
 800a39a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d002      	beq.n	800a3b6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d03d      	beq.n	800a430 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a3b4:	e05d      	b.n	800a472 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	220e      	movs	r2, #14
 800a3ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2280      	movs	r2, #128	; 0x80
 800a3c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	220a      	movs	r2, #10
 800a3c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	3363      	adds	r3, #99	; 0x63
 800a3d0:	2210      	movs	r2, #16
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f004 fb62 	bl	800ea9e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2203      	movs	r2, #3
 800a3de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	015b      	lsls	r3, r3, #5
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	220e      	movs	r2, #14
 800a402:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2202      	movs	r2, #2
 800a41a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f103 0210 	add.w	r2, r3, #16
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a42a:	2301      	movs	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]
      break;
 800a42e:	e020      	b.n	800a472 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a430:	7afb      	ldrb	r3, [r7, #11]
 800a432:	4619      	mov	r1, r3
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f7ff fc03 	bl	8009c40 <USBH_MSC_BOT_Process>
 800a43a:	4603      	mov	r3, r0
 800a43c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d115      	bne.n	800a470 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a44a:	3302      	adds	r3, #2
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	b2da      	uxtb	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a45e:	7b1a      	ldrb	r2, [r3, #12]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a46a:	7b5a      	ldrb	r2, [r3, #13]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	709a      	strb	r2, [r3, #2]
      break;
 800a470:	bf00      	nop
  }

  return error;
 800a472:	7dfb      	ldrb	r3, [r7, #23]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	607a      	str	r2, [r7, #4]
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	460b      	mov	r3, r1
 800a48a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a48c:	2302      	movs	r3, #2
 800a48e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d002      	beq.n	800a4aa <USBH_MSC_SCSI_Write+0x2e>
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d047      	beq.n	800a538 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a4a8:	e04e      	b.n	800a548 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	fb03 f202 	mul.w	r2, r3, r2
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	220a      	movs	r2, #10
 800a4c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	3363      	adds	r3, #99	; 0x63
 800a4d0:	2210      	movs	r2, #16
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f004 fae2 	bl	800ea9e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	222a      	movs	r2, #42	; 0x2a
 800a4de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a4e2:	79fa      	ldrb	r2, [r7, #7]
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a4ea:	79ba      	ldrb	r2, [r7, #6]
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a4f2:	797a      	ldrb	r2, [r7, #5]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a4fa:	1d3b      	adds	r3, r7, #4
 800a4fc:	781a      	ldrb	r2, [r3, #0]
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a504:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a50e:	f107 0320 	add.w	r3, r7, #32
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2202      	movs	r2, #2
 800a526:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a532:	2301      	movs	r3, #1
 800a534:	75fb      	strb	r3, [r7, #23]
      break;
 800a536:	e007      	b.n	800a548 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fb7f 	bl	8009c40 <USBH_MSC_BOT_Process>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
      break;
 800a546:	bf00      	nop
  }

  return error;
 800a548:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b086      	sub	sp, #24
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
 800a55e:	460b      	mov	r3, r1
 800a560:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a562:	2302      	movs	r3, #2
 800a564:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a576:	2b01      	cmp	r3, #1
 800a578:	d002      	beq.n	800a580 <USBH_MSC_SCSI_Read+0x2e>
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d047      	beq.n	800a60e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a57e:	e04e      	b.n	800a61e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a586:	461a      	mov	r2, r3
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	fb03 f202 	mul.w	r2, r3, r2
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2280      	movs	r2, #128	; 0x80
 800a596:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	220a      	movs	r2, #10
 800a59e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3363      	adds	r3, #99	; 0x63
 800a5a6:	2210      	movs	r2, #16
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f004 fa77 	bl	800ea9e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2228      	movs	r2, #40	; 0x28
 800a5b4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a5b8:	79fa      	ldrb	r2, [r7, #7]
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a5c0:	79ba      	ldrb	r2, [r7, #6]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a5c8:	797a      	ldrb	r2, [r7, #5]
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a5d0:	1d3b      	adds	r3, r7, #4
 800a5d2:	781a      	ldrb	r2, [r3, #0]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a5da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a5e4:	f107 0320 	add.w	r3, r7, #32
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a608:	2301      	movs	r3, #1
 800a60a:	75fb      	strb	r3, [r7, #23]
      break;
 800a60c:	e007      	b.n	800a61e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a60e:	7afb      	ldrb	r3, [r7, #11]
 800a610:	4619      	mov	r1, r3
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff fb14 	bl	8009c40 <USBH_MSC_BOT_Process>
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]
      break;
 800a61c:	bf00      	nop
  }

  return error;
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a63c:	2302      	movs	r3, #2
 800a63e:	e029      	b.n	800a694 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	79fa      	ldrb	r2, [r7, #7]
 800a644:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f81f 	bl	800a69c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f003 ffbf 	bl	800e610 <USBH_LL_Init>

  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	e009      	b.n	800a6c2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	33e0      	adds	r3, #224	; 0xe0
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b0e      	cmp	r3, #14
 800a6c6:	d9f2      	bls.n	800a6ae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e009      	b.n	800a6e2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6e8:	d3f1      	bcc.n	800a6ce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2240      	movs	r2, #64	; 0x40
 800a70e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d016      	beq.n	800a786 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10e      	bne.n	800a780 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a768:	1c59      	adds	r1, r3, #1
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	33de      	adds	r3, #222	; 0xde
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]
 800a77e:	e004      	b.n	800a78a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a780:	2302      	movs	r3, #2
 800a782:	73fb      	strb	r3, [r7, #15]
 800a784:	e001      	b.n	800a78a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a786:	2302      	movs	r3, #2
 800a788:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a7ae:	78fa      	ldrb	r2, [r7, #3]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d204      	bcs.n	800a7be <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	78fa      	ldrb	r2, [r7, #3]
 800a7b8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a7bc:	e001      	b.n	800a7c2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a7be:	2302      	movs	r3, #2
 800a7c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	4608      	mov	r0, r1
 800a7da:	4611      	mov	r1, r2
 800a7dc:	461a      	mov	r2, r3
 800a7de:	4603      	mov	r3, r0
 800a7e0:	70fb      	strb	r3, [r7, #3]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70bb      	strb	r3, [r7, #2]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a7f8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a7fa:	e025      	b.n	800a848 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	221a      	movs	r2, #26
 800a800:	fb02 f303 	mul.w	r3, r2, r3
 800a804:	3308      	adds	r3, #8
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	3302      	adds	r3, #2
 800a80c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	795b      	ldrb	r3, [r3, #5]
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	429a      	cmp	r2, r3
 800a816:	d002      	beq.n	800a81e <USBH_FindInterface+0x4e>
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	2bff      	cmp	r3, #255	; 0xff
 800a81c:	d111      	bne.n	800a842 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a822:	78ba      	ldrb	r2, [r7, #2]
 800a824:	429a      	cmp	r2, r3
 800a826:	d002      	beq.n	800a82e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a828:	78bb      	ldrb	r3, [r7, #2]
 800a82a:	2bff      	cmp	r3, #255	; 0xff
 800a82c:	d109      	bne.n	800a842 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a832:	787a      	ldrb	r2, [r7, #1]
 800a834:	429a      	cmp	r2, r3
 800a836:	d002      	beq.n	800a83e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a838:	787b      	ldrb	r3, [r7, #1]
 800a83a:	2bff      	cmp	r3, #255	; 0xff
 800a83c:	d101      	bne.n	800a842 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	e006      	b.n	800a850 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	3301      	adds	r3, #1
 800a846:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d9d6      	bls.n	800a7fc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a84e:	23ff      	movs	r3, #255	; 0xff
}
 800a850:	4618      	mov	r0, r3
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f003 ff0f 	bl	800e688 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a86a:	2101      	movs	r1, #1
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f004 f826 	bl	800e8be <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af04      	add	r7, sp, #16
 800a882:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a884:	2302      	movs	r3, #2
 800a886:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b01      	cmp	r3, #1
 800a896:	d102      	bne.n	800a89e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2203      	movs	r2, #3
 800a89c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b0b      	cmp	r3, #11
 800a8a6:	f200 81b3 	bhi.w	800ac10 <USBH_Process+0x394>
 800a8aa:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <USBH_Process+0x34>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a8e1 	.word	0x0800a8e1
 800a8b4:	0800a913 	.word	0x0800a913
 800a8b8:	0800a97b 	.word	0x0800a97b
 800a8bc:	0800abab 	.word	0x0800abab
 800a8c0:	0800ac11 	.word	0x0800ac11
 800a8c4:	0800aa1f 	.word	0x0800aa1f
 800a8c8:	0800ab51 	.word	0x0800ab51
 800a8cc:	0800aa55 	.word	0x0800aa55
 800a8d0:	0800aa75 	.word	0x0800aa75
 800a8d4:	0800aa95 	.word	0x0800aa95
 800a8d8:	0800aac3 	.word	0x0800aac3
 800a8dc:	0800ab93 	.word	0x0800ab93
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 8193 	beq.w	800ac14 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a8f4:	20c8      	movs	r0, #200	; 0xc8
 800a8f6:	f004 f856 	bl	800e9a6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f003 ff1f 	bl	800e73e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a910:	e180      	b.n	800ac14 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d107      	bne.n	800a92c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a92a:	e182      	b.n	800ac32 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a936:	d914      	bls.n	800a962 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a93e:	3301      	adds	r3, #1
 800a940:	b2da      	uxtb	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d903      	bls.n	800a95a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	220d      	movs	r2, #13
 800a956:	701a      	strb	r2, [r3, #0]
      break;
 800a958:	e16b      	b.n	800ac32 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	701a      	strb	r2, [r3, #0]
      break;
 800a960:	e167      	b.n	800ac32 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a968:	f103 020a 	add.w	r2, r3, #10
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a972:	200a      	movs	r0, #10
 800a974:	f004 f817 	bl	800e9a6 <USBH_Delay>
      break;
 800a978:	e15b      	b.n	800ac32 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a98a:	2104      	movs	r1, #4
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a990:	2064      	movs	r0, #100	; 0x64
 800a992:	f004 f808 	bl	800e9a6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f003 feac 	bl	800e6f4 <USBH_LL_GetSpeed>
 800a99c:	4603      	mov	r3, r0
 800a99e:	461a      	mov	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2205      	movs	r2, #5
 800a9aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 f931 	bl	800bc16 <USBH_AllocPipe>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a9bc:	2180      	movs	r1, #128	; 0x80
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 f929 	bl	800bc16 <USBH_AllocPipe>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7919      	ldrb	r1, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a9e0:	b292      	uxth	r2, r2
 800a9e2:	9202      	str	r2, [sp, #8]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	9201      	str	r2, [sp, #4]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2280      	movs	r2, #128	; 0x80
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 f8e2 	bl	800bbb8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7959      	ldrb	r1, [r3, #5]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aa08:	b292      	uxth	r2, r2
 800aa0a:	9202      	str	r2, [sp, #8]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	9201      	str	r2, [sp, #4]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	4603      	mov	r3, r0
 800aa14:	2200      	movs	r2, #0
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 f8ce 	bl	800bbb8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa1c:	e109      	b.n	800ac32 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f90c 	bl	800ac3c <USBH_HandleEnum>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f040 80f3 	bne.w	800ac18 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d103      	bne.n	800aa4c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2208      	movs	r2, #8
 800aa48:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aa4a:	e0e5      	b.n	800ac18 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2207      	movs	r2, #7
 800aa50:	701a      	strb	r2, [r3, #0]
      break;
 800aa52:	e0e1      	b.n	800ac18 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f000 80de 	beq.w	800ac1c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa66:	2101      	movs	r1, #1
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2208      	movs	r2, #8
 800aa70:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800aa72:	e0d3      	b.n	800ac1c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fc20 	bl	800b2c4 <USBH_SetCfg>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f040 80ca 	bne.w	800ac20 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2209      	movs	r2, #9
 800aa90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa92:	e0c5      	b.n	800ac20 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fc30 	bl	800b30a <USBH_SetFeature>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f040 80b9 	bne.w	800ac24 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	220a      	movs	r2, #10
 800aab6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aab8:	e0b4      	b.n	800ac24 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	220a      	movs	r2, #10
 800aabe:	701a      	strb	r2, [r3, #0]
      break;
 800aac0:	e0b0      	b.n	800ac24 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 80ad 	beq.w	800ac28 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]
 800aada:	e016      	b.n	800ab0a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aadc:	7bfa      	ldrb	r2, [r7, #15]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	32de      	adds	r2, #222	; 0xde
 800aae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae6:	791a      	ldrb	r2, [r3, #4]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d108      	bne.n	800ab04 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aaf2:	7bfa      	ldrb	r2, [r7, #15]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	32de      	adds	r2, #222	; 0xde
 800aaf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ab02:	e005      	b.n	800ab10 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	3301      	adds	r3, #1
 800ab08:	73fb      	strb	r3, [r7, #15]
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d0e5      	beq.n	800aadc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d016      	beq.n	800ab48 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	4798      	blx	r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d109      	bne.n	800ab40 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2206      	movs	r2, #6
 800ab30:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab38:	2103      	movs	r1, #3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab3e:	e073      	b.n	800ac28 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	220d      	movs	r2, #13
 800ab44:	701a      	strb	r2, [r3, #0]
      break;
 800ab46:	e06f      	b.n	800ac28 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	220d      	movs	r2, #13
 800ab4c:	701a      	strb	r2, [r3, #0]
      break;
 800ab4e:	e06b      	b.n	800ac28 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d017      	beq.n	800ab8a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d103      	bne.n	800ab7a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	220b      	movs	r2, #11
 800ab76:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab78:	e058      	b.n	800ac2c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d154      	bne.n	800ac2c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	220d      	movs	r2, #13
 800ab86:	701a      	strb	r2, [r3, #0]
      break;
 800ab88:	e050      	b.n	800ac2c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	220d      	movs	r2, #13
 800ab8e:	701a      	strb	r2, [r3, #0]
      break;
 800ab90:	e04c      	b.n	800ac2c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d049      	beq.n	800ac30 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	4798      	blx	r3
      }
      break;
 800aba8:	e042      	b.n	800ac30 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff fd72 	bl	800a69c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d009      	beq.n	800abd6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abe6:	2105      	movs	r1, #5
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d107      	bne.n	800ac08 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff fe2b 	bl	800a85c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac06:	e014      	b.n	800ac32 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f003 fd3d 	bl	800e688 <USBH_LL_Start>
      break;
 800ac0e:	e010      	b.n	800ac32 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ac10:	bf00      	nop
 800ac12:	e00e      	b.n	800ac32 <USBH_Process+0x3b6>
      break;
 800ac14:	bf00      	nop
 800ac16:	e00c      	b.n	800ac32 <USBH_Process+0x3b6>
      break;
 800ac18:	bf00      	nop
 800ac1a:	e00a      	b.n	800ac32 <USBH_Process+0x3b6>
    break;
 800ac1c:	bf00      	nop
 800ac1e:	e008      	b.n	800ac32 <USBH_Process+0x3b6>
      break;
 800ac20:	bf00      	nop
 800ac22:	e006      	b.n	800ac32 <USBH_Process+0x3b6>
      break;
 800ac24:	bf00      	nop
 800ac26:	e004      	b.n	800ac32 <USBH_Process+0x3b6>
      break;
 800ac28:	bf00      	nop
 800ac2a:	e002      	b.n	800ac32 <USBH_Process+0x3b6>
      break;
 800ac2c:	bf00      	nop
 800ac2e:	e000      	b.n	800ac32 <USBH_Process+0x3b6>
      break;
 800ac30:	bf00      	nop
  }
  return USBH_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af04      	add	r7, sp, #16
 800ac42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac44:	2301      	movs	r3, #1
 800ac46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	785b      	ldrb	r3, [r3, #1]
 800ac50:	2b07      	cmp	r3, #7
 800ac52:	f200 81c1 	bhi.w	800afd8 <USBH_HandleEnum+0x39c>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <USBH_HandleEnum+0x20>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac7d 	.word	0x0800ac7d
 800ac60:	0800ad3b 	.word	0x0800ad3b
 800ac64:	0800ada5 	.word	0x0800ada5
 800ac68:	0800ae33 	.word	0x0800ae33
 800ac6c:	0800ae9d 	.word	0x0800ae9d
 800ac70:	0800af0d 	.word	0x0800af0d
 800ac74:	0800af53 	.word	0x0800af53
 800ac78:	0800af99 	.word	0x0800af99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ac7c:	2108      	movs	r1, #8
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fa50 	bl	800b124 <USBH_Get_DevDesc>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d130      	bne.n	800acf0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	7919      	ldrb	r1, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800acb2:	b292      	uxth	r2, r2
 800acb4:	9202      	str	r2, [sp, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	9201      	str	r2, [sp, #4]
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	4603      	mov	r3, r0
 800acbe:	2280      	movs	r2, #128	; 0x80
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 ff79 	bl	800bbb8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	7959      	ldrb	r1, [r3, #5]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800acda:	b292      	uxth	r2, r2
 800acdc:	9202      	str	r2, [sp, #8]
 800acde:	2200      	movs	r2, #0
 800ace0:	9201      	str	r2, [sp, #4]
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	4603      	mov	r3, r0
 800ace6:	2200      	movs	r2, #0
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 ff65 	bl	800bbb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800acee:	e175      	b.n	800afdc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	f040 8172 	bne.w	800afdc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acfe:	3301      	adds	r3, #1
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d903      	bls.n	800ad1a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	220d      	movs	r2, #13
 800ad16:	701a      	strb	r2, [r3, #0]
      break;
 800ad18:	e160      	b.n	800afdc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	795b      	ldrb	r3, [r3, #5]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 ff99 	bl	800bc58 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	791b      	ldrb	r3, [r3, #4]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 ff93 	bl	800bc58 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	701a      	strb	r2, [r3, #0]
      break;
 800ad38:	e150      	b.n	800afdc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ad3a:	2112      	movs	r1, #18
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f9f1 	bl	800b124 <USBH_Get_DevDesc>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad52:	e145      	b.n	800afe0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	f040 8142 	bne.w	800afe0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad62:	3301      	adds	r3, #1
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d903      	bls.n	800ad7e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	220d      	movs	r2, #13
 800ad7a:	701a      	strb	r2, [r3, #0]
      break;
 800ad7c:	e130      	b.n	800afe0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	795b      	ldrb	r3, [r3, #5]
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 ff67 	bl	800bc58 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	791b      	ldrb	r3, [r3, #4]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 ff61 	bl	800bc58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	701a      	strb	r2, [r3, #0]
      break;
 800ada2:	e11d      	b.n	800afe0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ada4:	2101      	movs	r1, #1
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fa68 	bl	800b27c <USBH_SetAddress>
 800adac:	4603      	mov	r3, r0
 800adae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d132      	bne.n	800ae1c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800adb6:	2002      	movs	r0, #2
 800adb8:	f003 fdf5 	bl	800e9a6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2203      	movs	r2, #3
 800adc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	7919      	ldrb	r1, [r3, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800adde:	b292      	uxth	r2, r2
 800ade0:	9202      	str	r2, [sp, #8]
 800ade2:	2200      	movs	r2, #0
 800ade4:	9201      	str	r2, [sp, #4]
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	4603      	mov	r3, r0
 800adea:	2280      	movs	r2, #128	; 0x80
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fee3 	bl	800bbb8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	7959      	ldrb	r1, [r3, #5]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae06:	b292      	uxth	r2, r2
 800ae08:	9202      	str	r2, [sp, #8]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	9201      	str	r2, [sp, #4]
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	4603      	mov	r3, r0
 800ae12:	2200      	movs	r2, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fecf 	bl	800bbb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ae1a:	e0e3      	b.n	800afe4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	f040 80e0 	bne.w	800afe4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	220d      	movs	r2, #13
 800ae28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	705a      	strb	r2, [r3, #1]
      break;
 800ae30:	e0d8      	b.n	800afe4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ae32:	2109      	movs	r1, #9
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f99d 	bl	800b174 <USBH_Get_CfgDesc>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2204      	movs	r2, #4
 800ae48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae4a:	e0cd      	b.n	800afe8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	f040 80ca 	bne.w	800afe8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d903      	bls.n	800ae76 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	220d      	movs	r2, #13
 800ae72:	701a      	strb	r2, [r3, #0]
      break;
 800ae74:	e0b8      	b.n	800afe8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	795b      	ldrb	r3, [r3, #5]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 feeb 	bl	800bc58 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	791b      	ldrb	r3, [r3, #4]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fee5 	bl	800bc58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	701a      	strb	r2, [r3, #0]
      break;
 800ae9a:	e0a5      	b.n	800afe8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f965 	bl	800b174 <USBH_Get_CfgDesc>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d103      	bne.n	800aebc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aeba:	e097      	b.n	800afec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	f040 8094 	bne.w	800afec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aeca:	3301      	adds	r3, #1
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d903      	bls.n	800aee6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	220d      	movs	r2, #13
 800aee2:	701a      	strb	r2, [r3, #0]
      break;
 800aee4:	e082      	b.n	800afec <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	795b      	ldrb	r3, [r3, #5]
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 feb3 	bl	800bc58 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	791b      	ldrb	r3, [r3, #4]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fead 	bl	800bc58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	701a      	strb	r2, [r3, #0]
      break;
 800af0a:	e06f      	b.n	800afec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800af12:	2b00      	cmp	r3, #0
 800af14:	d019      	beq.n	800af4a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800af22:	23ff      	movs	r3, #255	; 0xff
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f949 	bl	800b1bc <USBH_Get_StringDesc>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d103      	bne.n	800af3c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2206      	movs	r2, #6
 800af38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800af3a:	e059      	b.n	800aff0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d156      	bne.n	800aff0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2206      	movs	r2, #6
 800af46:	705a      	strb	r2, [r3, #1]
      break;
 800af48:	e052      	b.n	800aff0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2206      	movs	r2, #6
 800af4e:	705a      	strb	r2, [r3, #1]
      break;
 800af50:	e04e      	b.n	800aff0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d019      	beq.n	800af90 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af68:	23ff      	movs	r3, #255	; 0xff
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f926 	bl	800b1bc <USBH_Get_StringDesc>
 800af70:	4603      	mov	r3, r0
 800af72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d103      	bne.n	800af82 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2207      	movs	r2, #7
 800af7e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800af80:	e038      	b.n	800aff4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	2b03      	cmp	r3, #3
 800af86:	d135      	bne.n	800aff4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2207      	movs	r2, #7
 800af8c:	705a      	strb	r2, [r3, #1]
      break;
 800af8e:	e031      	b.n	800aff4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2207      	movs	r2, #7
 800af94:	705a      	strb	r2, [r3, #1]
      break;
 800af96:	e02d      	b.n	800aff4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d017      	beq.n	800afd2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800afae:	23ff      	movs	r3, #255	; 0xff
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f903 	bl	800b1bc <USBH_Get_StringDesc>
 800afb6:	4603      	mov	r3, r0
 800afb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800afc4:	e018      	b.n	800aff8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d115      	bne.n	800aff8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
      break;
 800afd0:	e012      	b.n	800aff8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]
      break;
 800afd6:	e00f      	b.n	800aff8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800afd8:	bf00      	nop
 800afda:	e00e      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800afdc:	bf00      	nop
 800afde:	e00c      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800afe0:	bf00      	nop
 800afe2:	e00a      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800afe4:	bf00      	nop
 800afe6:	e008      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800afe8:	bf00      	nop
 800afea:	e006      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800afec:	bf00      	nop
 800afee:	e004      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800aff0:	bf00      	nop
 800aff2:	e002      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800aff4:	bf00      	nop
 800aff6:	e000      	b.n	800affa <USBH_HandleEnum+0x3be>
      break;
 800aff8:	bf00      	nop
  }
  return Status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f804 	bl	800b046 <USBH_HandleSof>
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b0b      	cmp	r3, #11
 800b056:	d10a      	bne.n	800b06e <USBH_HandleSof+0x28>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d005      	beq.n	800b06e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	4798      	blx	r3
  }
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b076:	b480      	push	{r7}
 800b078:	b083      	sub	sp, #12
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b086:	bf00      	nop
}
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b0a2:	bf00      	nop
}
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f003 fade 	bl	800e6be <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	791b      	ldrb	r3, [r3, #4]
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fda5 	bl	800bc58 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	795b      	ldrb	r3, [r3, #5]
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fd9f 	bl	800bc58 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af02      	add	r7, sp, #8
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b136:	78fb      	ldrb	r3, [r7, #3]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	4613      	mov	r3, r2
 800b13e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b142:	2100      	movs	r1, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f864 	bl	800b212 <USBH_GetDescriptor>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	b292      	uxth	r2, r2
 800b164:	4619      	mov	r1, r3
 800b166:	f000 f918 	bl	800b39a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af02      	add	r7, sp, #8
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	331c      	adds	r3, #28
 800b184:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b186:	887b      	ldrh	r3, [r7, #2]
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b190:	2100      	movs	r1, #0
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f83d 	bl	800b212 <USBH_GetDescriptor>
 800b198:	4603      	mov	r3, r0
 800b19a:	72fb      	strb	r3, [r7, #11]
 800b19c:	7afb      	ldrb	r3, [r7, #11]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d107      	bne.n	800b1b2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b1a8:	887a      	ldrh	r2, [r7, #2]
 800b1aa:	68f9      	ldr	r1, [r7, #12]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 f964 	bl	800b47a <USBH_ParseCfgDesc>
  }

  return status;
 800b1b2:	7afb      	ldrb	r3, [r7, #11]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	607a      	str	r2, [r7, #4]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	72fb      	strb	r3, [r7, #11]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b1d8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b1e0:	893b      	ldrh	r3, [r7, #8]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 f812 	bl	800b212 <USBH_GetDescriptor>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	75fb      	strb	r3, [r7, #23]
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d107      	bne.n	800b208 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b1fe:	893a      	ldrh	r2, [r7, #8]
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fa37 	bl	800b676 <USBH_ParseStringDesc>
  }

  return status;
 800b208:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	607b      	str	r3, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	72fb      	strb	r3, [r7, #11]
 800b220:	4613      	mov	r3, r2
 800b222:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	789b      	ldrb	r3, [r3, #2]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d11c      	bne.n	800b266 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b232:	b2da      	uxtb	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2206      	movs	r2, #6
 800b23c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	893a      	ldrh	r2, [r7, #8]
 800b242:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b244:	893b      	ldrh	r3, [r7, #8]
 800b246:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b24e:	d104      	bne.n	800b25a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f240 4209 	movw	r2, #1033	; 0x409
 800b256:	829a      	strh	r2, [r3, #20]
 800b258:	e002      	b.n	800b260 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8b3a      	ldrh	r2, [r7, #24]
 800b264:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b266:	8b3b      	ldrh	r3, [r7, #24]
 800b268:	461a      	mov	r2, r3
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 fa50 	bl	800b712 <USBH_CtlReq>
 800b272:	4603      	mov	r3, r0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	789b      	ldrb	r3, [r3, #2]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d10f      	bne.n	800b2b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2205      	movs	r2, #5
 800b29a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b29c:	78fb      	ldrb	r3, [r7, #3]
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fa2c 	bl	800b712 <USBH_CtlReq>
 800b2ba:	4603      	mov	r3, r0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	789b      	ldrb	r3, [r3, #2]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d10e      	bne.n	800b2f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2209      	movs	r2, #9
 800b2e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	887a      	ldrh	r2, [r7, #2]
 800b2e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fa09 	bl	800b712 <USBH_CtlReq>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	789b      	ldrb	r3, [r3, #2]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d10f      	bne.n	800b33e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2203      	movs	r2, #3
 800b328:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b32a:	78fb      	ldrb	r3, [r7, #3]
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b33e:	2200      	movs	r2, #0
 800b340:	2100      	movs	r1, #0
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f9e5 	bl	800b712 <USBH_CtlReq>
 800b348:	4603      	mov	r3, r0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	460b      	mov	r3, r1
 800b35c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	789b      	ldrb	r3, [r3, #2]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d10f      	bne.n	800b386 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b378:	78fb      	ldrb	r3, [r7, #3]
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b386:	2200      	movs	r2, #0
 800b388:	2100      	movs	r1, #0
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f9c1 	bl	800b712 <USBH_CtlReq>
 800b390:	4603      	mov	r3, r0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b085      	sub	sp, #20
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	60f8      	str	r0, [r7, #12]
 800b3a2:	60b9      	str	r1, [r7, #8]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	781a      	ldrb	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	785a      	ldrb	r2, [r3, #1]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	3303      	adds	r3, #3
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	021b      	lsls	r3, r3, #8
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	791a      	ldrb	r2, [r3, #4]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	795a      	ldrb	r2, [r3, #5]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	799a      	ldrb	r2, [r3, #6]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	79da      	ldrb	r2, [r3, #7]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b3f4:	88fb      	ldrh	r3, [r7, #6]
 800b3f6:	2b08      	cmp	r3, #8
 800b3f8:	d939      	bls.n	800b46e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	b29a      	uxth	r2, r3
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	3309      	adds	r3, #9
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	021b      	lsls	r3, r3, #8
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	330a      	adds	r3, #10
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	330b      	adds	r3, #11
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	b29b      	uxth	r3, r3
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	b29b      	uxth	r3, r3
 800b42a:	4313      	orrs	r3, r2
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	330c      	adds	r3, #12
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	b29a      	uxth	r2, r3
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	330d      	adds	r3, #13
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	b29b      	uxth	r3, r3
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	b29b      	uxth	r3, r3
 800b446:	4313      	orrs	r3, r2
 800b448:	b29a      	uxth	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	7b9a      	ldrb	r2, [r3, #14]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	7bda      	ldrb	r2, [r3, #15]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	7c1a      	ldrb	r2, [r3, #16]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	7c5a      	ldrb	r2, [r3, #17]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	745a      	strb	r2, [r3, #17]
  }
}
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b08a      	sub	sp, #40	; 0x28
 800b47e:	af00      	add	r7, sp, #0
 800b480:	60f8      	str	r0, [r7, #12]
 800b482:	60b9      	str	r1, [r7, #8]
 800b484:	4613      	mov	r3, r2
 800b486:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	785a      	ldrb	r2, [r3, #1]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	3302      	adds	r3, #2
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	3303      	adds	r3, #3
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	021b      	lsls	r3, r3, #8
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	791a      	ldrb	r2, [r3, #4]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	795a      	ldrb	r2, [r3, #5]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	799a      	ldrb	r2, [r3, #6]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	79da      	ldrb	r2, [r3, #7]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	7a1a      	ldrb	r2, [r3, #8]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	2b09      	cmp	r3, #9
 800b4f4:	d95f      	bls.n	800b5b6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b4f6:	2309      	movs	r3, #9
 800b4f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b4fe:	e051      	b.n	800b5a4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b500:	f107 0316 	add.w	r3, r7, #22
 800b504:	4619      	mov	r1, r3
 800b506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b508:	f000 f8e8 	bl	800b6dc <USBH_GetNextDesc>
 800b50c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	785b      	ldrb	r3, [r3, #1]
 800b512:	2b04      	cmp	r3, #4
 800b514:	d146      	bne.n	800b5a4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b51a:	221a      	movs	r2, #26
 800b51c:	fb02 f303 	mul.w	r3, r2, r3
 800b520:	3308      	adds	r3, #8
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4413      	add	r3, r2
 800b526:	3302      	adds	r3, #2
 800b528:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b52c:	69f8      	ldr	r0, [r7, #28]
 800b52e:	f000 f846 	bl	800b5be <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b532:	2300      	movs	r3, #0
 800b534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b53c:	e022      	b.n	800b584 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b53e:	f107 0316 	add.w	r3, r7, #22
 800b542:	4619      	mov	r1, r3
 800b544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b546:	f000 f8c9 	bl	800b6dc <USBH_GetNextDesc>
 800b54a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	785b      	ldrb	r3, [r3, #1]
 800b550:	2b05      	cmp	r3, #5
 800b552:	d117      	bne.n	800b584 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b558:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b55c:	3201      	adds	r2, #1
 800b55e:	00d2      	lsls	r2, r2, #3
 800b560:	211a      	movs	r1, #26
 800b562:	fb01 f303 	mul.w	r3, r1, r3
 800b566:	4413      	add	r3, r2
 800b568:	3308      	adds	r3, #8
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	3304      	adds	r3, #4
 800b570:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b574:	69b8      	ldr	r0, [r7, #24]
 800b576:	f000 f851 	bl	800b61c <USBH_ParseEPDesc>
            ep_ix++;
 800b57a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b57e:	3301      	adds	r3, #1
 800b580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	791b      	ldrb	r3, [r3, #4]
 800b588:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d204      	bcs.n	800b59a <USBH_ParseCfgDesc+0x120>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	885a      	ldrh	r2, [r3, #2]
 800b594:	8afb      	ldrh	r3, [r7, #22]
 800b596:	429a      	cmp	r2, r3
 800b598:	d8d1      	bhi.n	800b53e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b59a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b59e:	3301      	adds	r3, #1
 800b5a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d804      	bhi.n	800b5b6 <USBH_ParseCfgDesc+0x13c>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	885a      	ldrh	r2, [r3, #2]
 800b5b0:	8afb      	ldrh	r3, [r7, #22]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d8a4      	bhi.n	800b500 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b5b6:	bf00      	nop
 800b5b8:	3728      	adds	r7, #40	; 0x28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	781a      	ldrb	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	785a      	ldrb	r2, [r3, #1]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	789a      	ldrb	r2, [r3, #2]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	78da      	ldrb	r2, [r3, #3]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	791a      	ldrb	r2, [r3, #4]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	795a      	ldrb	r2, [r3, #5]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	799a      	ldrb	r2, [r3, #6]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	79da      	ldrb	r2, [r3, #7]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	7a1a      	ldrb	r2, [r3, #8]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	721a      	strb	r2, [r3, #8]
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	781a      	ldrb	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	785a      	ldrb	r2, [r3, #1]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	789a      	ldrb	r2, [r3, #2]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	78da      	ldrb	r2, [r3, #3]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	3304      	adds	r3, #4
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	3305      	adds	r3, #5
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	b29b      	uxth	r3, r3
 800b656:	021b      	lsls	r3, r3, #8
 800b658:	b29b      	uxth	r3, r3
 800b65a:	4313      	orrs	r3, r2
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	799a      	ldrb	r2, [r3, #6]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	719a      	strb	r2, [r3, #6]
}
 800b66a:	bf00      	nop
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b676:	b480      	push	{r7}
 800b678:	b087      	sub	sp, #28
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	4613      	mov	r3, r2
 800b682:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	3301      	adds	r3, #1
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d120      	bne.n	800b6d0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	1e9a      	subs	r2, r3, #2
 800b694:	88fb      	ldrh	r3, [r7, #6]
 800b696:	4293      	cmp	r3, r2
 800b698:	bf28      	it	cs
 800b69a:	4613      	movcs	r3, r2
 800b69c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3302      	adds	r3, #2
 800b6a2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	82fb      	strh	r3, [r7, #22]
 800b6a8:	e00b      	b.n	800b6c2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b6aa:	8afb      	ldrh	r3, [r7, #22]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	781a      	ldrb	r2, [r3, #0]
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b6bc:	8afb      	ldrh	r3, [r7, #22]
 800b6be:	3302      	adds	r3, #2
 800b6c0:	82fb      	strh	r3, [r7, #22]
 800b6c2:	8afa      	ldrh	r2, [r7, #22]
 800b6c4:	8abb      	ldrh	r3, [r7, #20]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d3ef      	bcc.n	800b6aa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	701a      	strb	r2, [r3, #0]
  }
}
 800b6d0:	bf00      	nop
 800b6d2:	371c      	adds	r7, #28
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	881a      	ldrh	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	4413      	add	r3, r2
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4413      	add	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b704:	68fb      	ldr	r3, [r7, #12]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b086      	sub	sp, #24
 800b716:	af00      	add	r7, sp, #0
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	4613      	mov	r3, r2
 800b71e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b720:	2301      	movs	r3, #1
 800b722:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	789b      	ldrb	r3, [r3, #2]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d002      	beq.n	800b732 <USBH_CtlReq+0x20>
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d00f      	beq.n	800b750 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b730:	e027      	b.n	800b782 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	88fa      	ldrh	r2, [r7, #6]
 800b73c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2202      	movs	r2, #2
 800b748:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b74a:	2301      	movs	r3, #1
 800b74c:	75fb      	strb	r3, [r7, #23]
      break;
 800b74e:	e018      	b.n	800b782 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 f81b 	bl	800b78c <USBH_HandleControl>
 800b756:	4603      	mov	r3, r0
 800b758:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <USBH_CtlReq+0x54>
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	2b03      	cmp	r3, #3
 800b764:	d106      	bne.n	800b774 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	761a      	strb	r2, [r3, #24]
      break;
 800b772:	e005      	b.n	800b780 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	2b02      	cmp	r3, #2
 800b778:	d102      	bne.n	800b780 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2201      	movs	r2, #1
 800b77e:	709a      	strb	r2, [r3, #2]
      break;
 800b780:	bf00      	nop
  }
  return status;
 800b782:	7dfb      	ldrb	r3, [r7, #23]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af02      	add	r7, sp, #8
 800b792:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b794:	2301      	movs	r3, #1
 800b796:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b798:	2300      	movs	r3, #0
 800b79a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	7e1b      	ldrb	r3, [r3, #24]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	2b0a      	cmp	r3, #10
 800b7a4:	f200 8158 	bhi.w	800ba58 <USBH_HandleControl+0x2cc>
 800b7a8:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <USBH_HandleControl+0x24>)
 800b7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ae:	bf00      	nop
 800b7b0:	0800b7dd 	.word	0x0800b7dd
 800b7b4:	0800b7f7 	.word	0x0800b7f7
 800b7b8:	0800b861 	.word	0x0800b861
 800b7bc:	0800b887 	.word	0x0800b887
 800b7c0:	0800b8bf 	.word	0x0800b8bf
 800b7c4:	0800b8eb 	.word	0x0800b8eb
 800b7c8:	0800b93d 	.word	0x0800b93d
 800b7cc:	0800b95f 	.word	0x0800b95f
 800b7d0:	0800b99b 	.word	0x0800b99b
 800b7d4:	0800b9c3 	.word	0x0800b9c3
 800b7d8:	0800ba01 	.word	0x0800ba01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f103 0110 	add.w	r1, r3, #16
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	795b      	ldrb	r3, [r3, #5]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f945 	bl	800ba78 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	761a      	strb	r2, [r3, #24]
      break;
 800b7f4:	e13b      	b.n	800ba6e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	795b      	ldrb	r3, [r3, #5]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f003 f84b 	bl	800e898 <USBH_LL_GetURBState>
 800b802:	4603      	mov	r3, r0
 800b804:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d11e      	bne.n	800b84a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	7c1b      	ldrb	r3, [r3, #16]
 800b810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b814:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	8adb      	ldrh	r3, [r3, #22]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b81e:	7b7b      	ldrb	r3, [r7, #13]
 800b820:	2b80      	cmp	r3, #128	; 0x80
 800b822:	d103      	bne.n	800b82c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2203      	movs	r2, #3
 800b828:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b82a:	e117      	b.n	800ba5c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2205      	movs	r2, #5
 800b830:	761a      	strb	r2, [r3, #24]
      break;
 800b832:	e113      	b.n	800ba5c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800b834:	7b7b      	ldrb	r3, [r7, #13]
 800b836:	2b80      	cmp	r3, #128	; 0x80
 800b838:	d103      	bne.n	800b842 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2209      	movs	r2, #9
 800b83e:	761a      	strb	r2, [r3, #24]
      break;
 800b840:	e10c      	b.n	800ba5c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2207      	movs	r2, #7
 800b846:	761a      	strb	r2, [r3, #24]
      break;
 800b848:	e108      	b.n	800ba5c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	d003      	beq.n	800b858 <USBH_HandleControl+0xcc>
 800b850:	7bbb      	ldrb	r3, [r7, #14]
 800b852:	2b02      	cmp	r3, #2
 800b854:	f040 8102 	bne.w	800ba5c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	220b      	movs	r2, #11
 800b85c:	761a      	strb	r2, [r3, #24]
      break;
 800b85e:	e0fd      	b.n	800ba5c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6899      	ldr	r1, [r3, #8]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	899a      	ldrh	r2, [r3, #12]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	791b      	ldrb	r3, [r3, #4]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f93c 	bl	800baf6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2204      	movs	r2, #4
 800b882:	761a      	strb	r2, [r3, #24]
      break;
 800b884:	e0f3      	b.n	800ba6e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	791b      	ldrb	r3, [r3, #4]
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f003 f803 	bl	800e898 <USBH_LL_GetURBState>
 800b892:	4603      	mov	r3, r0
 800b894:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d102      	bne.n	800b8a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2209      	movs	r2, #9
 800b8a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	2b05      	cmp	r3, #5
 800b8a6:	d102      	bne.n	800b8ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8ac:	e0d8      	b.n	800ba60 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b04      	cmp	r3, #4
 800b8b2:	f040 80d5 	bne.w	800ba60 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	220b      	movs	r2, #11
 800b8ba:	761a      	strb	r2, [r3, #24]
      break;
 800b8bc:	e0d0      	b.n	800ba60 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6899      	ldr	r1, [r3, #8]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	899a      	ldrh	r2, [r3, #12]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	7958      	ldrb	r0, [r3, #5]
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f8eb 	bl	800baac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2206      	movs	r2, #6
 800b8e6:	761a      	strb	r2, [r3, #24]
      break;
 800b8e8:	e0c1      	b.n	800ba6e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	795b      	ldrb	r3, [r3, #5]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f002 ffd1 	bl	800e898 <USBH_LL_GetURBState>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d103      	bne.n	800b908 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2207      	movs	r2, #7
 800b904:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b906:	e0ad      	b.n	800ba64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	2b05      	cmp	r3, #5
 800b90c:	d105      	bne.n	800b91a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	220c      	movs	r2, #12
 800b912:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b914:	2303      	movs	r3, #3
 800b916:	73fb      	strb	r3, [r7, #15]
      break;
 800b918:	e0a4      	b.n	800ba64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d103      	bne.n	800b928 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2205      	movs	r2, #5
 800b924:	761a      	strb	r2, [r3, #24]
      break;
 800b926:	e09d      	b.n	800ba64 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	2b04      	cmp	r3, #4
 800b92c:	f040 809a 	bne.w	800ba64 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	220b      	movs	r2, #11
 800b934:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b936:	2302      	movs	r3, #2
 800b938:	73fb      	strb	r3, [r7, #15]
      break;
 800b93a:	e093      	b.n	800ba64 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	791b      	ldrb	r3, [r3, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	2100      	movs	r1, #0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f8d6 	bl	800baf6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b950:	b29a      	uxth	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2208      	movs	r2, #8
 800b95a:	761a      	strb	r2, [r3, #24]

      break;
 800b95c:	e087      	b.n	800ba6e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	791b      	ldrb	r3, [r3, #4]
 800b962:	4619      	mov	r1, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f002 ff97 	bl	800e898 <USBH_LL_GetURBState>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d105      	bne.n	800b980 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	220d      	movs	r2, #13
 800b978:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b97e:	e073      	b.n	800ba68 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	2b04      	cmp	r3, #4
 800b984:	d103      	bne.n	800b98e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	220b      	movs	r2, #11
 800b98a:	761a      	strb	r2, [r3, #24]
      break;
 800b98c:	e06c      	b.n	800ba68 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	2b05      	cmp	r3, #5
 800b992:	d169      	bne.n	800ba68 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800b994:	2303      	movs	r3, #3
 800b996:	73fb      	strb	r3, [r7, #15]
      break;
 800b998:	e066      	b.n	800ba68 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	795a      	ldrb	r2, [r3, #5]
 800b99e:	2301      	movs	r3, #1
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f87f 	bl	800baac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	220a      	movs	r2, #10
 800b9be:	761a      	strb	r2, [r3, #24]
      break;
 800b9c0:	e055      	b.n	800ba6e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	795b      	ldrb	r3, [r3, #5]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f002 ff65 	bl	800e898 <USBH_LL_GetURBState>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d105      	bne.n	800b9e4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	220d      	movs	r2, #13
 800b9e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9e2:	e043      	b.n	800ba6c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d103      	bne.n	800b9f2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2209      	movs	r2, #9
 800b9ee:	761a      	strb	r2, [r3, #24]
      break;
 800b9f0:	e03c      	b.n	800ba6c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	2b04      	cmp	r3, #4
 800b9f6:	d139      	bne.n	800ba6c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	220b      	movs	r2, #11
 800b9fc:	761a      	strb	r2, [r3, #24]
      break;
 800b9fe:	e035      	b.n	800ba6c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	7e5b      	ldrb	r3, [r3, #25]
 800ba04:	3301      	adds	r3, #1
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	765a      	strb	r2, [r3, #25]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	7e5b      	ldrb	r3, [r3, #25]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d806      	bhi.n	800ba22 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ba20:	e025      	b.n	800ba6e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba28:	2106      	movs	r1, #6
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	795b      	ldrb	r3, [r3, #5]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f90c 	bl	800bc58 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	791b      	ldrb	r3, [r3, #4]
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f906 	bl	800bc58 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ba52:	2302      	movs	r3, #2
 800ba54:	73fb      	strb	r3, [r7, #15]
      break;
 800ba56:	e00a      	b.n	800ba6e <USBH_HandleControl+0x2e2>

    default:
      break;
 800ba58:	bf00      	nop
 800ba5a:	e008      	b.n	800ba6e <USBH_HandleControl+0x2e2>
      break;
 800ba5c:	bf00      	nop
 800ba5e:	e006      	b.n	800ba6e <USBH_HandleControl+0x2e2>
      break;
 800ba60:	bf00      	nop
 800ba62:	e004      	b.n	800ba6e <USBH_HandleControl+0x2e2>
      break;
 800ba64:	bf00      	nop
 800ba66:	e002      	b.n	800ba6e <USBH_HandleControl+0x2e2>
      break;
 800ba68:	bf00      	nop
 800ba6a:	e000      	b.n	800ba6e <USBH_HandleControl+0x2e2>
      break;
 800ba6c:	bf00      	nop
  }

  return status;
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af04      	add	r7, sp, #16
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	4613      	mov	r3, r2
 800ba84:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba86:	79f9      	ldrb	r1, [r7, #7]
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9303      	str	r3, [sp, #12]
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	2300      	movs	r3, #0
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f002 feca 	bl	800e836 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af04      	add	r7, sp, #16
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	4611      	mov	r1, r2
 800bab8:	461a      	mov	r2, r3
 800baba:	460b      	mov	r3, r1
 800babc:	80fb      	strh	r3, [r7, #6]
 800babe:	4613      	mov	r3, r2
 800bac0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bacc:	2300      	movs	r3, #0
 800bace:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bad0:	7979      	ldrb	r1, [r7, #5]
 800bad2:	7e3b      	ldrb	r3, [r7, #24]
 800bad4:	9303      	str	r3, [sp, #12]
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	9302      	str	r3, [sp, #8]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	2301      	movs	r3, #1
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	2300      	movs	r3, #0
 800bae4:	2200      	movs	r2, #0
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f002 fea5 	bl	800e836 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b088      	sub	sp, #32
 800bafa:	af04      	add	r7, sp, #16
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	4611      	mov	r1, r2
 800bb02:	461a      	mov	r2, r3
 800bb04:	460b      	mov	r3, r1
 800bb06:	80fb      	strh	r3, [r7, #6]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb0c:	7979      	ldrb	r1, [r7, #5]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	9303      	str	r3, [sp, #12]
 800bb12:	88fb      	ldrh	r3, [r7, #6]
 800bb14:	9302      	str	r3, [sp, #8]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2201      	movs	r2, #1
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f002 fe87 	bl	800e836 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bb28:	2300      	movs	r3, #0

}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b088      	sub	sp, #32
 800bb36:	af04      	add	r7, sp, #16
 800bb38:	60f8      	str	r0, [r7, #12]
 800bb3a:	60b9      	str	r1, [r7, #8]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	461a      	mov	r2, r3
 800bb40:	460b      	mov	r3, r1
 800bb42:	80fb      	strh	r3, [r7, #6]
 800bb44:	4613      	mov	r3, r2
 800bb46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bb52:	2300      	movs	r3, #0
 800bb54:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb56:	7979      	ldrb	r1, [r7, #5]
 800bb58:	7e3b      	ldrb	r3, [r7, #24]
 800bb5a:	9303      	str	r3, [sp, #12]
 800bb5c:	88fb      	ldrh	r3, [r7, #6]
 800bb5e:	9302      	str	r3, [sp, #8]
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	2301      	movs	r3, #1
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	2302      	movs	r3, #2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f002 fe62 	bl	800e836 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af04      	add	r7, sp, #16
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	4611      	mov	r1, r2
 800bb88:	461a      	mov	r2, r3
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	80fb      	strh	r3, [r7, #6]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb92:	7979      	ldrb	r1, [r7, #5]
 800bb94:	2300      	movs	r3, #0
 800bb96:	9303      	str	r3, [sp, #12]
 800bb98:	88fb      	ldrh	r3, [r7, #6]
 800bb9a:	9302      	str	r3, [sp, #8]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	2301      	movs	r3, #1
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	2302      	movs	r3, #2
 800bba6:	2201      	movs	r2, #1
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f002 fe44 	bl	800e836 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af04      	add	r7, sp, #16
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	70fb      	strb	r3, [r7, #3]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70bb      	strb	r3, [r7, #2]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bbd2:	7878      	ldrb	r0, [r7, #1]
 800bbd4:	78ba      	ldrb	r2, [r7, #2]
 800bbd6:	78f9      	ldrb	r1, [r7, #3]
 800bbd8:	8b3b      	ldrh	r3, [r7, #24]
 800bbda:	9302      	str	r3, [sp, #8]
 800bbdc:	7d3b      	ldrb	r3, [r7, #20]
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	7c3b      	ldrb	r3, [r7, #16]
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f002 fdd7 	bl	800e79a <USBH_LL_OpenPipe>

  return USBH_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f002 fdf6 	bl	800e7f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f836 	bl	800bc94 <USBH_GetFreePipe>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bc2c:	89fb      	ldrh	r3, [r7, #14]
 800bc2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d00a      	beq.n	800bc4c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bc36:	78fa      	ldrb	r2, [r7, #3]
 800bc38:	89fb      	ldrh	r3, [r7, #14]
 800bc3a:	f003 030f 	and.w	r3, r3, #15
 800bc3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	33e0      	adds	r3, #224	; 0xe0
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	440b      	add	r3, r1
 800bc4a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bc4c:	89fb      	ldrh	r3, [r7, #14]
 800bc4e:	b2db      	uxtb	r3, r3
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	2b0a      	cmp	r3, #10
 800bc68:	d80d      	bhi.n	800bc86 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	33e0      	adds	r3, #224	; 0xe0
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bc7c:	6879      	ldr	r1, [r7, #4]
 800bc7e:	33e0      	adds	r3, #224	; 0xe0
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	440b      	add	r3, r1
 800bc84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
 800bca4:	e00f      	b.n	800bcc6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	33e0      	adds	r3, #224	; 0xe0
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	e007      	b.n	800bcd0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	73fb      	strb	r3, [r7, #15]
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
 800bcc8:	2b0a      	cmp	r3, #10
 800bcca:	d9ec      	bls.n	800bca6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	4a08      	ldr	r2, [pc, #32]	; (800bd0c <disk_status+0x30>)
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	79fa      	ldrb	r2, [r7, #7]
 800bcf4:	4905      	ldr	r1, [pc, #20]	; (800bd0c <disk_status+0x30>)
 800bcf6:	440a      	add	r2, r1
 800bcf8:	7a12      	ldrb	r2, [r2, #8]
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4798      	blx	r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	20001378 	.word	0x20001378

0800bd10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	4a0d      	ldr	r2, [pc, #52]	; (800bd58 <disk_initialize+0x48>)
 800bd22:	5cd3      	ldrb	r3, [r2, r3]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d111      	bne.n	800bd4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bd28:	79fb      	ldrb	r3, [r7, #7]
 800bd2a:	4a0b      	ldr	r2, [pc, #44]	; (800bd58 <disk_initialize+0x48>)
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	4a09      	ldr	r2, [pc, #36]	; (800bd58 <disk_initialize+0x48>)
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	79fa      	ldrb	r2, [r7, #7]
 800bd3e:	4906      	ldr	r1, [pc, #24]	; (800bd58 <disk_initialize+0x48>)
 800bd40:	440a      	add	r2, r1
 800bd42:	7a12      	ldrb	r2, [r2, #8]
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20001378 	.word	0x20001378

0800bd5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	603b      	str	r3, [r7, #0]
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
 800bd6e:	4a0a      	ldr	r2, [pc, #40]	; (800bd98 <disk_read+0x3c>)
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	689c      	ldr	r4, [r3, #8]
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	4a07      	ldr	r2, [pc, #28]	; (800bd98 <disk_read+0x3c>)
 800bd7c:	4413      	add	r3, r2
 800bd7e:	7a18      	ldrb	r0, [r3, #8]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	47a0      	blx	r4
 800bd88:	4603      	mov	r3, r0
 800bd8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd90      	pop	{r4, r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20001378 	.word	0x20001378

0800bd9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd9c:	b590      	push	{r4, r7, lr}
 800bd9e:	b087      	sub	sp, #28
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	603b      	str	r3, [r7, #0]
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	4a0a      	ldr	r2, [pc, #40]	; (800bdd8 <disk_write+0x3c>)
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68dc      	ldr	r4, [r3, #12]
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
 800bdba:	4a07      	ldr	r2, [pc, #28]	; (800bdd8 <disk_write+0x3c>)
 800bdbc:	4413      	add	r3, r2
 800bdbe:	7a18      	ldrb	r0, [r3, #8]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	47a0      	blx	r4
 800bdc8:	4603      	mov	r3, r0
 800bdca:	75fb      	strb	r3, [r7, #23]
  return res;
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	371c      	adds	r7, #28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd90      	pop	{r4, r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20001378 	.word	0x20001378

0800bddc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	603a      	str	r2, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
 800bde8:	460b      	mov	r3, r1
 800bdea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bdec:	79fb      	ldrb	r3, [r7, #7]
 800bdee:	4a09      	ldr	r2, [pc, #36]	; (800be14 <disk_ioctl+0x38>)
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	79fa      	ldrb	r2, [r7, #7]
 800bdfa:	4906      	ldr	r1, [pc, #24]	; (800be14 <disk_ioctl+0x38>)
 800bdfc:	440a      	add	r2, r1
 800bdfe:	7a10      	ldrb	r0, [r2, #8]
 800be00:	79b9      	ldrb	r1, [r7, #6]
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4798      	blx	r3
 800be06:	4603      	mov	r3, r0
 800be08:	73fb      	strb	r3, [r7, #15]
  return res;
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20001378 	.word	0x20001378

0800be18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3301      	adds	r3, #1
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800be28:	89fb      	ldrh	r3, [r7, #14]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	b21a      	sxth	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	b21b      	sxth	r3, r3
 800be34:	4313      	orrs	r3, r2
 800be36:	b21b      	sxth	r3, r3
 800be38:	81fb      	strh	r3, [r7, #14]
	return rv;
 800be3a:	89fb      	ldrh	r3, [r7, #14]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3303      	adds	r3, #3
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	3202      	adds	r2, #2
 800be60:	7812      	ldrb	r2, [r2, #0]
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	021b      	lsls	r3, r3, #8
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	3201      	adds	r2, #1
 800be6e:	7812      	ldrb	r2, [r2, #0]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	021b      	lsls	r3, r3, #8
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	7812      	ldrb	r2, [r2, #0]
 800be7c:	4313      	orrs	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
	return rv;
 800be80:	68fb      	ldr	r3, [r7, #12]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be8e:	b480      	push	{r7}
 800be90:	b083      	sub	sp, #12
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	460b      	mov	r3, r1
 800be98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	887a      	ldrh	r2, [r7, #2]
 800bea2:	b2d2      	uxtb	r2, r2
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	887b      	ldrh	r3, [r7, #2]
 800bea8:	0a1b      	lsrs	r3, r3, #8
 800beaa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	1c5a      	adds	r2, r3, #1
 800beb0:	607a      	str	r2, [r7, #4]
 800beb2:	887a      	ldrh	r2, [r7, #2]
 800beb4:	b2d2      	uxtb	r2, r2
 800beb6:	701a      	strb	r2, [r3, #0]
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	b2d2      	uxtb	r2, r2
 800bed8:	701a      	strb	r2, [r3, #0]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	0a1b      	lsrs	r3, r3, #8
 800bede:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	607a      	str	r2, [r7, #4]
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	b2d2      	uxtb	r2, r2
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	0a1b      	lsrs	r3, r3, #8
 800bef0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	701a      	strb	r2, [r3, #0]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	0a1b      	lsrs	r3, r3, #8
 800bf02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	b2d2      	uxtb	r2, r2
 800bf0e:	701a      	strb	r2, [r3, #0]
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00d      	beq.n	800bf52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	1c53      	adds	r3, r2, #1
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	1c59      	adds	r1, r3, #1
 800bf40:	6179      	str	r1, [r7, #20]
 800bf42:	7812      	ldrb	r2, [r2, #0]
 800bf44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	607b      	str	r3, [r7, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f1      	bne.n	800bf36 <mem_cpy+0x1a>
	}
}
 800bf52:	bf00      	nop
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf5e:	b480      	push	{r7}
 800bf60:	b087      	sub	sp, #28
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	617a      	str	r2, [r7, #20]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	607b      	str	r3, [r7, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1f3      	bne.n	800bf6e <mem_set+0x10>
}
 800bf86:	bf00      	nop
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf92:	b480      	push	{r7}
 800bf94:	b089      	sub	sp, #36	; 0x24
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	60f8      	str	r0, [r7, #12]
 800bf9a:	60b9      	str	r1, [r7, #8]
 800bf9c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	61fb      	str	r3, [r7, #28]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	61fa      	str	r2, [r7, #28]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	61ba      	str	r2, [r7, #24]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	1acb      	subs	r3, r1, r3
 800bfbe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	607b      	str	r3, [r7, #4]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <mem_cmp+0x40>
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0eb      	beq.n	800bfaa <mem_cmp+0x18>

	return r;
 800bfd2:	697b      	ldr	r3, [r7, #20]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3724      	adds	r7, #36	; 0x24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bfea:	e002      	b.n	800bff2 <chk_chr+0x12>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3301      	adds	r3, #1
 800bff0:	607b      	str	r3, [r7, #4]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d005      	beq.n	800c006 <chk_chr+0x26>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	4293      	cmp	r3, r2
 800c004:	d1f2      	bne.n	800bfec <chk_chr+0xc>
	return *str;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	781b      	ldrb	r3, [r3, #0]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	370c      	adds	r7, #12
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr
	...

0800c018 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c022:	2300      	movs	r3, #0
 800c024:	60bb      	str	r3, [r7, #8]
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	e029      	b.n	800c080 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c02c:	4a27      	ldr	r2, [pc, #156]	; (800c0cc <chk_lock+0xb4>)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	011b      	lsls	r3, r3, #4
 800c032:	4413      	add	r3, r2
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d01d      	beq.n	800c076 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c03a:	4a24      	ldr	r2, [pc, #144]	; (800c0cc <chk_lock+0xb4>)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	4413      	add	r3, r2
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d116      	bne.n	800c07a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c04c:	4a1f      	ldr	r2, [pc, #124]	; (800c0cc <chk_lock+0xb4>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	4413      	add	r3, r2
 800c054:	3304      	adds	r3, #4
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d10c      	bne.n	800c07a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c060:	4a1a      	ldr	r2, [pc, #104]	; (800c0cc <chk_lock+0xb4>)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	011b      	lsls	r3, r3, #4
 800c066:	4413      	add	r3, r2
 800c068:	3308      	adds	r3, #8
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c070:	429a      	cmp	r2, r3
 800c072:	d102      	bne.n	800c07a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c074:	e007      	b.n	800c086 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c076:	2301      	movs	r3, #1
 800c078:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3301      	adds	r3, #1
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d9d2      	bls.n	800c02c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d109      	bne.n	800c0a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d102      	bne.n	800c098 <chk_lock+0x80>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b02      	cmp	r3, #2
 800c096:	d101      	bne.n	800c09c <chk_lock+0x84>
 800c098:	2300      	movs	r3, #0
 800c09a:	e010      	b.n	800c0be <chk_lock+0xa6>
 800c09c:	2312      	movs	r3, #18
 800c09e:	e00e      	b.n	800c0be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d108      	bne.n	800c0b8 <chk_lock+0xa0>
 800c0a6:	4a09      	ldr	r2, [pc, #36]	; (800c0cc <chk_lock+0xb4>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	4413      	add	r3, r2
 800c0ae:	330c      	adds	r3, #12
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0b6:	d101      	bne.n	800c0bc <chk_lock+0xa4>
 800c0b8:	2310      	movs	r3, #16
 800c0ba:	e000      	b.n	800c0be <chk_lock+0xa6>
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	20001358 	.word	0x20001358

0800c0d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	607b      	str	r3, [r7, #4]
 800c0da:	e002      	b.n	800c0e2 <enq_lock+0x12>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	607b      	str	r3, [r7, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d806      	bhi.n	800c0f6 <enq_lock+0x26>
 800c0e8:	4a09      	ldr	r2, [pc, #36]	; (800c110 <enq_lock+0x40>)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	011b      	lsls	r3, r3, #4
 800c0ee:	4413      	add	r3, r2
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1f2      	bne.n	800c0dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	bf14      	ite	ne
 800c0fc:	2301      	movne	r3, #1
 800c0fe:	2300      	moveq	r3, #0
 800c100:	b2db      	uxtb	r3, r3
}
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	20001358 	.word	0x20001358

0800c114 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	e01f      	b.n	800c164 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c124:	4a41      	ldr	r2, [pc, #260]	; (800c22c <inc_lock+0x118>)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	011b      	lsls	r3, r3, #4
 800c12a:	4413      	add	r3, r2
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	429a      	cmp	r2, r3
 800c134:	d113      	bne.n	800c15e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c136:	4a3d      	ldr	r2, [pc, #244]	; (800c22c <inc_lock+0x118>)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	011b      	lsls	r3, r3, #4
 800c13c:	4413      	add	r3, r2
 800c13e:	3304      	adds	r3, #4
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c146:	429a      	cmp	r2, r3
 800c148:	d109      	bne.n	800c15e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c14a:	4a38      	ldr	r2, [pc, #224]	; (800c22c <inc_lock+0x118>)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	4413      	add	r3, r2
 800c152:	3308      	adds	r3, #8
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d006      	beq.n	800c16c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3301      	adds	r3, #1
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d9dc      	bls.n	800c124 <inc_lock+0x10>
 800c16a:	e000      	b.n	800c16e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c16c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b02      	cmp	r3, #2
 800c172:	d132      	bne.n	800c1da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c174:	2300      	movs	r3, #0
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	e002      	b.n	800c180 <inc_lock+0x6c>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3301      	adds	r3, #1
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d806      	bhi.n	800c194 <inc_lock+0x80>
 800c186:	4a29      	ldr	r2, [pc, #164]	; (800c22c <inc_lock+0x118>)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	4413      	add	r3, r2
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1f2      	bne.n	800c17a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b02      	cmp	r3, #2
 800c198:	d101      	bne.n	800c19e <inc_lock+0x8a>
 800c19a:	2300      	movs	r3, #0
 800c19c:	e040      	b.n	800c220 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4922      	ldr	r1, [pc, #136]	; (800c22c <inc_lock+0x118>)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	011b      	lsls	r3, r3, #4
 800c1a8:	440b      	add	r3, r1
 800c1aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	491e      	ldr	r1, [pc, #120]	; (800c22c <inc_lock+0x118>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	011b      	lsls	r3, r3, #4
 800c1b6:	440b      	add	r3, r1
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	695a      	ldr	r2, [r3, #20]
 800c1c0:	491a      	ldr	r1, [pc, #104]	; (800c22c <inc_lock+0x118>)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	440b      	add	r3, r1
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c1cc:	4a17      	ldr	r2, [pc, #92]	; (800c22c <inc_lock+0x118>)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	011b      	lsls	r3, r3, #4
 800c1d2:	4413      	add	r3, r2
 800c1d4:	330c      	adds	r3, #12
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d009      	beq.n	800c1f4 <inc_lock+0xe0>
 800c1e0:	4a12      	ldr	r2, [pc, #72]	; (800c22c <inc_lock+0x118>)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	011b      	lsls	r3, r3, #4
 800c1e6:	4413      	add	r3, r2
 800c1e8:	330c      	adds	r3, #12
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d001      	beq.n	800c1f4 <inc_lock+0xe0>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e015      	b.n	800c220 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d108      	bne.n	800c20c <inc_lock+0xf8>
 800c1fa:	4a0c      	ldr	r2, [pc, #48]	; (800c22c <inc_lock+0x118>)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	011b      	lsls	r3, r3, #4
 800c200:	4413      	add	r3, r2
 800c202:	330c      	adds	r3, #12
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	3301      	adds	r3, #1
 800c208:	b29a      	uxth	r2, r3
 800c20a:	e001      	b.n	800c210 <inc_lock+0xfc>
 800c20c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c210:	4906      	ldr	r1, [pc, #24]	; (800c22c <inc_lock+0x118>)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	011b      	lsls	r3, r3, #4
 800c216:	440b      	add	r3, r1
 800c218:	330c      	adds	r3, #12
 800c21a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3301      	adds	r3, #1
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	20001358 	.word	0x20001358

0800c230 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3b01      	subs	r3, #1
 800c23c:	607b      	str	r3, [r7, #4]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d825      	bhi.n	800c290 <dec_lock+0x60>
		n = Files[i].ctr;
 800c244:	4a17      	ldr	r2, [pc, #92]	; (800c2a4 <dec_lock+0x74>)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	011b      	lsls	r3, r3, #4
 800c24a:	4413      	add	r3, r2
 800c24c:	330c      	adds	r3, #12
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c252:	89fb      	ldrh	r3, [r7, #14]
 800c254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c258:	d101      	bne.n	800c25e <dec_lock+0x2e>
 800c25a:	2300      	movs	r3, #0
 800c25c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c25e:	89fb      	ldrh	r3, [r7, #14]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <dec_lock+0x3a>
 800c264:	89fb      	ldrh	r3, [r7, #14]
 800c266:	3b01      	subs	r3, #1
 800c268:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c26a:	4a0e      	ldr	r2, [pc, #56]	; (800c2a4 <dec_lock+0x74>)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	011b      	lsls	r3, r3, #4
 800c270:	4413      	add	r3, r2
 800c272:	330c      	adds	r3, #12
 800c274:	89fa      	ldrh	r2, [r7, #14]
 800c276:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c278:	89fb      	ldrh	r3, [r7, #14]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d105      	bne.n	800c28a <dec_lock+0x5a>
 800c27e:	4a09      	ldr	r2, [pc, #36]	; (800c2a4 <dec_lock+0x74>)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	011b      	lsls	r3, r3, #4
 800c284:	4413      	add	r3, r2
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	737b      	strb	r3, [r7, #13]
 800c28e:	e001      	b.n	800c294 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c290:	2302      	movs	r3, #2
 800c292:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c294:	7b7b      	ldrb	r3, [r7, #13]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	20001358 	.word	0x20001358

0800c2a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	e010      	b.n	800c2d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c2b6:	4a0d      	ldr	r2, [pc, #52]	; (800c2ec <clear_lock+0x44>)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	4413      	add	r3, r2
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d105      	bne.n	800c2d2 <clear_lock+0x2a>
 800c2c6:	4a09      	ldr	r2, [pc, #36]	; (800c2ec <clear_lock+0x44>)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4413      	add	r3, r2
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d9eb      	bls.n	800c2b6 <clear_lock+0xe>
	}
}
 800c2de:	bf00      	nop
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	20001358 	.word	0x20001358

0800c2f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	78db      	ldrb	r3, [r3, #3]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d034      	beq.n	800c36e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c308:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	7858      	ldrb	r0, [r3, #1]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c314:	2301      	movs	r3, #1
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	f7ff fd40 	bl	800bd9c <disk_write>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c322:	2301      	movs	r3, #1
 800c324:	73fb      	strb	r3, [r7, #15]
 800c326:	e022      	b.n	800c36e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	1ad2      	subs	r2, r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d217      	bcs.n	800c36e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	789b      	ldrb	r3, [r3, #2]
 800c342:	613b      	str	r3, [r7, #16]
 800c344:	e010      	b.n	800c368 <sync_window+0x78>
					wsect += fs->fsize;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	4413      	add	r3, r2
 800c34e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	7858      	ldrb	r0, [r3, #1]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c35a:	2301      	movs	r3, #1
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	f7ff fd1d 	bl	800bd9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	3b01      	subs	r3, #1
 800c366:	613b      	str	r3, [r7, #16]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d8eb      	bhi.n	800c346 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d01b      	beq.n	800c3c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff ffad 	bl	800c2f0 <sync_window>
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d113      	bne.n	800c3c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	7858      	ldrb	r0, [r3, #1]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	f7ff fcd5 	bl	800bd5c <disk_read>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d004      	beq.n	800c3c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7ff ff87 	bl	800c2f0 <sync_window>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d158      	bne.n	800c49e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d148      	bne.n	800c486 <sync_fs+0xb2>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	791b      	ldrb	r3, [r3, #4]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d144      	bne.n	800c486 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3330      	adds	r3, #48	; 0x30
 800c400:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c404:	2100      	movs	r1, #0
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff fda9 	bl	800bf5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3330      	adds	r3, #48	; 0x30
 800c410:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c414:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c418:	4618      	mov	r0, r3
 800c41a:	f7ff fd38 	bl	800be8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3330      	adds	r3, #48	; 0x30
 800c422:	4921      	ldr	r1, [pc, #132]	; (800c4a8 <sync_fs+0xd4>)
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff fd4d 	bl	800bec4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3330      	adds	r3, #48	; 0x30
 800c42e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c432:	491e      	ldr	r1, [pc, #120]	; (800c4ac <sync_fs+0xd8>)
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff fd45 	bl	800bec4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3330      	adds	r3, #48	; 0x30
 800c43e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	4619      	mov	r1, r3
 800c448:	4610      	mov	r0, r2
 800c44a:	f7ff fd3b 	bl	800bec4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	3330      	adds	r3, #48	; 0x30
 800c452:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	4619      	mov	r1, r3
 800c45c:	4610      	mov	r0, r2
 800c45e:	f7ff fd31 	bl	800bec4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	1c5a      	adds	r2, r3, #1
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7858      	ldrb	r0, [r3, #1]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47a:	2301      	movs	r3, #1
 800c47c:	f7ff fc8e 	bl	800bd9c <disk_write>
			fs->fsi_flag = 0;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	785b      	ldrb	r3, [r3, #1]
 800c48a:	2200      	movs	r2, #0
 800c48c:	2100      	movs	r1, #0
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff fca4 	bl	800bddc <disk_ioctl>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <sync_fs+0xca>
 800c49a:	2301      	movs	r3, #1
 800c49c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	41615252 	.word	0x41615252
 800c4ac:	61417272 	.word	0x61417272

0800c4b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	3b02      	subs	r3, #2
 800c4be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	3b02      	subs	r3, #2
 800c4c6:	683a      	ldr	r2, [r7, #0]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d301      	bcc.n	800c4d0 <clust2sect+0x20>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	e008      	b.n	800c4e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	895b      	ldrh	r3, [r3, #10]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	fb03 f202 	mul.w	r2, r3, r2
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e0:	4413      	add	r3, r2
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b086      	sub	sp, #24
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d904      	bls.n	800c50e <get_fat+0x20>
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	695b      	ldr	r3, [r3, #20]
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d302      	bcc.n	800c514 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c50e:	2301      	movs	r3, #1
 800c510:	617b      	str	r3, [r7, #20]
 800c512:	e08c      	b.n	800c62e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c514:	f04f 33ff 	mov.w	r3, #4294967295
 800c518:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d045      	beq.n	800c5ae <get_fat+0xc0>
 800c522:	2b03      	cmp	r3, #3
 800c524:	d05d      	beq.n	800c5e2 <get_fat+0xf4>
 800c526:	2b01      	cmp	r3, #1
 800c528:	d177      	bne.n	800c61a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	60fb      	str	r3, [r7, #12]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	085b      	lsrs	r3, r3, #1
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	4413      	add	r3, r2
 800c536:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	6a1a      	ldr	r2, [r3, #32]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	0a5b      	lsrs	r3, r3, #9
 800c540:	4413      	add	r3, r2
 800c542:	4619      	mov	r1, r3
 800c544:	6938      	ldr	r0, [r7, #16]
 800c546:	f7ff ff17 	bl	800c378 <move_window>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d167      	bne.n	800c620 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	1c5a      	adds	r2, r3, #1
 800c554:	60fa      	str	r2, [r7, #12]
 800c556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	4413      	add	r3, r2
 800c55e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c562:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	6a1a      	ldr	r2, [r3, #32]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	0a5b      	lsrs	r3, r3, #9
 800c56c:	4413      	add	r3, r2
 800c56e:	4619      	mov	r1, r3
 800c570:	6938      	ldr	r0, [r7, #16]
 800c572:	f7ff ff01 	bl	800c378 <move_window>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d153      	bne.n	800c624 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	4413      	add	r3, r2
 800c586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c58a:	021b      	lsls	r3, r3, #8
 800c58c:	461a      	mov	r2, r3
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	4313      	orrs	r3, r2
 800c592:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	f003 0301 	and.w	r3, r3, #1
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d002      	beq.n	800c5a4 <get_fat+0xb6>
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	091b      	lsrs	r3, r3, #4
 800c5a2:	e002      	b.n	800c5aa <get_fat+0xbc>
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5aa:	617b      	str	r3, [r7, #20]
			break;
 800c5ac:	e03f      	b.n	800c62e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	6a1a      	ldr	r2, [r3, #32]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	0a1b      	lsrs	r3, r3, #8
 800c5b6:	4413      	add	r3, r2
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6938      	ldr	r0, [r7, #16]
 800c5bc:	f7ff fedc 	bl	800c378 <move_window>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d130      	bne.n	800c628 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	005b      	lsls	r3, r3, #1
 800c5d0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c5d4:	4413      	add	r3, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fc1e 	bl	800be18 <ld_word>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	617b      	str	r3, [r7, #20]
			break;
 800c5e0:	e025      	b.n	800c62e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	6a1a      	ldr	r2, [r3, #32]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	09db      	lsrs	r3, r3, #7
 800c5ea:	4413      	add	r3, r2
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6938      	ldr	r0, [r7, #16]
 800c5f0:	f7ff fec2 	bl	800c378 <move_window>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d118      	bne.n	800c62c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c608:	4413      	add	r3, r2
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff fc1c 	bl	800be48 <ld_dword>
 800c610:	4603      	mov	r3, r0
 800c612:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c616:	617b      	str	r3, [r7, #20]
			break;
 800c618:	e009      	b.n	800c62e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c61a:	2301      	movs	r3, #1
 800c61c:	617b      	str	r3, [r7, #20]
 800c61e:	e006      	b.n	800c62e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c620:	bf00      	nop
 800c622:	e004      	b.n	800c62e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c624:	bf00      	nop
 800c626:	e002      	b.n	800c62e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c628:	bf00      	nop
 800c62a:	e000      	b.n	800c62e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c62c:	bf00      	nop
		}
	}

	return val;
 800c62e:	697b      	ldr	r3, [r7, #20]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c638:	b590      	push	{r4, r7, lr}
 800c63a:	b089      	sub	sp, #36	; 0x24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c644:	2302      	movs	r3, #2
 800c646:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	f240 80d6 	bls.w	800c7fc <put_fat+0x1c4>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	429a      	cmp	r2, r3
 800c658:	f080 80d0 	bcs.w	800c7fc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d073      	beq.n	800c74c <put_fat+0x114>
 800c664:	2b03      	cmp	r3, #3
 800c666:	f000 8091 	beq.w	800c78c <put_fat+0x154>
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	f040 80c6 	bne.w	800c7fc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	61bb      	str	r3, [r7, #24]
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	085b      	lsrs	r3, r3, #1
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	4413      	add	r3, r2
 800c67c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6a1a      	ldr	r2, [r3, #32]
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	0a5b      	lsrs	r3, r3, #9
 800c686:	4413      	add	r3, r2
 800c688:	4619      	mov	r1, r3
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff fe74 	bl	800c378 <move_window>
 800c690:	4603      	mov	r3, r0
 800c692:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c694:	7ffb      	ldrb	r3, [r7, #31]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f040 80a9 	bne.w	800c7ee <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	1c59      	adds	r1, r3, #1
 800c6a6:	61b9      	str	r1, [r7, #24]
 800c6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ac:	4413      	add	r3, r2
 800c6ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00d      	beq.n	800c6d6 <put_fat+0x9e>
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	b25b      	sxtb	r3, r3
 800c6c0:	f003 030f 	and.w	r3, r3, #15
 800c6c4:	b25a      	sxtb	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	011b      	lsls	r3, r3, #4
 800c6cc:	b25b      	sxtb	r3, r3
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	b25b      	sxtb	r3, r3
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	e001      	b.n	800c6da <put_fat+0xa2>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6a1a      	ldr	r2, [r3, #32]
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	0a5b      	lsrs	r3, r3, #9
 800c6ec:	4413      	add	r3, r2
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f7ff fe41 	bl	800c378 <move_window>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6fa:	7ffb      	ldrb	r3, [r7, #31]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d178      	bne.n	800c7f2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70c:	4413      	add	r3, r2
 800c70e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d003      	beq.n	800c722 <put_fat+0xea>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	091b      	lsrs	r3, r3, #4
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	e00e      	b.n	800c740 <put_fat+0x108>
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	b25b      	sxtb	r3, r3
 800c728:	f023 030f 	bic.w	r3, r3, #15
 800c72c:	b25a      	sxtb	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	0a1b      	lsrs	r3, r3, #8
 800c732:	b25b      	sxtb	r3, r3
 800c734:	f003 030f 	and.w	r3, r3, #15
 800c738:	b25b      	sxtb	r3, r3
 800c73a:	4313      	orrs	r3, r2
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2201      	movs	r2, #1
 800c748:	70da      	strb	r2, [r3, #3]
			break;
 800c74a:	e057      	b.n	800c7fc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	4413      	add	r3, r2
 800c756:	4619      	mov	r1, r3
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f7ff fe0d 	bl	800c378 <move_window>
 800c75e:	4603      	mov	r3, r0
 800c760:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c762:	7ffb      	ldrb	r3, [r7, #31]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d146      	bne.n	800c7f6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c776:	4413      	add	r3, r2
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	b292      	uxth	r2, r2
 800c77c:	4611      	mov	r1, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f7ff fb85 	bl	800be8e <st_word>
			fs->wflag = 1;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2201      	movs	r2, #1
 800c788:	70da      	strb	r2, [r3, #3]
			break;
 800c78a:	e037      	b.n	800c7fc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6a1a      	ldr	r2, [r3, #32]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	09db      	lsrs	r3, r3, #7
 800c794:	4413      	add	r3, r2
 800c796:	4619      	mov	r1, r3
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7ff fded 	bl	800c378 <move_window>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7a2:	7ffb      	ldrb	r3, [r7, #31]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d128      	bne.n	800c7fa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7bc:	4413      	add	r3, r2
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff fb42 	bl	800be48 <ld_dword>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c7ca:	4323      	orrs	r3, r4
 800c7cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7dc:	4413      	add	r3, r2
 800c7de:	6879      	ldr	r1, [r7, #4]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff fb6f 	bl	800bec4 <st_dword>
			fs->wflag = 1;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	70da      	strb	r2, [r3, #3]
			break;
 800c7ec:	e006      	b.n	800c7fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c7ee:	bf00      	nop
 800c7f0:	e004      	b.n	800c7fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c7f2:	bf00      	nop
 800c7f4:	e002      	b.n	800c7fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c7f6:	bf00      	nop
 800c7f8:	e000      	b.n	800c7fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c7fa:	bf00      	nop
		}
	}
	return res;
 800c7fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3724      	adds	r7, #36	; 0x24
 800c802:	46bd      	mov	sp, r7
 800c804:	bd90      	pop	{r4, r7, pc}

0800c806 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b088      	sub	sp, #32
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	60f8      	str	r0, [r7, #12]
 800c80e:	60b9      	str	r1, [r7, #8]
 800c810:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d904      	bls.n	800c82c <remove_chain+0x26>
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d301      	bcc.n	800c830 <remove_chain+0x2a>
 800c82c:	2302      	movs	r3, #2
 800c82e:	e04b      	b.n	800c8c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00c      	beq.n	800c850 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c836:	f04f 32ff 	mov.w	r2, #4294967295
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	69b8      	ldr	r0, [r7, #24]
 800c83e:	f7ff fefb 	bl	800c638 <put_fat>
 800c842:	4603      	mov	r3, r0
 800c844:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c846:	7ffb      	ldrb	r3, [r7, #31]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <remove_chain+0x4a>
 800c84c:	7ffb      	ldrb	r3, [r7, #31]
 800c84e:	e03b      	b.n	800c8c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fe4b 	bl	800c4ee <get_fat>
 800c858:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d031      	beq.n	800c8c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d101      	bne.n	800c86a <remove_chain+0x64>
 800c866:	2302      	movs	r3, #2
 800c868:	e02e      	b.n	800c8c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c870:	d101      	bne.n	800c876 <remove_chain+0x70>
 800c872:	2301      	movs	r3, #1
 800c874:	e028      	b.n	800c8c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c876:	2200      	movs	r2, #0
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	69b8      	ldr	r0, [r7, #24]
 800c87c:	f7ff fedc 	bl	800c638 <put_fat>
 800c880:	4603      	mov	r3, r0
 800c882:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c884:	7ffb      	ldrb	r3, [r7, #31]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <remove_chain+0x88>
 800c88a:	7ffb      	ldrb	r3, [r7, #31]
 800c88c:	e01c      	b.n	800c8c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	691a      	ldr	r2, [r3, #16]
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	3b02      	subs	r3, #2
 800c898:	429a      	cmp	r2, r3
 800c89a:	d20b      	bcs.n	800c8b4 <remove_chain+0xae>
			fs->free_clst++;
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	791b      	ldrb	r3, [r3, #4]
 800c8aa:	f043 0301 	orr.w	r3, r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d3c6      	bcc.n	800c850 <remove_chain+0x4a>
 800c8c2:	e000      	b.n	800c8c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c8c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3720      	adds	r7, #32
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b088      	sub	sp, #32
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10d      	bne.n	800c902 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d004      	beq.n	800c8fc <create_chain+0x2c>
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d31b      	bcc.n	800c934 <create_chain+0x64>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	61bb      	str	r3, [r7, #24]
 800c900:	e018      	b.n	800c934 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7ff fdf2 	bl	800c4ee <get_fat>
 800c90a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d801      	bhi.n	800c916 <create_chain+0x46>
 800c912:	2301      	movs	r3, #1
 800c914:	e070      	b.n	800c9f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91c:	d101      	bne.n	800c922 <create_chain+0x52>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	e06a      	b.n	800c9f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d201      	bcs.n	800c930 <create_chain+0x60>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	e063      	b.n	800c9f8 <create_chain+0x128>
		scl = clst;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	3301      	adds	r3, #1
 800c93c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	69fa      	ldr	r2, [r7, #28]
 800c944:	429a      	cmp	r2, r3
 800c946:	d307      	bcc.n	800c958 <create_chain+0x88>
				ncl = 2;
 800c948:	2302      	movs	r3, #2
 800c94a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c94c:	69fa      	ldr	r2, [r7, #28]
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	429a      	cmp	r2, r3
 800c952:	d901      	bls.n	800c958 <create_chain+0x88>
 800c954:	2300      	movs	r3, #0
 800c956:	e04f      	b.n	800c9f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c958:	69f9      	ldr	r1, [r7, #28]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff fdc7 	bl	800c4ee <get_fat>
 800c960:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00e      	beq.n	800c986 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d003      	beq.n	800c976 <create_chain+0xa6>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c974:	d101      	bne.n	800c97a <create_chain+0xaa>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	e03e      	b.n	800c9f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c97a:	69fa      	ldr	r2, [r7, #28]
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d1da      	bne.n	800c938 <create_chain+0x68>
 800c982:	2300      	movs	r3, #0
 800c984:	e038      	b.n	800c9f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c986:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c988:	f04f 32ff 	mov.w	r2, #4294967295
 800c98c:	69f9      	ldr	r1, [r7, #28]
 800c98e:	6938      	ldr	r0, [r7, #16]
 800c990:	f7ff fe52 	bl	800c638 <put_fat>
 800c994:	4603      	mov	r3, r0
 800c996:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c998:	7dfb      	ldrb	r3, [r7, #23]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d109      	bne.n	800c9b2 <create_chain+0xe2>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d006      	beq.n	800c9b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c9a4:	69fa      	ldr	r2, [r7, #28]
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6938      	ldr	r0, [r7, #16]
 800c9aa:	f7ff fe45 	bl	800c638 <put_fat>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d116      	bne.n	800c9e6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	69fa      	ldr	r2, [r7, #28]
 800c9bc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	691a      	ldr	r2, [r3, #16]
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	3b02      	subs	r3, #2
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d804      	bhi.n	800c9d6 <create_chain+0x106>
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	1e5a      	subs	r2, r3, #1
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	791b      	ldrb	r3, [r3, #4]
 800c9da:	f043 0301 	orr.w	r3, r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	711a      	strb	r2, [r3, #4]
 800c9e4:	e007      	b.n	800c9f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d102      	bne.n	800c9f2 <create_chain+0x122>
 800c9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f0:	e000      	b.n	800c9f4 <create_chain+0x124>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c9f6:	69fb      	ldr	r3, [r7, #28]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3720      	adds	r7, #32
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca14:	3304      	adds	r3, #4
 800ca16:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	0a5b      	lsrs	r3, r3, #9
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	8952      	ldrh	r2, [r2, #10]
 800ca20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca24:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	1d1a      	adds	r2, r3, #4
 800ca2a:	613a      	str	r2, [r7, #16]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <clmt_clust+0x3a>
 800ca36:	2300      	movs	r3, #0
 800ca38:	e010      	b.n	800ca5c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d307      	bcc.n	800ca52 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca50:	e7e9      	b.n	800ca26 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ca52:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	4413      	add	r3, r2
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca7e:	d204      	bcs.n	800ca8a <dir_sdi+0x22>
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	f003 031f 	and.w	r3, r3, #31
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	e063      	b.n	800cb56 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d106      	bne.n	800caae <dir_sdi+0x46>
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d902      	bls.n	800caae <dir_sdi+0x46>
		clst = fs->dirbase;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10c      	bne.n	800cace <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	095b      	lsrs	r3, r3, #5
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	8912      	ldrh	r2, [r2, #8]
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d301      	bcc.n	800cac4 <dir_sdi+0x5c>
 800cac0:	2302      	movs	r3, #2
 800cac2:	e048      	b.n	800cb56 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	61da      	str	r2, [r3, #28]
 800cacc:	e029      	b.n	800cb22 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	895b      	ldrh	r3, [r3, #10]
 800cad2:	025b      	lsls	r3, r3, #9
 800cad4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cad6:	e019      	b.n	800cb0c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6979      	ldr	r1, [r7, #20]
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff fd06 	bl	800c4ee <get_fat>
 800cae2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caea:	d101      	bne.n	800caf0 <dir_sdi+0x88>
 800caec:	2301      	movs	r3, #1
 800caee:	e032      	b.n	800cb56 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d904      	bls.n	800cb00 <dir_sdi+0x98>
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d301      	bcc.n	800cb04 <dir_sdi+0x9c>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e028      	b.n	800cb56 <dir_sdi+0xee>
			ofs -= csz;
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb0c:	683a      	ldr	r2, [r7, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d2e1      	bcs.n	800cad8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cb14:	6979      	ldr	r1, [r7, #20]
 800cb16:	6938      	ldr	r0, [r7, #16]
 800cb18:	f7ff fcca 	bl	800c4b0 <clust2sect>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	697a      	ldr	r2, [r7, #20]
 800cb26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	69db      	ldr	r3, [r3, #28]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <dir_sdi+0xcc>
 800cb30:	2302      	movs	r3, #2
 800cb32:	e010      	b.n	800cb56 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	69da      	ldr	r2, [r3, #28]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	0a5b      	lsrs	r3, r3, #9
 800cb3c:	441a      	add	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4e:	441a      	add	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b086      	sub	sp, #24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	3320      	adds	r3, #32
 800cb74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <dir_next+0x28>
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb84:	d301      	bcc.n	800cb8a <dir_next+0x2c>
 800cb86:	2304      	movs	r3, #4
 800cb88:	e0aa      	b.n	800cce0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f040 8098 	bne.w	800ccc6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	69db      	ldr	r3, [r3, #28]
 800cb9a:	1c5a      	adds	r2, r3, #1
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10b      	bne.n	800cbc0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	095b      	lsrs	r3, r3, #5
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	8912      	ldrh	r2, [r2, #8]
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	f0c0 8088 	bcc.w	800ccc6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	61da      	str	r2, [r3, #28]
 800cbbc:	2304      	movs	r3, #4
 800cbbe:	e08f      	b.n	800cce0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	0a5b      	lsrs	r3, r3, #9
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	8952      	ldrh	r2, [r2, #10]
 800cbc8:	3a01      	subs	r2, #1
 800cbca:	4013      	ands	r3, r2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d17a      	bne.n	800ccc6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7ff fc88 	bl	800c4ee <get_fat>
 800cbde:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d801      	bhi.n	800cbea <dir_next+0x8c>
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	e07a      	b.n	800cce0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf0:	d101      	bne.n	800cbf6 <dir_next+0x98>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e074      	b.n	800cce0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d358      	bcc.n	800ccb2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d104      	bne.n	800cc10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	61da      	str	r2, [r3, #28]
 800cc0c:	2304      	movs	r3, #4
 800cc0e:	e067      	b.n	800cce0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	4619      	mov	r1, r3
 800cc18:	4610      	mov	r0, r2
 800cc1a:	f7ff fe59 	bl	800c8d0 <create_chain>
 800cc1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d101      	bne.n	800cc2a <dir_next+0xcc>
 800cc26:	2307      	movs	r3, #7
 800cc28:	e05a      	b.n	800cce0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d101      	bne.n	800cc34 <dir_next+0xd6>
 800cc30:	2302      	movs	r3, #2
 800cc32:	e055      	b.n	800cce0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3a:	d101      	bne.n	800cc40 <dir_next+0xe2>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e04f      	b.n	800cce0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f7ff fb55 	bl	800c2f0 <sync_window>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <dir_next+0xf2>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e047      	b.n	800cce0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3330      	adds	r3, #48	; 0x30
 800cc54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc58:	2100      	movs	r1, #0
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff f97f 	bl	800bf5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc60:	2300      	movs	r3, #0
 800cc62:	613b      	str	r3, [r7, #16]
 800cc64:	6979      	ldr	r1, [r7, #20]
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f7ff fc22 	bl	800c4b0 <clust2sect>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	62da      	str	r2, [r3, #44]	; 0x2c
 800cc72:	e012      	b.n	800cc9a <dir_next+0x13c>
						fs->wflag = 1;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2201      	movs	r2, #1
 800cc78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff fb38 	bl	800c2f0 <sync_window>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <dir_next+0x12c>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e02a      	b.n	800cce0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	613b      	str	r3, [r7, #16]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	62da      	str	r2, [r3, #44]	; 0x2c
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	895b      	ldrh	r3, [r3, #10]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d3e6      	bcc.n	800cc74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	1ad2      	subs	r2, r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ccb8:	6979      	ldr	r1, [r7, #20]
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f7ff fbf8 	bl	800c4b0 <clust2sect>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd8:	441a      	add	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3718      	adds	r7, #24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff feb4 	bl	800ca68 <dir_sdi>
 800cd00:	4603      	mov	r3, r0
 800cd02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d12b      	bne.n	800cd62 <dir_alloc+0x7a>
		n = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	69db      	ldr	r3, [r3, #28]
 800cd12:	4619      	mov	r1, r3
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f7ff fb2f 	bl	800c378 <move_window>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d11d      	bne.n	800cd60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a1b      	ldr	r3, [r3, #32]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2be5      	cmp	r3, #229	; 0xe5
 800cd2c:	d004      	beq.n	800cd38 <dir_alloc+0x50>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d107      	bne.n	800cd48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	613b      	str	r3, [r7, #16]
 800cd3e:	693a      	ldr	r2, [r7, #16]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d102      	bne.n	800cd4c <dir_alloc+0x64>
 800cd46:	e00c      	b.n	800cd62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cd48:	2300      	movs	r3, #0
 800cd4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cd4c:	2101      	movs	r1, #1
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7ff ff05 	bl	800cb5e <dir_next>
 800cd54:	4603      	mov	r3, r0
 800cd56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0d7      	beq.n	800cd0e <dir_alloc+0x26>
 800cd5e:	e000      	b.n	800cd62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cd60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	d101      	bne.n	800cd6c <dir_alloc+0x84>
 800cd68:	2307      	movs	r3, #7
 800cd6a:	75fb      	strb	r3, [r7, #23]
	return res;
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b084      	sub	sp, #16
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	331a      	adds	r3, #26
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7ff f847 	bl	800be18 <ld_word>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d109      	bne.n	800cdaa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	3314      	adds	r3, #20
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff f83c 	bl	800be18 <ld_word>
 800cda0:	4603      	mov	r3, r0
 800cda2:	041b      	lsls	r3, r3, #16
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	331a      	adds	r3, #26
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	b292      	uxth	r2, r2
 800cdc8:	4611      	mov	r1, r2
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7ff f85f 	bl	800be8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b03      	cmp	r3, #3
 800cdd6:	d109      	bne.n	800cdec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f103 0214 	add.w	r2, r3, #20
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	0c1b      	lsrs	r3, r3, #16
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	4619      	mov	r1, r3
 800cde6:	4610      	mov	r0, r2
 800cde8:	f7ff f851 	bl	800be8e <st_word>
	}
}
 800cdec:	bf00      	nop
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce02:	2100      	movs	r1, #0
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7ff fe2f 	bl	800ca68 <dir_sdi>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce0e:	7dfb      	ldrb	r3, [r7, #23]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <dir_find+0x24>
 800ce14:	7dfb      	ldrb	r3, [r7, #23]
 800ce16:	e03e      	b.n	800ce96 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	69db      	ldr	r3, [r3, #28]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6938      	ldr	r0, [r7, #16]
 800ce20:	f7ff faaa 	bl	800c378 <move_window>
 800ce24:	4603      	mov	r3, r0
 800ce26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d12f      	bne.n	800ce8e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce36:	7bfb      	ldrb	r3, [r7, #15]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d102      	bne.n	800ce42 <dir_find+0x4e>
 800ce3c:	2304      	movs	r3, #4
 800ce3e:	75fb      	strb	r3, [r7, #23]
 800ce40:	e028      	b.n	800ce94 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a1b      	ldr	r3, [r3, #32]
 800ce46:	330b      	adds	r3, #11
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	330b      	adds	r3, #11
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	f003 0308 	and.w	r3, r3, #8
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <dir_find+0x86>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a18      	ldr	r0, [r3, #32]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3324      	adds	r3, #36	; 0x24
 800ce6c:	220b      	movs	r2, #11
 800ce6e:	4619      	mov	r1, r3
 800ce70:	f7ff f88f 	bl	800bf92 <mem_cmp>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00b      	beq.n	800ce92 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff fe6e 	bl	800cb5e <dir_next>
 800ce82:	4603      	mov	r3, r0
 800ce84:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d0c5      	beq.n	800ce18 <dir_find+0x24>
 800ce8c:	e002      	b.n	800ce94 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ce8e:	bf00      	nop
 800ce90:	e000      	b.n	800ce94 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ce92:	bf00      	nop

	return res;
 800ce94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b084      	sub	sp, #16
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ceac:	2101      	movs	r1, #1
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff ff1a 	bl	800cce8 <dir_alloc>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d11c      	bne.n	800cef8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	4619      	mov	r1, r3
 800cec4:	68b8      	ldr	r0, [r7, #8]
 800cec6:	f7ff fa57 	bl	800c378 <move_window>
 800ceca:	4603      	mov	r3, r0
 800cecc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d111      	bne.n	800cef8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a1b      	ldr	r3, [r3, #32]
 800ced8:	2220      	movs	r2, #32
 800ceda:	2100      	movs	r1, #0
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff f83e 	bl	800bf5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a18      	ldr	r0, [r3, #32]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	3324      	adds	r3, #36	; 0x24
 800ceea:	220b      	movs	r2, #11
 800ceec:	4619      	mov	r1, r3
 800ceee:	f7ff f815 	bl	800bf1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2201      	movs	r2, #1
 800cef6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
	...

0800cf04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3324      	adds	r3, #36	; 0x24
 800cf18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cf1a:	220b      	movs	r2, #11
 800cf1c:	2120      	movs	r1, #32
 800cf1e:	68b8      	ldr	r0, [r7, #8]
 800cf20:	f7ff f81d 	bl	800bf5e <mem_set>
	si = i = 0; ni = 8;
 800cf24:	2300      	movs	r3, #0
 800cf26:	613b      	str	r3, [r7, #16]
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	617b      	str	r3, [r7, #20]
 800cf2c:	2308      	movs	r3, #8
 800cf2e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	617a      	str	r2, [r7, #20]
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	4413      	add	r3, r2
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cf3e:	7ffb      	ldrb	r3, [r7, #31]
 800cf40:	2b20      	cmp	r3, #32
 800cf42:	d94e      	bls.n	800cfe2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cf44:	7ffb      	ldrb	r3, [r7, #31]
 800cf46:	2b2f      	cmp	r3, #47	; 0x2f
 800cf48:	d006      	beq.n	800cf58 <create_name+0x54>
 800cf4a:	7ffb      	ldrb	r3, [r7, #31]
 800cf4c:	2b5c      	cmp	r3, #92	; 0x5c
 800cf4e:	d110      	bne.n	800cf72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cf50:	e002      	b.n	800cf58 <create_name+0x54>
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	3301      	adds	r3, #1
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b2f      	cmp	r3, #47	; 0x2f
 800cf62:	d0f6      	beq.n	800cf52 <create_name+0x4e>
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	4413      	add	r3, r2
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b5c      	cmp	r3, #92	; 0x5c
 800cf6e:	d0f0      	beq.n	800cf52 <create_name+0x4e>
			break;
 800cf70:	e038      	b.n	800cfe4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cf72:	7ffb      	ldrb	r3, [r7, #31]
 800cf74:	2b2e      	cmp	r3, #46	; 0x2e
 800cf76:	d003      	beq.n	800cf80 <create_name+0x7c>
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d30c      	bcc.n	800cf9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	2b0b      	cmp	r3, #11
 800cf84:	d002      	beq.n	800cf8c <create_name+0x88>
 800cf86:	7ffb      	ldrb	r3, [r7, #31]
 800cf88:	2b2e      	cmp	r3, #46	; 0x2e
 800cf8a:	d001      	beq.n	800cf90 <create_name+0x8c>
 800cf8c:	2306      	movs	r3, #6
 800cf8e:	e044      	b.n	800d01a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cf90:	2308      	movs	r3, #8
 800cf92:	613b      	str	r3, [r7, #16]
 800cf94:	230b      	movs	r3, #11
 800cf96:	61bb      	str	r3, [r7, #24]
			continue;
 800cf98:	e022      	b.n	800cfe0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cf9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	da04      	bge.n	800cfac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cfa2:	7ffb      	ldrb	r3, [r7, #31]
 800cfa4:	3b80      	subs	r3, #128	; 0x80
 800cfa6:	4a1f      	ldr	r2, [pc, #124]	; (800d024 <create_name+0x120>)
 800cfa8:	5cd3      	ldrb	r3, [r2, r3]
 800cfaa:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cfac:	7ffb      	ldrb	r3, [r7, #31]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	481d      	ldr	r0, [pc, #116]	; (800d028 <create_name+0x124>)
 800cfb2:	f7ff f815 	bl	800bfe0 <chk_chr>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <create_name+0xbc>
 800cfbc:	2306      	movs	r3, #6
 800cfbe:	e02c      	b.n	800d01a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cfc0:	7ffb      	ldrb	r3, [r7, #31]
 800cfc2:	2b60      	cmp	r3, #96	; 0x60
 800cfc4:	d905      	bls.n	800cfd2 <create_name+0xce>
 800cfc6:	7ffb      	ldrb	r3, [r7, #31]
 800cfc8:	2b7a      	cmp	r3, #122	; 0x7a
 800cfca:	d802      	bhi.n	800cfd2 <create_name+0xce>
 800cfcc:	7ffb      	ldrb	r3, [r7, #31]
 800cfce:	3b20      	subs	r3, #32
 800cfd0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	1c5a      	adds	r2, r3, #1
 800cfd6:	613a      	str	r2, [r7, #16]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	4413      	add	r3, r2
 800cfdc:	7ffa      	ldrb	r2, [r7, #31]
 800cfde:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cfe0:	e7a6      	b.n	800cf30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cfe2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	441a      	add	r2, r3
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <create_name+0xf4>
 800cff4:	2306      	movs	r3, #6
 800cff6:	e010      	b.n	800d01a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2be5      	cmp	r3, #229	; 0xe5
 800cffe:	d102      	bne.n	800d006 <create_name+0x102>
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2205      	movs	r2, #5
 800d004:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d006:	7ffb      	ldrb	r3, [r7, #31]
 800d008:	2b20      	cmp	r3, #32
 800d00a:	d801      	bhi.n	800d010 <create_name+0x10c>
 800d00c:	2204      	movs	r2, #4
 800d00e:	e000      	b.n	800d012 <create_name+0x10e>
 800d010:	2200      	movs	r2, #0
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	330b      	adds	r3, #11
 800d016:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d018:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3720      	adds	r7, #32
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	0800ed44 	.word	0x0800ed44
 800d028:	0800ec6c 	.word	0x0800ec6c

0800d02c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d040:	e002      	b.n	800d048 <follow_path+0x1c>
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	3301      	adds	r3, #1
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b2f      	cmp	r3, #47	; 0x2f
 800d04e:	d0f8      	beq.n	800d042 <follow_path+0x16>
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b5c      	cmp	r3, #92	; 0x5c
 800d056:	d0f4      	beq.n	800d042 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	2200      	movs	r2, #0
 800d05c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b1f      	cmp	r3, #31
 800d064:	d80a      	bhi.n	800d07c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2280      	movs	r2, #128	; 0x80
 800d06a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d06e:	2100      	movs	r1, #0
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff fcf9 	bl	800ca68 <dir_sdi>
 800d076:	4603      	mov	r3, r0
 800d078:	75fb      	strb	r3, [r7, #23]
 800d07a:	e043      	b.n	800d104 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d07c:	463b      	mov	r3, r7
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff ff3f 	bl	800cf04 <create_name>
 800d086:	4603      	mov	r3, r0
 800d088:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d08a:	7dfb      	ldrb	r3, [r7, #23]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d134      	bne.n	800d0fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff feaf 	bl	800cdf4 <dir_find>
 800d096:	4603      	mov	r3, r0
 800d098:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d0a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00a      	beq.n	800d0be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	2b04      	cmp	r3, #4
 800d0ac:	d127      	bne.n	800d0fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d0ae:	7afb      	ldrb	r3, [r7, #11]
 800d0b0:	f003 0304 	and.w	r3, r3, #4
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d122      	bne.n	800d0fe <follow_path+0xd2>
 800d0b8:	2305      	movs	r3, #5
 800d0ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d0bc:	e01f      	b.n	800d0fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d0be:	7afb      	ldrb	r3, [r7, #11]
 800d0c0:	f003 0304 	and.w	r3, r3, #4
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d11c      	bne.n	800d102 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	799b      	ldrb	r3, [r3, #6]
 800d0cc:	f003 0310 	and.w	r3, r3, #16
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d102      	bne.n	800d0da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d0d4:	2305      	movs	r3, #5
 800d0d6:	75fb      	strb	r3, [r7, #23]
 800d0d8:	e014      	b.n	800d104 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e8:	4413      	add	r3, r2
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7ff fe42 	bl	800cd76 <ld_clust>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d0f8:	e7c0      	b.n	800d07c <follow_path+0x50>
			if (res != FR_OK) break;
 800d0fa:	bf00      	nop
 800d0fc:	e002      	b.n	800d104 <follow_path+0xd8>
				break;
 800d0fe:	bf00      	nop
 800d100:	e000      	b.n	800d104 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d102:	bf00      	nop
			}
		}
	}

	return res;
 800d104:	7dfb      	ldrb	r3, [r7, #23]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d10e:	b480      	push	{r7}
 800d110:	b087      	sub	sp, #28
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d116:	f04f 33ff 	mov.w	r3, #4294967295
 800d11a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d031      	beq.n	800d188 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	617b      	str	r3, [r7, #20]
 800d12a:	e002      	b.n	800d132 <get_ldnumber+0x24>
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	3301      	adds	r3, #1
 800d130:	617b      	str	r3, [r7, #20]
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b20      	cmp	r3, #32
 800d138:	d903      	bls.n	800d142 <get_ldnumber+0x34>
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	2b3a      	cmp	r3, #58	; 0x3a
 800d140:	d1f4      	bne.n	800d12c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b3a      	cmp	r3, #58	; 0x3a
 800d148:	d11c      	bne.n	800d184 <get_ldnumber+0x76>
			tp = *path;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	1c5a      	adds	r2, r3, #1
 800d154:	60fa      	str	r2, [r7, #12]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	3b30      	subs	r3, #48	; 0x30
 800d15a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	2b09      	cmp	r3, #9
 800d160:	d80e      	bhi.n	800d180 <get_ldnumber+0x72>
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	429a      	cmp	r2, r3
 800d168:	d10a      	bne.n	800d180 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d107      	bne.n	800d180 <get_ldnumber+0x72>
					vol = (int)i;
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	3301      	adds	r3, #1
 800d178:	617b      	str	r3, [r7, #20]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	697a      	ldr	r2, [r7, #20]
 800d17e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	e002      	b.n	800d18a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d184:	2300      	movs	r3, #0
 800d186:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d188:	693b      	ldr	r3, [r7, #16]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	371c      	adds	r7, #28
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
	...

0800d198 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	70da      	strb	r2, [r3, #3]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff f8e0 	bl	800c378 <move_window>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <check_fs+0x2a>
 800d1be:	2304      	movs	r3, #4
 800d1c0:	e038      	b.n	800d234 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3330      	adds	r3, #48	; 0x30
 800d1c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fe24 	bl	800be18 <ld_word>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d001      	beq.n	800d1e0 <check_fs+0x48>
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e029      	b.n	800d234 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1e6:	2be9      	cmp	r3, #233	; 0xe9
 800d1e8:	d009      	beq.n	800d1fe <check_fs+0x66>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1f0:	2beb      	cmp	r3, #235	; 0xeb
 800d1f2:	d11e      	bne.n	800d232 <check_fs+0x9a>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d1fa:	2b90      	cmp	r3, #144	; 0x90
 800d1fc:	d119      	bne.n	800d232 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	3330      	adds	r3, #48	; 0x30
 800d202:	3336      	adds	r3, #54	; 0x36
 800d204:	4618      	mov	r0, r3
 800d206:	f7fe fe1f 	bl	800be48 <ld_dword>
 800d20a:	4603      	mov	r3, r0
 800d20c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d210:	4a0a      	ldr	r2, [pc, #40]	; (800d23c <check_fs+0xa4>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d101      	bne.n	800d21a <check_fs+0x82>
 800d216:	2300      	movs	r3, #0
 800d218:	e00c      	b.n	800d234 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	3330      	adds	r3, #48	; 0x30
 800d21e:	3352      	adds	r3, #82	; 0x52
 800d220:	4618      	mov	r0, r3
 800d222:	f7fe fe11 	bl	800be48 <ld_dword>
 800d226:	4602      	mov	r2, r0
 800d228:	4b05      	ldr	r3, [pc, #20]	; (800d240 <check_fs+0xa8>)
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d101      	bne.n	800d232 <check_fs+0x9a>
 800d22e:	2300      	movs	r3, #0
 800d230:	e000      	b.n	800d234 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d232:	2302      	movs	r3, #2
}
 800d234:	4618      	mov	r0, r3
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	00544146 	.word	0x00544146
 800d240:	33544146 	.word	0x33544146

0800d244 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b096      	sub	sp, #88	; 0x58
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4613      	mov	r3, r2
 800d250:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f7ff ff58 	bl	800d10e <get_ldnumber>
 800d25e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d262:	2b00      	cmp	r3, #0
 800d264:	da01      	bge.n	800d26a <find_volume+0x26>
 800d266:	230b      	movs	r3, #11
 800d268:	e22e      	b.n	800d6c8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d26a:	4aa8      	ldr	r2, [pc, #672]	; (800d50c <find_volume+0x2c8>)
 800d26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d272:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <find_volume+0x3a>
 800d27a:	230c      	movs	r3, #12
 800d27c:	e224      	b.n	800d6c8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d282:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	f023 0301 	bic.w	r3, r3, #1
 800d28a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d01a      	beq.n	800d2ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d296:	785b      	ldrb	r3, [r3, #1]
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fe fd1f 	bl	800bcdc <disk_status>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d2a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2a8:	f003 0301 	and.w	r3, r3, #1
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10c      	bne.n	800d2ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d007      	beq.n	800d2c6 <find_volume+0x82>
 800d2b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2ba:	f003 0304 	and.w	r3, r3, #4
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d2c2:	230a      	movs	r3, #10
 800d2c4:	e200      	b.n	800d6c8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e1fe      	b.n	800d6c8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2da:	785b      	ldrb	r3, [r3, #1]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe fd17 	bl	800bd10 <disk_initialize>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d2e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e1e7      	b.n	800d6c8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d007      	beq.n	800d30e <find_volume+0xca>
 800d2fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d302:	f003 0304 	and.w	r3, r3, #4
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d30a:	230a      	movs	r3, #10
 800d30c:	e1dc      	b.n	800d6c8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d312:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d314:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d316:	f7ff ff3f 	bl	800d198 <check_fs>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d324:	2b02      	cmp	r3, #2
 800d326:	d14b      	bne.n	800d3c0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d328:	2300      	movs	r3, #0
 800d32a:	643b      	str	r3, [r7, #64]	; 0x40
 800d32c:	e01f      	b.n	800d36e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d336:	011b      	lsls	r3, r3, #4
 800d338:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d33c:	4413      	add	r3, r2
 800d33e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	3304      	adds	r3, #4
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d006      	beq.n	800d358 <find_volume+0x114>
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	3308      	adds	r3, #8
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fe fd7a 	bl	800be48 <ld_dword>
 800d354:	4602      	mov	r2, r0
 800d356:	e000      	b.n	800d35a <find_volume+0x116>
 800d358:	2200      	movs	r2, #0
 800d35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d362:	440b      	add	r3, r1
 800d364:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d36a:	3301      	adds	r3, #1
 800d36c:	643b      	str	r3, [r7, #64]	; 0x40
 800d36e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d370:	2b03      	cmp	r3, #3
 800d372:	d9dc      	bls.n	800d32e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d374:	2300      	movs	r3, #0
 800d376:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <find_volume+0x140>
 800d37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d380:	3b01      	subs	r3, #1
 800d382:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d38c:	4413      	add	r3, r2
 800d38e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d392:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d396:	2b00      	cmp	r3, #0
 800d398:	d005      	beq.n	800d3a6 <find_volume+0x162>
 800d39a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d39c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d39e:	f7ff fefb 	bl	800d198 <check_fs>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	e000      	b.n	800d3a8 <find_volume+0x164>
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d3ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d905      	bls.n	800d3c0 <find_volume+0x17c>
 800d3b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	643b      	str	r3, [r7, #64]	; 0x40
 800d3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3bc:	2b03      	cmp	r3, #3
 800d3be:	d9e1      	bls.n	800d384 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d3c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3c4:	2b04      	cmp	r3, #4
 800d3c6:	d101      	bne.n	800d3cc <find_volume+0x188>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e17d      	b.n	800d6c8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d3cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d901      	bls.n	800d3d8 <find_volume+0x194>
 800d3d4:	230d      	movs	r3, #13
 800d3d6:	e177      	b.n	800d6c8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3da:	3330      	adds	r3, #48	; 0x30
 800d3dc:	330b      	adds	r3, #11
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fd1a 	bl	800be18 <ld_word>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3ea:	d001      	beq.n	800d3f0 <find_volume+0x1ac>
 800d3ec:	230d      	movs	r3, #13
 800d3ee:	e16b      	b.n	800d6c8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	3330      	adds	r3, #48	; 0x30
 800d3f4:	3316      	adds	r3, #22
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fe fd0e 	bl	800be18 <ld_word>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d106      	bne.n	800d414 <find_volume+0x1d0>
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	3330      	adds	r3, #48	; 0x30
 800d40a:	3324      	adds	r3, #36	; 0x24
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe fd1b 	bl	800be48 <ld_dword>
 800d412:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d418:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	789b      	ldrb	r3, [r3, #2]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d005      	beq.n	800d438 <find_volume+0x1f4>
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	789b      	ldrb	r3, [r3, #2]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d001      	beq.n	800d438 <find_volume+0x1f4>
 800d434:	230d      	movs	r3, #13
 800d436:	e147      	b.n	800d6c8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	789b      	ldrb	r3, [r3, #2]
 800d43c:	461a      	mov	r2, r3
 800d43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d440:	fb02 f303 	mul.w	r3, r2, r3
 800d444:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d450:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d454:	895b      	ldrh	r3, [r3, #10]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d008      	beq.n	800d46c <find_volume+0x228>
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	895b      	ldrh	r3, [r3, #10]
 800d45e:	461a      	mov	r2, r3
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	895b      	ldrh	r3, [r3, #10]
 800d464:	3b01      	subs	r3, #1
 800d466:	4013      	ands	r3, r2
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <find_volume+0x22c>
 800d46c:	230d      	movs	r3, #13
 800d46e:	e12b      	b.n	800d6c8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d472:	3330      	adds	r3, #48	; 0x30
 800d474:	3311      	adds	r3, #17
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe fcce 	bl	800be18 <ld_word>
 800d47c:	4603      	mov	r3, r0
 800d47e:	461a      	mov	r2, r3
 800d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d482:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d486:	891b      	ldrh	r3, [r3, #8]
 800d488:	f003 030f 	and.w	r3, r3, #15
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <find_volume+0x252>
 800d492:	230d      	movs	r3, #13
 800d494:	e118      	b.n	800d6c8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d498:	3330      	adds	r3, #48	; 0x30
 800d49a:	3313      	adds	r3, #19
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fe fcbb 	bl	800be18 <ld_word>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <find_volume+0x276>
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ae:	3330      	adds	r3, #48	; 0x30
 800d4b0:	3320      	adds	r3, #32
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe fcc8 	bl	800be48 <ld_dword>
 800d4b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	3330      	adds	r3, #48	; 0x30
 800d4be:	330e      	adds	r3, #14
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fe fca9 	bl	800be18 <ld_word>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d4ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <find_volume+0x290>
 800d4d0:	230d      	movs	r3, #13
 800d4d2:	e0f9      	b.n	800d6c8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d4d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d8:	4413      	add	r3, r2
 800d4da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4dc:	8912      	ldrh	r2, [r2, #8]
 800d4de:	0912      	lsrs	r2, r2, #4
 800d4e0:	b292      	uxth	r2, r2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d4e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d201      	bcs.n	800d4f2 <find_volume+0x2ae>
 800d4ee:	230d      	movs	r3, #13
 800d4f0:	e0ea      	b.n	800d6c8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d4f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4fa:	8952      	ldrh	r2, [r2, #10]
 800d4fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d500:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d504:	2b00      	cmp	r3, #0
 800d506:	d103      	bne.n	800d510 <find_volume+0x2cc>
 800d508:	230d      	movs	r3, #13
 800d50a:	e0dd      	b.n	800d6c8 <find_volume+0x484>
 800d50c:	20001350 	.word	0x20001350
		fmt = FS_FAT32;
 800d510:	2303      	movs	r3, #3
 800d512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d518:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d802      	bhi.n	800d526 <find_volume+0x2e2>
 800d520:	2302      	movs	r3, #2
 800d522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d528:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d802      	bhi.n	800d536 <find_volume+0x2f2>
 800d530:	2301      	movs	r3, #1
 800d532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d538:	1c9a      	adds	r2, r3, #2
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d542:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d548:	441a      	add	r2, r3
 800d54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d54e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	441a      	add	r2, r3
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d55c:	2b03      	cmp	r3, #3
 800d55e:	d11e      	bne.n	800d59e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d562:	3330      	adds	r3, #48	; 0x30
 800d564:	332a      	adds	r3, #42	; 0x2a
 800d566:	4618      	mov	r0, r3
 800d568:	f7fe fc56 	bl	800be18 <ld_word>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <find_volume+0x332>
 800d572:	230d      	movs	r3, #13
 800d574:	e0a8      	b.n	800d6c8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d578:	891b      	ldrh	r3, [r3, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <find_volume+0x33e>
 800d57e:	230d      	movs	r3, #13
 800d580:	e0a2      	b.n	800d6c8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d584:	3330      	adds	r3, #48	; 0x30
 800d586:	332c      	adds	r3, #44	; 0x2c
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe fc5d 	bl	800be48 <ld_dword>
 800d58e:	4602      	mov	r2, r0
 800d590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d592:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	695b      	ldr	r3, [r3, #20]
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	647b      	str	r3, [r7, #68]	; 0x44
 800d59c:	e01f      	b.n	800d5de <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a0:	891b      	ldrh	r3, [r3, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d101      	bne.n	800d5aa <find_volume+0x366>
 800d5a6:	230d      	movs	r3, #13
 800d5a8:	e08e      	b.n	800d6c8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ac:	6a1a      	ldr	r2, [r3, #32]
 800d5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b0:	441a      	add	r2, r3
 800d5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d5b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d103      	bne.n	800d5c6 <find_volume+0x382>
 800d5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	e00a      	b.n	800d5dc <find_volume+0x398>
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	695a      	ldr	r2, [r3, #20]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	4413      	add	r3, r2
 800d5d0:	085a      	lsrs	r2, r3, #1
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d5dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e0:	699a      	ldr	r2, [r3, #24]
 800d5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d5e8:	0a5b      	lsrs	r3, r3, #9
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d201      	bcs.n	800d5f2 <find_volume+0x3ae>
 800d5ee:	230d      	movs	r3, #13
 800d5f0:	e06a      	b.n	800d6c8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f8:	611a      	str	r2, [r3, #16]
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fc:	691a      	ldr	r2, [r3, #16]
 800d5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d600:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d604:	2280      	movs	r2, #128	; 0x80
 800d606:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d60c:	2b03      	cmp	r3, #3
 800d60e:	d149      	bne.n	800d6a4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d612:	3330      	adds	r3, #48	; 0x30
 800d614:	3330      	adds	r3, #48	; 0x30
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fbfe 	bl	800be18 <ld_word>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d140      	bne.n	800d6a4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d624:	3301      	adds	r3, #1
 800d626:	4619      	mov	r1, r3
 800d628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d62a:	f7fe fea5 	bl	800c378 <move_window>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d137      	bne.n	800d6a4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	2200      	movs	r2, #0
 800d638:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63c:	3330      	adds	r3, #48	; 0x30
 800d63e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe fbe8 	bl	800be18 <ld_word>
 800d648:	4603      	mov	r3, r0
 800d64a:	461a      	mov	r2, r3
 800d64c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d650:	429a      	cmp	r2, r3
 800d652:	d127      	bne.n	800d6a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d656:	3330      	adds	r3, #48	; 0x30
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe fbf5 	bl	800be48 <ld_dword>
 800d65e:	4602      	mov	r2, r0
 800d660:	4b1b      	ldr	r3, [pc, #108]	; (800d6d0 <find_volume+0x48c>)
 800d662:	429a      	cmp	r2, r3
 800d664:	d11e      	bne.n	800d6a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	3330      	adds	r3, #48	; 0x30
 800d66a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fbea 	bl	800be48 <ld_dword>
 800d674:	4602      	mov	r2, r0
 800d676:	4b17      	ldr	r3, [pc, #92]	; (800d6d4 <find_volume+0x490>)
 800d678:	429a      	cmp	r2, r3
 800d67a:	d113      	bne.n	800d6a4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	3330      	adds	r3, #48	; 0x30
 800d680:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d684:	4618      	mov	r0, r3
 800d686:	f7fe fbdf 	bl	800be48 <ld_dword>
 800d68a:	4602      	mov	r2, r0
 800d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	3330      	adds	r3, #48	; 0x30
 800d694:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fe fbd5 	bl	800be48 <ld_dword>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d6aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <find_volume+0x494>)
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	4b08      	ldr	r3, [pc, #32]	; (800d6d8 <find_volume+0x494>)
 800d6b6:	801a      	strh	r2, [r3, #0]
 800d6b8:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <find_volume+0x494>)
 800d6ba:	881a      	ldrh	r2, [r3, #0]
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d6c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6c2:	f7fe fdf1 	bl	800c2a8 <clear_lock>
#endif
	return FR_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3758      	adds	r7, #88	; 0x58
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	41615252 	.word	0x41615252
 800d6d4:	61417272 	.word	0x61417272
 800d6d8:	20001354 	.word	0x20001354

0800d6dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d6e6:	2309      	movs	r3, #9
 800d6e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01c      	beq.n	800d72a <validate+0x4e>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d018      	beq.n	800d72a <validate+0x4e>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d013      	beq.n	800d72a <validate+0x4e>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	889a      	ldrh	r2, [r3, #4]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	88db      	ldrh	r3, [r3, #6]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d10c      	bne.n	800d72a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	785b      	ldrb	r3, [r3, #1]
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe fae0 	bl	800bcdc <disk_status>
 800d71c:	4603      	mov	r3, r0
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <validate+0x4e>
			res = FR_OK;
 800d726:	2300      	movs	r3, #0
 800d728:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d102      	bne.n	800d736 <validate+0x5a>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	e000      	b.n	800d738 <validate+0x5c>
 800d736:	2300      	movs	r3, #0
 800d738:	683a      	ldr	r2, [r7, #0]
 800d73a:	6013      	str	r3, [r2, #0]
	return res;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
	...

0800d748 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d75a:	f107 0310 	add.w	r3, r7, #16
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff fcd5 	bl	800d10e <get_ldnumber>
 800d764:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	da01      	bge.n	800d770 <f_mount+0x28>
 800d76c:	230b      	movs	r3, #11
 800d76e:	e02b      	b.n	800d7c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d770:	4a17      	ldr	r2, [pc, #92]	; (800d7d0 <f_mount+0x88>)
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d778:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d005      	beq.n	800d78c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d780:	69b8      	ldr	r0, [r7, #24]
 800d782:	f7fe fd91 	bl	800c2a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	2200      	movs	r2, #0
 800d78a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	490d      	ldr	r1, [pc, #52]	; (800d7d0 <f_mount+0x88>)
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <f_mount+0x66>
 800d7a8:	79fb      	ldrb	r3, [r7, #7]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d001      	beq.n	800d7b2 <f_mount+0x6a>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e00a      	b.n	800d7c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d7b2:	f107 010c 	add.w	r1, r7, #12
 800d7b6:	f107 0308 	add.w	r3, r7, #8
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff fd41 	bl	800d244 <find_volume>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3720      	adds	r7, #32
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20001350 	.word	0x20001350

0800d7d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b098      	sub	sp, #96	; 0x60
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <f_open+0x18>
 800d7e8:	2309      	movs	r3, #9
 800d7ea:	e1ad      	b.n	800db48 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d7ec:	79fb      	ldrb	r3, [r7, #7]
 800d7ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d7f4:	79fa      	ldrb	r2, [r7, #7]
 800d7f6:	f107 0110 	add.w	r1, r7, #16
 800d7fa:	f107 0308 	add.w	r3, r7, #8
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fd20 	bl	800d244 <find_volume>
 800d804:	4603      	mov	r3, r0
 800d806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d80a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f040 8191 	bne.w	800db36 <f_open+0x362>
		dj.obj.fs = fs;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	f107 0314 	add.w	r3, r7, #20
 800d81e:	4611      	mov	r1, r2
 800d820:	4618      	mov	r0, r3
 800d822:	f7ff fc03 	bl	800d02c <follow_path>
 800d826:	4603      	mov	r3, r0
 800d828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d82c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d830:	2b00      	cmp	r3, #0
 800d832:	d11a      	bne.n	800d86a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d834:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d838:	b25b      	sxtb	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	da03      	bge.n	800d846 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d83e:	2306      	movs	r3, #6
 800d840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d844:	e011      	b.n	800d86a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d846:	79fb      	ldrb	r3, [r7, #7]
 800d848:	f023 0301 	bic.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	bf14      	ite	ne
 800d850:	2301      	movne	r3, #1
 800d852:	2300      	moveq	r3, #0
 800d854:	b2db      	uxtb	r3, r3
 800d856:	461a      	mov	r2, r3
 800d858:	f107 0314 	add.w	r3, r7, #20
 800d85c:	4611      	mov	r1, r2
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fbda 	bl	800c018 <chk_lock>
 800d864:	4603      	mov	r3, r0
 800d866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d86a:	79fb      	ldrb	r3, [r7, #7]
 800d86c:	f003 031c 	and.w	r3, r3, #28
 800d870:	2b00      	cmp	r3, #0
 800d872:	d07f      	beq.n	800d974 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d017      	beq.n	800d8ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d87c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d880:	2b04      	cmp	r3, #4
 800d882:	d10e      	bne.n	800d8a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d884:	f7fe fc24 	bl	800c0d0 <enq_lock>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d006      	beq.n	800d89c <f_open+0xc8>
 800d88e:	f107 0314 	add.w	r3, r7, #20
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff fb03 	bl	800ce9e <dir_register>
 800d898:	4603      	mov	r3, r0
 800d89a:	e000      	b.n	800d89e <f_open+0xca>
 800d89c:	2312      	movs	r3, #18
 800d89e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d8a2:	79fb      	ldrb	r3, [r7, #7]
 800d8a4:	f043 0308 	orr.w	r3, r3, #8
 800d8a8:	71fb      	strb	r3, [r7, #7]
 800d8aa:	e010      	b.n	800d8ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d8ac:	7ebb      	ldrb	r3, [r7, #26]
 800d8ae:	f003 0311 	and.w	r3, r3, #17
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d003      	beq.n	800d8be <f_open+0xea>
					res = FR_DENIED;
 800d8b6:	2307      	movs	r3, #7
 800d8b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d8bc:	e007      	b.n	800d8ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d8be:	79fb      	ldrb	r3, [r7, #7]
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <f_open+0xfa>
 800d8c8:	2308      	movs	r3, #8
 800d8ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d8ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d168      	bne.n	800d9a8 <f_open+0x1d4>
 800d8d6:	79fb      	ldrb	r3, [r7, #7]
 800d8d8:	f003 0308 	and.w	r3, r3, #8
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d063      	beq.n	800d9a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d8e0:	f7fb fa04 	bl	8008cec <get_fattime>
 800d8e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e8:	330e      	adds	r3, #14
 800d8ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7fe fae9 	bl	800bec4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f4:	3316      	adds	r3, #22
 800d8f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fe fae3 	bl	800bec4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d900:	330b      	adds	r3, #11
 800d902:	2220      	movs	r2, #32
 800d904:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d90a:	4611      	mov	r1, r2
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff fa32 	bl	800cd76 <ld_clust>
 800d912:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d918:	2200      	movs	r2, #0
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7ff fa4a 	bl	800cdb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d922:	331c      	adds	r3, #28
 800d924:	2100      	movs	r1, #0
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe facc 	bl	800bec4 <st_dword>
					fs->wflag = 1;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	2201      	movs	r2, #1
 800d930:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d934:	2b00      	cmp	r3, #0
 800d936:	d037      	beq.n	800d9a8 <f_open+0x1d4>
						dw = fs->winsect;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d93e:	f107 0314 	add.w	r3, r7, #20
 800d942:	2200      	movs	r2, #0
 800d944:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe ff5d 	bl	800c806 <remove_chain>
 800d94c:	4603      	mov	r3, r0
 800d94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d956:	2b00      	cmp	r3, #0
 800d958:	d126      	bne.n	800d9a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe fd0a 	bl	800c378 <move_window>
 800d964:	4603      	mov	r3, r0
 800d966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d96e:	3a01      	subs	r2, #1
 800d970:	60da      	str	r2, [r3, #12]
 800d972:	e019      	b.n	800d9a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d115      	bne.n	800d9a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d97c:	7ebb      	ldrb	r3, [r7, #26]
 800d97e:	f003 0310 	and.w	r3, r3, #16
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <f_open+0x1ba>
					res = FR_NO_FILE;
 800d986:	2304      	movs	r3, #4
 800d988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d98c:	e00c      	b.n	800d9a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	f003 0302 	and.w	r3, r3, #2
 800d994:	2b00      	cmp	r3, #0
 800d996:	d007      	beq.n	800d9a8 <f_open+0x1d4>
 800d998:	7ebb      	ldrb	r3, [r7, #26]
 800d99a:	f003 0301 	and.w	r3, r3, #1
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d002      	beq.n	800d9a8 <f_open+0x1d4>
						res = FR_DENIED;
 800d9a2:	2307      	movs	r3, #7
 800d9a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d9a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d128      	bne.n	800da02 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	f003 0308 	and.w	r3, r3, #8
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d9ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d9d0:	79fb      	ldrb	r3, [r7, #7]
 800d9d2:	f023 0301 	bic.w	r3, r3, #1
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	bf14      	ite	ne
 800d9da:	2301      	movne	r3, #1
 800d9dc:	2300      	moveq	r3, #0
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	f107 0314 	add.w	r3, r7, #20
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fe fb93 	bl	800c114 <inc_lock>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d102      	bne.n	800da02 <f_open+0x22e>
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800da02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da06:	2b00      	cmp	r3, #0
 800da08:	f040 8095 	bne.w	800db36 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da10:	4611      	mov	r1, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff f9af 	bl	800cd76 <ld_clust>
 800da18:	4602      	mov	r2, r0
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800da1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da20:	331c      	adds	r3, #28
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe fa10 	bl	800be48 <ld_dword>
 800da28:	4602      	mov	r2, r0
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2200      	movs	r2, #0
 800da32:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	88da      	ldrh	r2, [r3, #6]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	79fa      	ldrb	r2, [r7, #7]
 800da46:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2200      	movs	r2, #0
 800da58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3330      	adds	r3, #48	; 0x30
 800da5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da62:	2100      	movs	r1, #0
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fa7a 	bl	800bf5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800da6a:	79fb      	ldrb	r3, [r7, #7]
 800da6c:	f003 0320 	and.w	r3, r3, #32
 800da70:	2b00      	cmp	r3, #0
 800da72:	d060      	beq.n	800db36 <f_open+0x362>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d05c      	beq.n	800db36 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	68da      	ldr	r2, [r3, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	895b      	ldrh	r3, [r3, #10]
 800da88:	025b      	lsls	r3, r3, #9
 800da8a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	657b      	str	r3, [r7, #84]	; 0x54
 800da98:	e016      	b.n	800dac8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fe fd25 	bl	800c4ee <get_fat>
 800daa4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800daa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d802      	bhi.n	800dab2 <f_open+0x2de>
 800daac:	2302      	movs	r3, #2
 800daae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab8:	d102      	bne.n	800dac0 <f_open+0x2ec>
 800daba:	2301      	movs	r3, #1
 800dabc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	657b      	str	r3, [r7, #84]	; 0x54
 800dac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d103      	bne.n	800dad8 <f_open+0x304>
 800dad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d8e0      	bhi.n	800da9a <f_open+0x2c6>
				}
				fp->clust = clst;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dadc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d127      	bne.n	800db36 <f_open+0x362>
 800dae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daec:	2b00      	cmp	r3, #0
 800daee:	d022      	beq.n	800db36 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fcdb 	bl	800c4b0 <clust2sect>
 800dafa:	6478      	str	r0, [r7, #68]	; 0x44
 800dafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d103      	bne.n	800db0a <f_open+0x336>
						res = FR_INT_ERR;
 800db02:	2302      	movs	r3, #2
 800db04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db08:	e015      	b.n	800db36 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800db0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db0c:	0a5a      	lsrs	r2, r3, #9
 800db0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db10:	441a      	add	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	7858      	ldrb	r0, [r3, #1]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6a1a      	ldr	r2, [r3, #32]
 800db24:	2301      	movs	r3, #1
 800db26:	f7fe f919 	bl	800bd5c <disk_read>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <f_open+0x362>
 800db30:	2301      	movs	r3, #1
 800db32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800db36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <f_open+0x370>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800db44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3760      	adds	r7, #96	; 0x60
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08e      	sub	sp, #56	; 0x38
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	2200      	movs	r2, #0
 800db66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f107 0214 	add.w	r2, r7, #20
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f7ff fdb3 	bl	800d6dc <validate>
 800db76:	4603      	mov	r3, r0
 800db78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800db7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db80:	2b00      	cmp	r3, #0
 800db82:	d107      	bne.n	800db94 <f_read+0x44>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	7d5b      	ldrb	r3, [r3, #21]
 800db88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800db8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <f_read+0x4a>
 800db94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db98:	e115      	b.n	800ddc6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	7d1b      	ldrb	r3, [r3, #20]
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <f_read+0x5a>
 800dba6:	2307      	movs	r3, #7
 800dba8:	e10d      	b.n	800ddc6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	68da      	ldr	r2, [r3, #12]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	6a3b      	ldr	r3, [r7, #32]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	f240 80fe 	bls.w	800ddbc <f_read+0x26c>
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dbc4:	e0fa      	b.n	800ddbc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f040 80c6 	bne.w	800dd60 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	0a5b      	lsrs	r3, r3, #9
 800dbda:	697a      	ldr	r2, [r7, #20]
 800dbdc:	8952      	ldrh	r2, [r2, #10]
 800dbde:	3a01      	subs	r2, #1
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d12f      	bne.n	800dc4a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d103      	bne.n	800dbfa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	633b      	str	r3, [r7, #48]	; 0x30
 800dbf8:	e013      	b.n	800dc22 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d007      	beq.n	800dc12 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	699b      	ldr	r3, [r3, #24]
 800dc06:	4619      	mov	r1, r3
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f7fe fef9 	bl	800ca00 <clmt_clust>
 800dc0e:	6338      	str	r0, [r7, #48]	; 0x30
 800dc10:	e007      	b.n	800dc22 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	69db      	ldr	r3, [r3, #28]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	f7fe fc67 	bl	800c4ee <get_fat>
 800dc20:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d804      	bhi.n	800dc32 <f_read+0xe2>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	755a      	strb	r2, [r3, #21]
 800dc2e:	2302      	movs	r3, #2
 800dc30:	e0c9      	b.n	800ddc6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc38:	d104      	bne.n	800dc44 <f_read+0xf4>
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	755a      	strb	r2, [r3, #21]
 800dc40:	2301      	movs	r3, #1
 800dc42:	e0c0      	b.n	800ddc6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc48:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	69db      	ldr	r3, [r3, #28]
 800dc50:	4619      	mov	r1, r3
 800dc52:	4610      	mov	r0, r2
 800dc54:	f7fe fc2c 	bl	800c4b0 <clust2sect>
 800dc58:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d104      	bne.n	800dc6a <f_read+0x11a>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2202      	movs	r2, #2
 800dc64:	755a      	strb	r2, [r3, #21]
 800dc66:	2302      	movs	r3, #2
 800dc68:	e0ad      	b.n	800ddc6 <f_read+0x276>
			sect += csect;
 800dc6a:	69ba      	ldr	r2, [r7, #24]
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	4413      	add	r3, r2
 800dc70:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	0a5b      	lsrs	r3, r3, #9
 800dc76:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d039      	beq.n	800dcf2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dc7e:	69fa      	ldr	r2, [r7, #28]
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	4413      	add	r3, r2
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	8952      	ldrh	r2, [r2, #10]
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d905      	bls.n	800dc98 <f_read+0x148>
					cc = fs->csize - csect;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	895b      	ldrh	r3, [r3, #10]
 800dc90:	461a      	mov	r2, r3
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	7858      	ldrb	r0, [r3, #1]
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	69ba      	ldr	r2, [r7, #24]
 800dca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dca2:	f7fe f85b 	bl	800bd5c <disk_read>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <f_read+0x166>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	755a      	strb	r2, [r3, #21]
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e087      	b.n	800ddc6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	7d1b      	ldrb	r3, [r3, #20]
 800dcba:	b25b      	sxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	da14      	bge.n	800dcea <f_read+0x19a>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6a1a      	ldr	r2, [r3, #32]
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d90d      	bls.n	800dcea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6a1a      	ldr	r2, [r3, #32]
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	025b      	lsls	r3, r3, #9
 800dcd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcda:	18d0      	adds	r0, r2, r3
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	3330      	adds	r3, #48	; 0x30
 800dce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dce4:	4619      	mov	r1, r3
 800dce6:	f7fe f919 	bl	800bf1c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcec:	025b      	lsls	r3, r3, #9
 800dcee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800dcf0:	e050      	b.n	800dd94 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6a1b      	ldr	r3, [r3, #32]
 800dcf6:	69ba      	ldr	r2, [r7, #24]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d02e      	beq.n	800dd5a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	7d1b      	ldrb	r3, [r3, #20]
 800dd00:	b25b      	sxtb	r3, r3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	da18      	bge.n	800dd38 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	7858      	ldrb	r0, [r3, #1]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6a1a      	ldr	r2, [r3, #32]
 800dd14:	2301      	movs	r3, #1
 800dd16:	f7fe f841 	bl	800bd9c <disk_write>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d004      	beq.n	800dd2a <f_read+0x1da>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2201      	movs	r2, #1
 800dd24:	755a      	strb	r2, [r3, #21]
 800dd26:	2301      	movs	r3, #1
 800dd28:	e04d      	b.n	800ddc6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	7d1b      	ldrb	r3, [r3, #20]
 800dd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	7858      	ldrb	r0, [r3, #1]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd42:	2301      	movs	r3, #1
 800dd44:	69ba      	ldr	r2, [r7, #24]
 800dd46:	f7fe f809 	bl	800bd5c <disk_read>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d004      	beq.n	800dd5a <f_read+0x20a>
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2201      	movs	r2, #1
 800dd54:	755a      	strb	r2, [r3, #21]
 800dd56:	2301      	movs	r3, #1
 800dd58:	e035      	b.n	800ddc6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	69ba      	ldr	r2, [r7, #24]
 800dd5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	699b      	ldr	r3, [r3, #24]
 800dd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dd6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d901      	bls.n	800dd7a <f_read+0x22a>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	699b      	ldr	r3, [r3, #24]
 800dd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd88:	4413      	add	r3, r2
 800dd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd90:	f7fe f8c4 	bl	800bf1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dd94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	4413      	add	r3, r2
 800dd9a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	699a      	ldr	r2, [r3, #24]
 800dda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda2:	441a      	add	r2, r3
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	619a      	str	r2, [r3, #24]
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	441a      	add	r2, r3
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f47f af01 	bne.w	800dbc6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3738      	adds	r7, #56	; 0x38
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b086      	sub	sp, #24
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f107 0208 	add.w	r2, r7, #8
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7ff fc7c 	bl	800d6dc <validate>
 800dde4:	4603      	mov	r3, r0
 800dde6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d168      	bne.n	800dec0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7d1b      	ldrb	r3, [r3, #20]
 800ddf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d062      	beq.n	800dec0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	7d1b      	ldrb	r3, [r3, #20]
 800ddfe:	b25b      	sxtb	r3, r3
 800de00:	2b00      	cmp	r3, #0
 800de02:	da15      	bge.n	800de30 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	7858      	ldrb	r0, [r3, #1]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a1a      	ldr	r2, [r3, #32]
 800de12:	2301      	movs	r3, #1
 800de14:	f7fd ffc2 	bl	800bd9c <disk_write>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <f_sync+0x54>
 800de1e:	2301      	movs	r3, #1
 800de20:	e04f      	b.n	800dec2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	7d1b      	ldrb	r3, [r3, #20]
 800de26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800de30:	f7fa ff5c 	bl	8008cec <get_fattime>
 800de34:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800de36:	68ba      	ldr	r2, [r7, #8]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3c:	4619      	mov	r1, r3
 800de3e:	4610      	mov	r0, r2
 800de40:	f7fe fa9a 	bl	800c378 <move_window>
 800de44:	4603      	mov	r3, r0
 800de46:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d138      	bne.n	800dec0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de52:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	330b      	adds	r3, #11
 800de58:	781a      	ldrb	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	330b      	adds	r3, #11
 800de5e:	f042 0220 	orr.w	r2, r2, #32
 800de62:	b2d2      	uxtb	r2, r2
 800de64:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6818      	ldr	r0, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	461a      	mov	r2, r3
 800de70:	68f9      	ldr	r1, [r7, #12]
 800de72:	f7fe ff9f 	bl	800cdb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f103 021c 	add.w	r2, r3, #28
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f7fe f81e 	bl	800bec4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	3316      	adds	r3, #22
 800de8c:	6939      	ldr	r1, [r7, #16]
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe f818 	bl	800bec4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	3312      	adds	r3, #18
 800de98:	2100      	movs	r1, #0
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fd fff7 	bl	800be8e <st_word>
					fs->wflag = 1;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2201      	movs	r2, #1
 800dea4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe fa93 	bl	800c3d4 <sync_fs>
 800deae:	4603      	mov	r3, r0
 800deb0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	7d1b      	ldrb	r3, [r3, #20]
 800deb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800deba:	b2da      	uxtb	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3718      	adds	r7, #24
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b084      	sub	sp, #16
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff ff7b 	bl	800ddce <f_sync>
 800ded8:	4603      	mov	r3, r0
 800deda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d118      	bne.n	800df14 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f107 0208 	add.w	r2, r7, #8
 800dee8:	4611      	mov	r1, r2
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff fbf6 	bl	800d6dc <validate>
 800def0:	4603      	mov	r3, r0
 800def2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800def4:	7bfb      	ldrb	r3, [r7, #15]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10c      	bne.n	800df14 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe f996 	bl	800c230 <dec_lock>
 800df04:	4603      	mov	r3, r0
 800df06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800df08:	7bfb      	ldrb	r3, [r7, #15]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d102      	bne.n	800df14 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800df14:	7bfb      	ldrb	r3, [r7, #15]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b090      	sub	sp, #64	; 0x40
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f107 0208 	add.w	r2, r7, #8
 800df2e:	4611      	mov	r1, r2
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff fbd3 	bl	800d6dc <validate>
 800df36:	4603      	mov	r3, r0
 800df38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800df3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df40:	2b00      	cmp	r3, #0
 800df42:	d103      	bne.n	800df4c <f_lseek+0x2e>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	7d5b      	ldrb	r3, [r3, #21]
 800df48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800df4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <f_lseek+0x3c>
 800df54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df58:	e1e6      	b.n	800e328 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f000 80d1 	beq.w	800e106 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6a:	d15a      	bne.n	800e022 <f_lseek+0x104>
			tbl = fp->cltbl;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df70:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	1d1a      	adds	r2, r3, #4
 800df76:	627a      	str	r2, [r7, #36]	; 0x24
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	2302      	movs	r3, #2
 800df7e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d03a      	beq.n	800e002 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800df8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8e:	613b      	str	r3, [r7, #16]
 800df90:	2300      	movs	r3, #0
 800df92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df96:	3302      	adds	r3, #2
 800df98:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe faa0 	bl	800c4ee <get_fat>
 800dfae:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d804      	bhi.n	800dfc0 <f_lseek+0xa2>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	755a      	strb	r2, [r3, #21]
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	e1b3      	b.n	800e328 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc6:	d104      	bne.n	800dfd2 <f_lseek+0xb4>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	755a      	strb	r2, [r3, #21]
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e1aa      	b.n	800e328 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d0de      	beq.n	800df9a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dfdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d809      	bhi.n	800dff8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	1d1a      	adds	r2, r3, #4
 800dfe8:	627a      	str	r2, [r7, #36]	; 0x24
 800dfea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff0:	1d1a      	adds	r2, r3, #4
 800dff2:	627a      	str	r2, [r7, #36]	; 0x24
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dffe:	429a      	cmp	r2, r3
 800e000:	d3c4      	bcc.n	800df8c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e008:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d803      	bhi.n	800e01a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	2200      	movs	r2, #0
 800e016:	601a      	str	r2, [r3, #0]
 800e018:	e184      	b.n	800e324 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e01a:	2311      	movs	r3, #17
 800e01c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e020:	e180      	b.n	800e324 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d902      	bls.n	800e032 <f_lseek+0x114>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 8172 	beq.w	800e324 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	3b01      	subs	r3, #1
 800e044:	4619      	mov	r1, r3
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7fe fcda 	bl	800ca00 <clmt_clust>
 800e04c:	4602      	mov	r2, r0
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	69db      	ldr	r3, [r3, #28]
 800e058:	4619      	mov	r1, r3
 800e05a:	4610      	mov	r0, r2
 800e05c:	f7fe fa28 	bl	800c4b0 <clust2sect>
 800e060:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d104      	bne.n	800e072 <f_lseek+0x154>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2202      	movs	r2, #2
 800e06c:	755a      	strb	r2, [r3, #21]
 800e06e:	2302      	movs	r3, #2
 800e070:	e15a      	b.n	800e328 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	3b01      	subs	r3, #1
 800e076:	0a5b      	lsrs	r3, r3, #9
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	8952      	ldrh	r2, [r2, #10]
 800e07c:	3a01      	subs	r2, #1
 800e07e:	4013      	ands	r3, r2
 800e080:	69ba      	ldr	r2, [r7, #24]
 800e082:	4413      	add	r3, r2
 800e084:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	699b      	ldr	r3, [r3, #24]
 800e08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f000 8148 	beq.w	800e324 <f_lseek+0x406>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a1b      	ldr	r3, [r3, #32]
 800e098:	69ba      	ldr	r2, [r7, #24]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	f000 8142 	beq.w	800e324 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	7d1b      	ldrb	r3, [r3, #20]
 800e0a4:	b25b      	sxtb	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	da18      	bge.n	800e0dc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	7858      	ldrb	r0, [r3, #1]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a1a      	ldr	r2, [r3, #32]
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	f7fd fe6f 	bl	800bd9c <disk_write>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d004      	beq.n	800e0ce <f_lseek+0x1b0>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	755a      	strb	r2, [r3, #21]
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e12c      	b.n	800e328 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	7d1b      	ldrb	r3, [r3, #20]
 800e0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	7858      	ldrb	r0, [r3, #1]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	69ba      	ldr	r2, [r7, #24]
 800e0ea:	f7fd fe37 	bl	800bd5c <disk_read>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d004      	beq.n	800e0fe <f_lseek+0x1e0>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	755a      	strb	r2, [r3, #21]
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e114      	b.n	800e328 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	69ba      	ldr	r2, [r7, #24]
 800e102:	621a      	str	r2, [r3, #32]
 800e104:	e10e      	b.n	800e324 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d908      	bls.n	800e122 <f_lseek+0x204>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	7d1b      	ldrb	r3, [r3, #20]
 800e114:	f003 0302 	and.w	r3, r3, #2
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d102      	bne.n	800e122 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	637b      	str	r3, [r7, #52]	; 0x34
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e130:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 80a7 	beq.w	800e288 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	895b      	ldrh	r3, [r3, #10]
 800e13e:	025b      	lsls	r3, r3, #9
 800e140:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01b      	beq.n	800e180 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	1e5a      	subs	r2, r3, #1
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	1e59      	subs	r1, r3, #1
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d30f      	bcc.n	800e180 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e160:	6a3b      	ldr	r3, [r7, #32]
 800e162:	1e5a      	subs	r2, r3, #1
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	425b      	negs	r3, r3
 800e168:	401a      	ands	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	699b      	ldr	r3, [r3, #24]
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	69db      	ldr	r3, [r3, #28]
 800e17c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e17e:	e022      	b.n	800e1c6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d119      	bne.n	800e1c0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2100      	movs	r1, #0
 800e190:	4618      	mov	r0, r3
 800e192:	f7fe fb9d 	bl	800c8d0 <create_chain>
 800e196:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d104      	bne.n	800e1a8 <f_lseek+0x28a>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	755a      	strb	r2, [r3, #21]
 800e1a4:	2302      	movs	r3, #2
 800e1a6:	e0bf      	b.n	800e328 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ae:	d104      	bne.n	800e1ba <f_lseek+0x29c>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	755a      	strb	r2, [r3, #21]
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e0b6      	b.n	800e328 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1be:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1c4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d05d      	beq.n	800e288 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e1cc:	e03a      	b.n	800e244 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	603b      	str	r3, [r7, #0]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	699a      	ldr	r2, [r3, #24]
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	441a      	add	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	7d1b      	ldrb	r3, [r3, #20]
 800e1e6:	f003 0302 	and.w	r3, r3, #2
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00b      	beq.n	800e206 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe fb6c 	bl	800c8d0 <create_chain>
 800e1f8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d108      	bne.n	800e212 <f_lseek+0x2f4>
							ofs = 0; break;
 800e200:	2300      	movs	r3, #0
 800e202:	603b      	str	r3, [r7, #0]
 800e204:	e022      	b.n	800e24c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe f96f 	bl	800c4ee <get_fat>
 800e210:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e218:	d104      	bne.n	800e224 <f_lseek+0x306>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	755a      	strb	r2, [r3, #21]
 800e220:	2301      	movs	r3, #1
 800e222:	e081      	b.n	800e328 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e226:	2b01      	cmp	r3, #1
 800e228:	d904      	bls.n	800e234 <f_lseek+0x316>
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e230:	429a      	cmp	r2, r3
 800e232:	d304      	bcc.n	800e23e <f_lseek+0x320>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2202      	movs	r2, #2
 800e238:	755a      	strb	r2, [r3, #21]
 800e23a:	2302      	movs	r3, #2
 800e23c:	e074      	b.n	800e328 <f_lseek+0x40a>
					fp->clust = clst;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e242:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d8c0      	bhi.n	800e1ce <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	699a      	ldr	r2, [r3, #24]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	441a      	add	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d012      	beq.n	800e288 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e266:	4618      	mov	r0, r3
 800e268:	f7fe f922 	bl	800c4b0 <clust2sect>
 800e26c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e270:	2b00      	cmp	r3, #0
 800e272:	d104      	bne.n	800e27e <f_lseek+0x360>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	755a      	strb	r2, [r3, #21]
 800e27a:	2302      	movs	r3, #2
 800e27c:	e054      	b.n	800e328 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	0a5b      	lsrs	r3, r3, #9
 800e282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e284:	4413      	add	r3, r2
 800e286:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	699a      	ldr	r2, [r3, #24]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	429a      	cmp	r2, r3
 800e292:	d90a      	bls.n	800e2aa <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	699a      	ldr	r2, [r3, #24]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	7d1b      	ldrb	r3, [r3, #20]
 800e2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d036      	beq.n	800e324 <f_lseek+0x406>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d031      	beq.n	800e324 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7d1b      	ldrb	r3, [r3, #20]
 800e2c4:	b25b      	sxtb	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	da18      	bge.n	800e2fc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	7858      	ldrb	r0, [r3, #1]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a1a      	ldr	r2, [r3, #32]
 800e2d8:	2301      	movs	r3, #1
 800e2da:	f7fd fd5f 	bl	800bd9c <disk_write>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d004      	beq.n	800e2ee <f_lseek+0x3d0>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	755a      	strb	r2, [r3, #21]
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e01c      	b.n	800e328 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	7d1b      	ldrb	r3, [r3, #20]
 800e2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	7858      	ldrb	r0, [r3, #1]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e306:	2301      	movs	r3, #1
 800e308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e30a:	f7fd fd27 	bl	800bd5c <disk_read>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d004      	beq.n	800e31e <f_lseek+0x400>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	755a      	strb	r2, [r3, #21]
 800e31a:	2301      	movs	r3, #1
 800e31c:	e004      	b.n	800e328 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e322:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e324:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3740      	adds	r7, #64	; 0x40
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e330:	b480      	push	{r7}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	4613      	mov	r3, r2
 800e33c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e33e:	2301      	movs	r3, #1
 800e340:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e342:	2300      	movs	r3, #0
 800e344:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e346:	4b1f      	ldr	r3, [pc, #124]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e348:	7a5b      	ldrb	r3, [r3, #9]
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d131      	bne.n	800e3b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e350:	4b1c      	ldr	r3, [pc, #112]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e352:	7a5b      	ldrb	r3, [r3, #9]
 800e354:	b2db      	uxtb	r3, r3
 800e356:	461a      	mov	r2, r3
 800e358:	4b1a      	ldr	r3, [pc, #104]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e35a:	2100      	movs	r1, #0
 800e35c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e35e:	4b19      	ldr	r3, [pc, #100]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e360:	7a5b      	ldrb	r3, [r3, #9]
 800e362:	b2db      	uxtb	r3, r3
 800e364:	4a17      	ldr	r2, [pc, #92]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e36e:	4b15      	ldr	r3, [pc, #84]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e370:	7a5b      	ldrb	r3, [r3, #9]
 800e372:	b2db      	uxtb	r3, r3
 800e374:	461a      	mov	r2, r3
 800e376:	4b13      	ldr	r3, [pc, #76]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e378:	4413      	add	r3, r2
 800e37a:	79fa      	ldrb	r2, [r7, #7]
 800e37c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e37e:	4b11      	ldr	r3, [pc, #68]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e380:	7a5b      	ldrb	r3, [r3, #9]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	b2d1      	uxtb	r1, r2
 800e388:	4a0e      	ldr	r2, [pc, #56]	; (800e3c4 <FATFS_LinkDriverEx+0x94>)
 800e38a:	7251      	strb	r1, [r2, #9]
 800e38c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e38e:	7dbb      	ldrb	r3, [r7, #22]
 800e390:	3330      	adds	r3, #48	; 0x30
 800e392:	b2da      	uxtb	r2, r3
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	3301      	adds	r3, #1
 800e39c:	223a      	movs	r2, #58	; 0x3a
 800e39e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	3302      	adds	r3, #2
 800e3a4:	222f      	movs	r2, #47	; 0x2f
 800e3a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	3303      	adds	r3, #3
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	371c      	adds	r7, #28
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	20001378 	.word	0x20001378

0800e3c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff ffaa 	bl	800e330 <FATFS_LinkDriverEx>
 800e3dc:	4603      	mov	r3, r0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
	...

0800e3e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	490e      	ldr	r1, [pc, #56]	; (800e428 <MX_USB_HOST_Init+0x40>)
 800e3f0:	480e      	ldr	r0, [pc, #56]	; (800e42c <MX_USB_HOST_Init+0x44>)
 800e3f2:	f7fc f919 	bl	800a628 <USBH_Init>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e3fc:	f7f3 f89a 	bl	8001534 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e400:	490b      	ldr	r1, [pc, #44]	; (800e430 <MX_USB_HOST_Init+0x48>)
 800e402:	480a      	ldr	r0, [pc, #40]	; (800e42c <MX_USB_HOST_Init+0x44>)
 800e404:	f7fc f99e 	bl	800a744 <USBH_RegisterClass>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e40e:	f7f3 f891 	bl	8001534 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e412:	4806      	ldr	r0, [pc, #24]	; (800e42c <MX_USB_HOST_Init+0x44>)
 800e414:	f7fc fa22 	bl	800a85c <USBH_Start>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e41e:	f7f3 f889 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e422:	bf00      	nop
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	0800e449 	.word	0x0800e449
 800e42c:	20001988 	.word	0x20001988
 800e430:	2000000c 	.word	0x2000000c

0800e434 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e438:	4802      	ldr	r0, [pc, #8]	; (800e444 <MX_USB_HOST_Process+0x10>)
 800e43a:	f7fc fa1f 	bl	800a87c <USBH_Process>
}
 800e43e:	bf00      	nop
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	20001988 	.word	0x20001988

0800e448 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	460b      	mov	r3, r1
 800e452:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e454:	78fb      	ldrb	r3, [r7, #3]
 800e456:	3b01      	subs	r3, #1
 800e458:	2b04      	cmp	r3, #4
 800e45a:	d819      	bhi.n	800e490 <USBH_UserProcess+0x48>
 800e45c:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <USBH_UserProcess+0x1c>)
 800e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e491 	.word	0x0800e491
 800e468:	0800e481 	.word	0x0800e481
 800e46c:	0800e491 	.word	0x0800e491
 800e470:	0800e489 	.word	0x0800e489
 800e474:	0800e479 	.word	0x0800e479
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e478:	4b09      	ldr	r3, [pc, #36]	; (800e4a0 <USBH_UserProcess+0x58>)
 800e47a:	2203      	movs	r2, #3
 800e47c:	701a      	strb	r2, [r3, #0]
  break;
 800e47e:	e008      	b.n	800e492 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <USBH_UserProcess+0x58>)
 800e482:	2202      	movs	r2, #2
 800e484:	701a      	strb	r2, [r3, #0]
  break;
 800e486:	e004      	b.n	800e492 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e488:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <USBH_UserProcess+0x58>)
 800e48a:	2201      	movs	r2, #1
 800e48c:	701a      	strb	r2, [r3, #0]
  break;
 800e48e:	e000      	b.n	800e492 <USBH_UserProcess+0x4a>

  default:
  break;
 800e490:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e492:	bf00      	nop
 800e494:	370c      	adds	r7, #12
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	20001384 	.word	0x20001384

0800e4a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08a      	sub	sp, #40	; 0x28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4ac:	f107 0314 	add.w	r3, r7, #20
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	605a      	str	r2, [r3, #4]
 800e4b6:	609a      	str	r2, [r3, #8]
 800e4b8:	60da      	str	r2, [r3, #12]
 800e4ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e4c4:	d147      	bne.n	800e556 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	613b      	str	r3, [r7, #16]
 800e4ca:	4b25      	ldr	r3, [pc, #148]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ce:	4a24      	ldr	r2, [pc, #144]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e4d0:	f043 0301 	orr.w	r3, r3, #1
 800e4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800e4d6:	4b22      	ldr	r3, [pc, #136]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4da:	f003 0301 	and.w	r3, r3, #1
 800e4de:	613b      	str	r3, [r7, #16]
 800e4e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e4e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4f0:	f107 0314 	add.w	r3, r7, #20
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	481b      	ldr	r0, [pc, #108]	; (800e564 <HAL_HCD_MspInit+0xc0>)
 800e4f8:	f7f4 fbd2 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e4fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e502:	2302      	movs	r3, #2
 800e504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e506:	2300      	movs	r3, #0
 800e508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e50a:	2303      	movs	r3, #3
 800e50c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e50e:	230a      	movs	r3, #10
 800e510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e512:	f107 0314 	add.w	r3, r7, #20
 800e516:	4619      	mov	r1, r3
 800e518:	4812      	ldr	r0, [pc, #72]	; (800e564 <HAL_HCD_MspInit+0xc0>)
 800e51a:	f7f4 fbc1 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e51e:	4b10      	ldr	r3, [pc, #64]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e522:	4a0f      	ldr	r2, [pc, #60]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e528:	6353      	str	r3, [r2, #52]	; 0x34
 800e52a:	2300      	movs	r3, #0
 800e52c:	60fb      	str	r3, [r7, #12]
 800e52e:	4b0c      	ldr	r3, [pc, #48]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e532:	4a0b      	ldr	r2, [pc, #44]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e538:	6453      	str	r3, [r2, #68]	; 0x44
 800e53a:	4b09      	ldr	r3, [pc, #36]	; (800e560 <HAL_HCD_MspInit+0xbc>)
 800e53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e53e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e546:	2200      	movs	r2, #0
 800e548:	2100      	movs	r1, #0
 800e54a:	2043      	movs	r0, #67	; 0x43
 800e54c:	f7f3 ff93 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e550:	2043      	movs	r0, #67	; 0x43
 800e552:	f7f3 ffac 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e556:	bf00      	nop
 800e558:	3728      	adds	r7, #40	; 0x28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	40023800 	.word	0x40023800
 800e564:	40020000 	.word	0x40020000

0800e568 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e576:	4618      	mov	r0, r3
 800e578:	f7fc fd53 	bl	800b022 <USBH_LL_IncTimer>
}
 800e57c:	bf00      	nop
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e592:	4618      	mov	r0, r3
 800e594:	f7fc fd8b 	bl	800b0ae <USBH_LL_Connect>
}
 800e598:	bf00      	nop
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fc fd94 	bl	800b0dc <USBH_LL_Disconnect>
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	70fb      	strb	r3, [r7, #3]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fc fd45 	bl	800b076 <USBH_LL_PortEnabled>
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e602:	4618      	mov	r0, r3
 800e604:	f7fc fd45 	bl	800b092 <USBH_LL_PortDisabled>
}
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d12a      	bne.n	800e678 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e622:	4a18      	ldr	r2, [pc, #96]	; (800e684 <USBH_LL_Init+0x74>)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4a15      	ldr	r2, [pc, #84]	; (800e684 <USBH_LL_Init+0x74>)
 800e62e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e632:	4b14      	ldr	r3, [pc, #80]	; (800e684 <USBH_LL_Init+0x74>)
 800e634:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e638:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e63a:	4b12      	ldr	r3, [pc, #72]	; (800e684 <USBH_LL_Init+0x74>)
 800e63c:	2208      	movs	r2, #8
 800e63e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e640:	4b10      	ldr	r3, [pc, #64]	; (800e684 <USBH_LL_Init+0x74>)
 800e642:	2201      	movs	r2, #1
 800e644:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e646:	4b0f      	ldr	r3, [pc, #60]	; (800e684 <USBH_LL_Init+0x74>)
 800e648:	2200      	movs	r2, #0
 800e64a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e64c:	4b0d      	ldr	r3, [pc, #52]	; (800e684 <USBH_LL_Init+0x74>)
 800e64e:	2202      	movs	r2, #2
 800e650:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e652:	4b0c      	ldr	r3, [pc, #48]	; (800e684 <USBH_LL_Init+0x74>)
 800e654:	2200      	movs	r2, #0
 800e656:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e658:	480a      	ldr	r0, [pc, #40]	; (800e684 <USBH_LL_Init+0x74>)
 800e65a:	f7f4 fcec 	bl	8003036 <HAL_HCD_Init>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d001      	beq.n	800e668 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e664:	f7f2 ff66 	bl	8001534 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e668:	4806      	ldr	r0, [pc, #24]	; (800e684 <USBH_LL_Init+0x74>)
 800e66a:	f7f5 f8ef 	bl	800384c <HAL_HCD_GetCurrentFrame>
 800e66e:	4603      	mov	r3, r0
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7fc fcc6 	bl	800b004 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3708      	adds	r7, #8
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20001d60 	.word	0x20001d60

0800e688 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7f5 f85c 	bl	800375c <HAL_HCD_Start>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 f986 	bl	800e9bc <USBH_Get_USB_Status>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b084      	sub	sp, #16
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f5 f864 	bl	80037a2 <HAL_HCD_Stop>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f000 f96b 	bl	800e9bc <USBH_Get_USB_Status>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e706:	4618      	mov	r0, r3
 800e708:	f7f5 f8ae 	bl	8003868 <HAL_HCD_GetCurrentSpeed>
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d007      	beq.n	800e722 <USBH_LL_GetSpeed+0x2e>
 800e712:	2b01      	cmp	r3, #1
 800e714:	d302      	bcc.n	800e71c <USBH_LL_GetSpeed+0x28>
 800e716:	2b02      	cmp	r3, #2
 800e718:	d006      	beq.n	800e728 <USBH_LL_GetSpeed+0x34>
 800e71a:	e008      	b.n	800e72e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e71c:	2300      	movs	r3, #0
 800e71e:	73fb      	strb	r3, [r7, #15]
    break;
 800e720:	e008      	b.n	800e734 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e722:	2301      	movs	r3, #1
 800e724:	73fb      	strb	r3, [r7, #15]
    break;
 800e726:	e005      	b.n	800e734 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e728:	2302      	movs	r3, #2
 800e72a:	73fb      	strb	r3, [r7, #15]
    break;
 800e72c:	e002      	b.n	800e734 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800e72e:	2301      	movs	r3, #1
 800e730:	73fb      	strb	r3, [r7, #15]
    break;
 800e732:	bf00      	nop
  }
  return  speed;
 800e734:	7bfb      	ldrb	r3, [r7, #15]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b084      	sub	sp, #16
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e746:	2300      	movs	r3, #0
 800e748:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e74a:	2300      	movs	r3, #0
 800e74c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e754:	4618      	mov	r0, r3
 800e756:	f7f5 f841 	bl	80037dc <HAL_HCD_ResetPort>
 800e75a:	4603      	mov	r3, r0
 800e75c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e75e:	7bfb      	ldrb	r3, [r7, #15]
 800e760:	4618      	mov	r0, r3
 800e762:	f000 f92b 	bl	800e9bc <USBH_Get_USB_Status>
 800e766:	4603      	mov	r3, r0
 800e768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3710      	adds	r7, #16
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e786:	78fa      	ldrb	r2, [r7, #3]
 800e788:	4611      	mov	r1, r2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f5 f849 	bl	8003822 <HAL_HCD_HC_GetXferCount>
 800e790:	4603      	mov	r3, r0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e79a:	b590      	push	{r4, r7, lr}
 800e79c:	b089      	sub	sp, #36	; 0x24
 800e79e:	af04      	add	r7, sp, #16
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	4608      	mov	r0, r1
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	70fb      	strb	r3, [r7, #3]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70bb      	strb	r3, [r7, #2]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e7c2:	787c      	ldrb	r4, [r7, #1]
 800e7c4:	78ba      	ldrb	r2, [r7, #2]
 800e7c6:	78f9      	ldrb	r1, [r7, #3]
 800e7c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7ca:	9302      	str	r3, [sp, #8]
 800e7cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	4623      	mov	r3, r4
 800e7da:	f7f4 fc8e 	bl	80030fa <HAL_HCD_HC_Init>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e7e2:	7bfb      	ldrb	r3, [r7, #15]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 f8e9 	bl	800e9bc <USBH_Get_USB_Status>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd90      	pop	{r4, r7, pc}

0800e7f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	460b      	mov	r3, r1
 800e802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e804:	2300      	movs	r3, #0
 800e806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e812:	78fa      	ldrb	r2, [r7, #3]
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f7f4 fd07 	bl	800322a <HAL_HCD_HC_Halt>
 800e81c:	4603      	mov	r3, r0
 800e81e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e820:	7bfb      	ldrb	r3, [r7, #15]
 800e822:	4618      	mov	r0, r3
 800e824:	f000 f8ca 	bl	800e9bc <USBH_Get_USB_Status>
 800e828:	4603      	mov	r3, r0
 800e82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e836:	b590      	push	{r4, r7, lr}
 800e838:	b089      	sub	sp, #36	; 0x24
 800e83a:	af04      	add	r7, sp, #16
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	4608      	mov	r0, r1
 800e840:	4611      	mov	r1, r2
 800e842:	461a      	mov	r2, r3
 800e844:	4603      	mov	r3, r0
 800e846:	70fb      	strb	r3, [r7, #3]
 800e848:	460b      	mov	r3, r1
 800e84a:	70bb      	strb	r3, [r7, #2]
 800e84c:	4613      	mov	r3, r2
 800e84e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e85e:	787c      	ldrb	r4, [r7, #1]
 800e860:	78ba      	ldrb	r2, [r7, #2]
 800e862:	78f9      	ldrb	r1, [r7, #3]
 800e864:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e868:	9303      	str	r3, [sp, #12]
 800e86a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e86c:	9302      	str	r3, [sp, #8]
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	9301      	str	r3, [sp, #4]
 800e872:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	4623      	mov	r3, r4
 800e87a:	f7f4 fcf9 	bl	8003270 <HAL_HCD_HC_SubmitRequest>
 800e87e:	4603      	mov	r3, r0
 800e880:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e882:	7bfb      	ldrb	r3, [r7, #15]
 800e884:	4618      	mov	r0, r3
 800e886:	f000 f899 	bl	800e9bc <USBH_Get_USB_Status>
 800e88a:	4603      	mov	r3, r0
 800e88c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e88e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3714      	adds	r7, #20
 800e894:	46bd      	mov	sp, r7
 800e896:	bd90      	pop	{r4, r7, pc}

0800e898 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e8aa:	78fa      	ldrb	r2, [r7, #3]
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7f4 ffa2 	bl	80037f8 <HAL_HCD_HC_GetURBState>
 800e8b4:	4603      	mov	r3, r0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b082      	sub	sp, #8
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e8ca:	20c8      	movs	r0, #200	; 0xc8
 800e8cc:	f7f3 f8ea 	bl	8001aa4 <HAL_Delay>
  return USBH_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3708      	adds	r7, #8
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e8da:	b480      	push	{r7}
 800e8dc:	b085      	sub	sp, #20
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	70fb      	strb	r3, [r7, #3]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e8f0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e8f2:	78fa      	ldrb	r2, [r7, #3]
 800e8f4:	68f9      	ldr	r1, [r7, #12]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4413      	add	r3, r2
 800e8fc:	00db      	lsls	r3, r3, #3
 800e8fe:	440b      	add	r3, r1
 800e900:	333b      	adds	r3, #59	; 0x3b
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00a      	beq.n	800e91e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e908:	78fa      	ldrb	r2, [r7, #3]
 800e90a:	68f9      	ldr	r1, [r7, #12]
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	440b      	add	r3, r1
 800e916:	3350      	adds	r3, #80	; 0x50
 800e918:	78ba      	ldrb	r2, [r7, #2]
 800e91a:	701a      	strb	r2, [r3, #0]
 800e91c:	e009      	b.n	800e932 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e91e:	78fa      	ldrb	r2, [r7, #3]
 800e920:	68f9      	ldr	r1, [r7, #12]
 800e922:	4613      	mov	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	440b      	add	r3, r1
 800e92c:	3351      	adds	r3, #81	; 0x51
 800e92e:	78ba      	ldrb	r2, [r7, #2]
 800e930:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e956:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e958:	78fa      	ldrb	r2, [r7, #3]
 800e95a:	68b9      	ldr	r1, [r7, #8]
 800e95c:	4613      	mov	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4413      	add	r3, r2
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	440b      	add	r3, r1
 800e966:	333b      	adds	r3, #59	; 0x3b
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00a      	beq.n	800e984 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e96e:	78fa      	ldrb	r2, [r7, #3]
 800e970:	68b9      	ldr	r1, [r7, #8]
 800e972:	4613      	mov	r3, r2
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	4413      	add	r3, r2
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	440b      	add	r3, r1
 800e97c:	3350      	adds	r3, #80	; 0x50
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	73fb      	strb	r3, [r7, #15]
 800e982:	e009      	b.n	800e998 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e984:	78fa      	ldrb	r2, [r7, #3]
 800e986:	68b9      	ldr	r1, [r7, #8]
 800e988:	4613      	mov	r3, r2
 800e98a:	009b      	lsls	r3, r3, #2
 800e98c:	4413      	add	r3, r2
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	440b      	add	r3, r1
 800e992:	3351      	adds	r3, #81	; 0x51
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e998:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b082      	sub	sp, #8
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7f3 f878 	bl	8001aa4 <HAL_Delay>
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9ca:	79fb      	ldrb	r3, [r7, #7]
 800e9cc:	2b03      	cmp	r3, #3
 800e9ce:	d817      	bhi.n	800ea00 <USBH_Get_USB_Status+0x44>
 800e9d0:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <USBH_Get_USB_Status+0x1c>)
 800e9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d6:	bf00      	nop
 800e9d8:	0800e9e9 	.word	0x0800e9e9
 800e9dc:	0800e9ef 	.word	0x0800e9ef
 800e9e0:	0800e9f5 	.word	0x0800e9f5
 800e9e4:	0800e9fb 	.word	0x0800e9fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ec:	e00b      	b.n	800ea06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e9f2:	e008      	b.n	800ea06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e9f8:	e005      	b.n	800ea06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e9fe:	e002      	b.n	800ea06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ea00:	2302      	movs	r3, #2
 800ea02:	73fb      	strb	r3, [r7, #15]
    break;
 800ea04:	bf00      	nop
  }
  return usb_status;
 800ea06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <__errno>:
 800ea14:	4b01      	ldr	r3, [pc, #4]	; (800ea1c <__errno+0x8>)
 800ea16:	6818      	ldr	r0, [r3, #0]
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	2000002c 	.word	0x2000002c

0800ea20 <__libc_init_array>:
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	4e0d      	ldr	r6, [pc, #52]	; (800ea58 <__libc_init_array+0x38>)
 800ea24:	4c0d      	ldr	r4, [pc, #52]	; (800ea5c <__libc_init_array+0x3c>)
 800ea26:	1ba4      	subs	r4, r4, r6
 800ea28:	10a4      	asrs	r4, r4, #2
 800ea2a:	2500      	movs	r5, #0
 800ea2c:	42a5      	cmp	r5, r4
 800ea2e:	d109      	bne.n	800ea44 <__libc_init_array+0x24>
 800ea30:	4e0b      	ldr	r6, [pc, #44]	; (800ea60 <__libc_init_array+0x40>)
 800ea32:	4c0c      	ldr	r4, [pc, #48]	; (800ea64 <__libc_init_array+0x44>)
 800ea34:	f000 f8f6 	bl	800ec24 <_init>
 800ea38:	1ba4      	subs	r4, r4, r6
 800ea3a:	10a4      	asrs	r4, r4, #2
 800ea3c:	2500      	movs	r5, #0
 800ea3e:	42a5      	cmp	r5, r4
 800ea40:	d105      	bne.n	800ea4e <__libc_init_array+0x2e>
 800ea42:	bd70      	pop	{r4, r5, r6, pc}
 800ea44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea48:	4798      	blx	r3
 800ea4a:	3501      	adds	r5, #1
 800ea4c:	e7ee      	b.n	800ea2c <__libc_init_array+0xc>
 800ea4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea52:	4798      	blx	r3
 800ea54:	3501      	adds	r5, #1
 800ea56:	e7f2      	b.n	800ea3e <__libc_init_array+0x1e>
 800ea58:	0800edcc 	.word	0x0800edcc
 800ea5c:	0800edcc 	.word	0x0800edcc
 800ea60:	0800edcc 	.word	0x0800edcc
 800ea64:	0800edd0 	.word	0x0800edd0

0800ea68 <malloc>:
 800ea68:	4b02      	ldr	r3, [pc, #8]	; (800ea74 <malloc+0xc>)
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	6818      	ldr	r0, [r3, #0]
 800ea6e:	f000 b86d 	b.w	800eb4c <_malloc_r>
 800ea72:	bf00      	nop
 800ea74:	2000002c 	.word	0x2000002c

0800ea78 <free>:
 800ea78:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <free+0xc>)
 800ea7a:	4601      	mov	r1, r0
 800ea7c:	6818      	ldr	r0, [r3, #0]
 800ea7e:	f000 b817 	b.w	800eab0 <_free_r>
 800ea82:	bf00      	nop
 800ea84:	2000002c 	.word	0x2000002c

0800ea88 <memcpy>:
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	1e43      	subs	r3, r0, #1
 800ea8c:	440a      	add	r2, r1
 800ea8e:	4291      	cmp	r1, r2
 800ea90:	d100      	bne.n	800ea94 <memcpy+0xc>
 800ea92:	bd10      	pop	{r4, pc}
 800ea94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea9c:	e7f7      	b.n	800ea8e <memcpy+0x6>

0800ea9e <memset>:
 800ea9e:	4402      	add	r2, r0
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d100      	bne.n	800eaa8 <memset+0xa>
 800eaa6:	4770      	bx	lr
 800eaa8:	f803 1b01 	strb.w	r1, [r3], #1
 800eaac:	e7f9      	b.n	800eaa2 <memset+0x4>
	...

0800eab0 <_free_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4605      	mov	r5, r0
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d045      	beq.n	800eb44 <_free_r+0x94>
 800eab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eabc:	1f0c      	subs	r4, r1, #4
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	bfb8      	it	lt
 800eac2:	18e4      	addlt	r4, r4, r3
 800eac4:	f000 f8ac 	bl	800ec20 <__malloc_lock>
 800eac8:	4a1f      	ldr	r2, [pc, #124]	; (800eb48 <_free_r+0x98>)
 800eaca:	6813      	ldr	r3, [r2, #0]
 800eacc:	4610      	mov	r0, r2
 800eace:	b933      	cbnz	r3, 800eade <_free_r+0x2e>
 800ead0:	6063      	str	r3, [r4, #4]
 800ead2:	6014      	str	r4, [r2, #0]
 800ead4:	4628      	mov	r0, r5
 800ead6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eada:	f000 b8a2 	b.w	800ec22 <__malloc_unlock>
 800eade:	42a3      	cmp	r3, r4
 800eae0:	d90c      	bls.n	800eafc <_free_r+0x4c>
 800eae2:	6821      	ldr	r1, [r4, #0]
 800eae4:	1862      	adds	r2, r4, r1
 800eae6:	4293      	cmp	r3, r2
 800eae8:	bf04      	itt	eq
 800eaea:	681a      	ldreq	r2, [r3, #0]
 800eaec:	685b      	ldreq	r3, [r3, #4]
 800eaee:	6063      	str	r3, [r4, #4]
 800eaf0:	bf04      	itt	eq
 800eaf2:	1852      	addeq	r2, r2, r1
 800eaf4:	6022      	streq	r2, [r4, #0]
 800eaf6:	6004      	str	r4, [r0, #0]
 800eaf8:	e7ec      	b.n	800ead4 <_free_r+0x24>
 800eafa:	4613      	mov	r3, r2
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	b10a      	cbz	r2, 800eb04 <_free_r+0x54>
 800eb00:	42a2      	cmp	r2, r4
 800eb02:	d9fa      	bls.n	800eafa <_free_r+0x4a>
 800eb04:	6819      	ldr	r1, [r3, #0]
 800eb06:	1858      	adds	r0, r3, r1
 800eb08:	42a0      	cmp	r0, r4
 800eb0a:	d10b      	bne.n	800eb24 <_free_r+0x74>
 800eb0c:	6820      	ldr	r0, [r4, #0]
 800eb0e:	4401      	add	r1, r0
 800eb10:	1858      	adds	r0, r3, r1
 800eb12:	4282      	cmp	r2, r0
 800eb14:	6019      	str	r1, [r3, #0]
 800eb16:	d1dd      	bne.n	800ead4 <_free_r+0x24>
 800eb18:	6810      	ldr	r0, [r2, #0]
 800eb1a:	6852      	ldr	r2, [r2, #4]
 800eb1c:	605a      	str	r2, [r3, #4]
 800eb1e:	4401      	add	r1, r0
 800eb20:	6019      	str	r1, [r3, #0]
 800eb22:	e7d7      	b.n	800ead4 <_free_r+0x24>
 800eb24:	d902      	bls.n	800eb2c <_free_r+0x7c>
 800eb26:	230c      	movs	r3, #12
 800eb28:	602b      	str	r3, [r5, #0]
 800eb2a:	e7d3      	b.n	800ead4 <_free_r+0x24>
 800eb2c:	6820      	ldr	r0, [r4, #0]
 800eb2e:	1821      	adds	r1, r4, r0
 800eb30:	428a      	cmp	r2, r1
 800eb32:	bf04      	itt	eq
 800eb34:	6811      	ldreq	r1, [r2, #0]
 800eb36:	6852      	ldreq	r2, [r2, #4]
 800eb38:	6062      	str	r2, [r4, #4]
 800eb3a:	bf04      	itt	eq
 800eb3c:	1809      	addeq	r1, r1, r0
 800eb3e:	6021      	streq	r1, [r4, #0]
 800eb40:	605c      	str	r4, [r3, #4]
 800eb42:	e7c7      	b.n	800ead4 <_free_r+0x24>
 800eb44:	bd38      	pop	{r3, r4, r5, pc}
 800eb46:	bf00      	nop
 800eb48:	20001388 	.word	0x20001388

0800eb4c <_malloc_r>:
 800eb4c:	b570      	push	{r4, r5, r6, lr}
 800eb4e:	1ccd      	adds	r5, r1, #3
 800eb50:	f025 0503 	bic.w	r5, r5, #3
 800eb54:	3508      	adds	r5, #8
 800eb56:	2d0c      	cmp	r5, #12
 800eb58:	bf38      	it	cc
 800eb5a:	250c      	movcc	r5, #12
 800eb5c:	2d00      	cmp	r5, #0
 800eb5e:	4606      	mov	r6, r0
 800eb60:	db01      	blt.n	800eb66 <_malloc_r+0x1a>
 800eb62:	42a9      	cmp	r1, r5
 800eb64:	d903      	bls.n	800eb6e <_malloc_r+0x22>
 800eb66:	230c      	movs	r3, #12
 800eb68:	6033      	str	r3, [r6, #0]
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	bd70      	pop	{r4, r5, r6, pc}
 800eb6e:	f000 f857 	bl	800ec20 <__malloc_lock>
 800eb72:	4a21      	ldr	r2, [pc, #132]	; (800ebf8 <_malloc_r+0xac>)
 800eb74:	6814      	ldr	r4, [r2, #0]
 800eb76:	4621      	mov	r1, r4
 800eb78:	b991      	cbnz	r1, 800eba0 <_malloc_r+0x54>
 800eb7a:	4c20      	ldr	r4, [pc, #128]	; (800ebfc <_malloc_r+0xb0>)
 800eb7c:	6823      	ldr	r3, [r4, #0]
 800eb7e:	b91b      	cbnz	r3, 800eb88 <_malloc_r+0x3c>
 800eb80:	4630      	mov	r0, r6
 800eb82:	f000 f83d 	bl	800ec00 <_sbrk_r>
 800eb86:	6020      	str	r0, [r4, #0]
 800eb88:	4629      	mov	r1, r5
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	f000 f838 	bl	800ec00 <_sbrk_r>
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	d124      	bne.n	800ebde <_malloc_r+0x92>
 800eb94:	230c      	movs	r3, #12
 800eb96:	6033      	str	r3, [r6, #0]
 800eb98:	4630      	mov	r0, r6
 800eb9a:	f000 f842 	bl	800ec22 <__malloc_unlock>
 800eb9e:	e7e4      	b.n	800eb6a <_malloc_r+0x1e>
 800eba0:	680b      	ldr	r3, [r1, #0]
 800eba2:	1b5b      	subs	r3, r3, r5
 800eba4:	d418      	bmi.n	800ebd8 <_malloc_r+0x8c>
 800eba6:	2b0b      	cmp	r3, #11
 800eba8:	d90f      	bls.n	800ebca <_malloc_r+0x7e>
 800ebaa:	600b      	str	r3, [r1, #0]
 800ebac:	50cd      	str	r5, [r1, r3]
 800ebae:	18cc      	adds	r4, r1, r3
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f000 f836 	bl	800ec22 <__malloc_unlock>
 800ebb6:	f104 000b 	add.w	r0, r4, #11
 800ebba:	1d23      	adds	r3, r4, #4
 800ebbc:	f020 0007 	bic.w	r0, r0, #7
 800ebc0:	1ac3      	subs	r3, r0, r3
 800ebc2:	d0d3      	beq.n	800eb6c <_malloc_r+0x20>
 800ebc4:	425a      	negs	r2, r3
 800ebc6:	50e2      	str	r2, [r4, r3]
 800ebc8:	e7d0      	b.n	800eb6c <_malloc_r+0x20>
 800ebca:	428c      	cmp	r4, r1
 800ebcc:	684b      	ldr	r3, [r1, #4]
 800ebce:	bf16      	itet	ne
 800ebd0:	6063      	strne	r3, [r4, #4]
 800ebd2:	6013      	streq	r3, [r2, #0]
 800ebd4:	460c      	movne	r4, r1
 800ebd6:	e7eb      	b.n	800ebb0 <_malloc_r+0x64>
 800ebd8:	460c      	mov	r4, r1
 800ebda:	6849      	ldr	r1, [r1, #4]
 800ebdc:	e7cc      	b.n	800eb78 <_malloc_r+0x2c>
 800ebde:	1cc4      	adds	r4, r0, #3
 800ebe0:	f024 0403 	bic.w	r4, r4, #3
 800ebe4:	42a0      	cmp	r0, r4
 800ebe6:	d005      	beq.n	800ebf4 <_malloc_r+0xa8>
 800ebe8:	1a21      	subs	r1, r4, r0
 800ebea:	4630      	mov	r0, r6
 800ebec:	f000 f808 	bl	800ec00 <_sbrk_r>
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	d0cf      	beq.n	800eb94 <_malloc_r+0x48>
 800ebf4:	6025      	str	r5, [r4, #0]
 800ebf6:	e7db      	b.n	800ebb0 <_malloc_r+0x64>
 800ebf8:	20001388 	.word	0x20001388
 800ebfc:	2000138c 	.word	0x2000138c

0800ec00 <_sbrk_r>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4c06      	ldr	r4, [pc, #24]	; (800ec1c <_sbrk_r+0x1c>)
 800ec04:	2300      	movs	r3, #0
 800ec06:	4605      	mov	r5, r0
 800ec08:	4608      	mov	r0, r1
 800ec0a:	6023      	str	r3, [r4, #0]
 800ec0c:	f7f2 fe62 	bl	80018d4 <_sbrk>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d102      	bne.n	800ec1a <_sbrk_r+0x1a>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	b103      	cbz	r3, 800ec1a <_sbrk_r+0x1a>
 800ec18:	602b      	str	r3, [r5, #0]
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	20002024 	.word	0x20002024

0800ec20 <__malloc_lock>:
 800ec20:	4770      	bx	lr

0800ec22 <__malloc_unlock>:
 800ec22:	4770      	bx	lr

0800ec24 <_init>:
 800ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec26:	bf00      	nop
 800ec28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec2a:	bc08      	pop	{r3}
 800ec2c:	469e      	mov	lr, r3
 800ec2e:	4770      	bx	lr

0800ec30 <_fini>:
 800ec30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec32:	bf00      	nop
 800ec34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec36:	bc08      	pop	{r3}
 800ec38:	469e      	mov	lr, r3
 800ec3a:	4770      	bx	lr
