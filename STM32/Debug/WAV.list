
WAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e088  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800e210  0800e210  0001e210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e37c  0800e37c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e37c  0800e37c  0001e37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e384  0800e384  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e384  0800e384  0001e384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e388  0800e388  0001e388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  20000090  0800e41c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20001fe4  0800e41c  00021fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000286b0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005087  00000000  00000000  00048770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  0004d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001340  00000000  00000000  0004ed38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002744e  00000000  00000000  00050078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019316  00000000  00000000  000774c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfd23  00000000  00000000  000907dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001604ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  0016057c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e1f8 	.word	0x0800e1f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800e1f8 	.word	0x0800e1f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004de:	f107 020c 	add.w	r2, r7, #12
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2302      	movs	r3, #2
 80004e8:	2194      	movs	r1, #148	; 0x94
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <write_register+0x30>)
 80004ec:	f004 fae2 	bl	8004ab4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000ac 	.word	0x200000ac

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050c:	f107 020c 	add.w	r2, r7, #12
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <read_register+0x3c>)
 800051a:	f004 facb 	bl	8004ab4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <read_register+0x3c>)
 800052a:	f004 fbc1 	bl	8004cb0 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac

0800053c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800053c:	b084      	sub	sp, #16
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	f107 0c10 	add.w	ip, r7, #16
 8000548:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <CS43_Init+0x200>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <CS43_Init+0x200>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	69da      	ldr	r2, [r3, #28]
 800055a:	4b78      	ldr	r3, [pc, #480]	; (800073c <CS43_Init+0x200>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000562:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	4875      	ldr	r0, [pc, #468]	; (8000740 <CS43_Init+0x204>)
 800056a:	f002 fc61 	bl	8002e30 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056e:	4b75      	ldr	r3, [pc, #468]	; (8000744 <CS43_Init+0x208>)
 8000570:	4618      	mov	r0, r3
 8000572:	f107 0110 	add.w	r1, r7, #16
 8000576:	2354      	movs	r3, #84	; 0x54
 8000578:	461a      	mov	r2, r3
 800057a:	f00d fd6f 	bl	800e05c <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057e:	2301      	movs	r3, #1
 8000580:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	2002      	movs	r0, #2
 8000588:	f7ff ff9e 	bl	80004c8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	b2db      	uxtb	r3, r3
 8000598:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059a:	797b      	ldrb	r3, [r7, #5]
 800059c:	f043 030c 	orr.w	r3, r3, #12
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	3301      	adds	r3, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff87 	bl	80004c8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	3301      	adds	r3, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff ff7f 	bl	80004c8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	2006      	movs	r0, #6
 80005d0:	f7ff ff94 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	f023 0310 	bic.w	r3, r3, #16
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f023 0304 	bic.w	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	f043 0303 	orr.w	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	3301      	adds	r3, #1
 800061e:	4619      	mov	r1, r3
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ff51 	bl	80004c8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	3301      	adds	r3, #1
 800062a:	4619      	mov	r1, r3
 800062c:	2008      	movs	r0, #8
 800062e:	f7ff ff65 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	3301      	adds	r3, #1
 800064a:	4619      	mov	r1, r3
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff3b 	bl	80004c8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	3301      	adds	r3, #1
 8000656:	4619      	mov	r1, r3
 8000658:	2009      	movs	r0, #9
 800065a:	f7ff ff4f 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	3301      	adds	r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff25 	bl	80004c8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	3301      	adds	r3, #1
 8000682:	4619      	mov	r1, r3
 8000684:	200e      	movs	r0, #14
 8000686:	f7ff ff39 	bl	80004fc <read_register>
	if(outputMode == MODE_ANALOG)
 800068a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068e:	2b01      	cmp	r3, #1
 8000690:	d119      	bne.n	80006c6 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0310 	bic.w	r3, r3, #16
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0308 	bic.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
 80006c4:	e005      	b.n	80006d2 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	200e      	movs	r0, #14
 80006da:	f7ff fef5 	bl	80004c8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	3301      	adds	r3, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	200f      	movs	r0, #15
 80006e6:	f7ff ff09 	bl	80004fc <read_register>
	iData[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	200f      	movs	r0, #15
 80006f6:	f7ff fee7 	bl	80004c8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2014      	movs	r0, #20
 8000706:	f7ff fedf 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	3301      	adds	r3, #1
 800070e:	4619      	mov	r1, r3
 8000710:	2015      	movs	r0, #21
 8000712:	f7ff fed9 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	3301      	adds	r3, #1
 800071a:	4619      	mov	r1, r3
 800071c:	201a      	movs	r0, #26
 800071e:	f7ff fed3 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	3301      	adds	r3, #1
 8000726:	4619      	mov	r1, r3
 8000728:	201b      	movs	r0, #27
 800072a:	f7ff fecd 	bl	80004c8 <write_register>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr
 800073c:	20001490 	.word	0x20001490
 8000740:	40020c00 	.word	0x40020c00
 8000744:	200000ac 	.word	0x200000ac

08000748 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d82b      	bhi.n	80007b0 <CS43_Enable_RightLeft+0x68>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <CS43_Enable_RightLeft+0x18>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000771 	.word	0x08000771
 8000764:	08000781 	.word	0x08000781
 8000768:	08000791 	.word	0x08000791
 800076c:	080007a1 	.word	0x080007a1
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
			break;
 800077e:	e018      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2db      	uxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e010      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2db      	uxtb	r3, r3
 800079c:	737b      	strb	r3, [r7, #13]
			break;
 800079e:	e008      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	737b      	strb	r3, [r7, #13]
			break;
 80007ae:	e000      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	f043 030c 	orr.w	r3, r3, #12
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	f043 0303 	orr.w	r3, r3, #3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	3301      	adds	r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	2004      	movs	r0, #4
 80007d0:	f7ff fe7a 	bl	80004c8 <write_register>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3319      	adds	r3, #25
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	3301      	adds	r3, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff fe66 	bl	80004c8 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	3301      	adds	r3, #1
 8000802:	4619      	mov	r1, r3
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f7ff fe5f 	bl	80004c8 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	3301      	adds	r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff fe4a 	bl	80004c8 <write_register>
    iData[1] = 0x01;
 8000834:	2301      	movs	r3, #1
 8000836:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	3301      	adds	r3, #1
 800083e:	4619      	mov	r1, r3
 8000840:	2022      	movs	r0, #34	; 0x22
 8000842:	f7ff fe41 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	3301      	adds	r3, #1
 800084c:	4619      	mov	r1, r3
 800084e:	2023      	movs	r0, #35	; 0x23
 8000850:	f7ff fe3a 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000854:	e018      	b.n	8000888 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3301      	adds	r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	2022      	movs	r0, #34	; 0x22
 8000864:	f7ff fe30 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	3301      	adds	r3, #1
 800086e:	4619      	mov	r1, r3
 8000870:	2023      	movs	r0, #35	; 0x23
 8000872:	f7ff fe29 	bl	80004c8 <write_register>
    iData[1] = 0xAF;
 8000876:	23af      	movs	r3, #175	; 0xaf
 8000878:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	3301      	adds	r3, #1
 8000880:	4619      	mov	r1, r3
 8000882:	2004      	movs	r0, #4
 8000884:	f7ff fe20 	bl	80004c8 <write_register>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ffbb 	bl	8000812 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800089c:	2399      	movs	r3, #153	; 0x99
 800089e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	3301      	adds	r3, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe0e 	bl	80004c8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	3301      	adds	r3, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2047      	movs	r0, #71	; 0x47
 80008b8:	f7ff fe06 	bl	80004c8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	3301      	adds	r3, #1
 80008c0:	4619      	mov	r1, r3
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	3301      	adds	r3, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf5 	bl	80004c8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	3301      	adds	r3, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	3301      	adds	r3, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde4 	bl	80004c8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	2300      	movs	r3, #0
 8000902:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fddc 	bl	80004c8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000910:	239e      	movs	r3, #158	; 0x9e
 8000912:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3301      	adds	r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fdd4 	bl	80004c8 <write_register>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <CS43_Stop>:

void CS43_Stop(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff6f 	bl	8000812 <CS43_SetMute>
  iData[1] = 0x04;
 8000934:	2304      	movs	r3, #4
 8000936:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	3301      	adds	r3, #1
 800093c:	4619      	mov	r1, r3
 800093e:	200e      	movs	r0, #14
 8000940:	f7ff fdc2 	bl	80004c8 <write_register>
	iData[1] = 0x9F;
 8000944:	239f      	movs	r3, #159	; 0x9f
 8000946:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	3301      	adds	r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fdba 	bl	80004c8 <write_register>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e00b      	b.n	800098a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <audioI2S_pllClockConfig+0x8c>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d101      	bne.n	8000984 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	3301      	adds	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9f0      	bls.n	8000972 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f006 fcab 	bl	80072f0 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d111      	bne.n	80009c8 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a8:	7fbb      	ldrb	r3, [r7, #30]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <audioI2S_pllClockConfig+0x90>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <audioI2S_pllClockConfig+0x94>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f006 fbb3 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c6:	e00b      	b.n	80009e0 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d2:	2303      	movs	r3, #3
 80009d4:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fba6 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800e268 	.word	0x0800e268
 80009ec:	0800e288 	.word	0x0800e288
 80009f0:	0800e2a8 	.word	0x0800e2a8

080009f4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x84>)
 8000a02:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a16:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fe7d 	bl	8005758 <HAL_I2S_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e000      	b.n	8000a6a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a68:	2301      	movs	r3, #1
  }
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000100 	.word	0x20000100
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <audioI2S_setHandle+0x1c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000100 	.word	0x20000100

08000a9c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff59 	bl	800095c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <I2S3_freqUpdate>
  return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac6:	f7ff fee3 	bl	8000890 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <audioI2S_play+0x38>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad4:	d203      	bcs.n	8000ade <audioI2S_play+0x22>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	e001      	b.n	8000ae2 <audioI2S_play+0x26>
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f004 ff77 	bl	80059d8 <HAL_I2S_Transmit_DMA>
  return true;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000100 	.word	0x20000100

08000af8 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000afc:	f7ff ff14 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <audioI2S_pause+0x18>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 f80f 	bl	8005b28 <HAL_I2S_DMAPause>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000100 	.word	0x20000100

08000b14 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b18:	f7ff feba 	bl	8000890 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <audioI2S_resume+0x18>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 f863 	bl	8005bec <HAL_I2S_DMAResume>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000100 	.word	0x20000100

08000b30 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b34:	f7ff fef8 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <audioI2S_stop+0x18>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f005 f8e9 	bl	8005d14 <HAL_I2S_DMAStop>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000100 	.word	0x20000100

08000b4c <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_I2S_TxCpltCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b5e:	f000 f929 	bl	8000db4 <audioI2S_fullTransfer_Callback>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40003c00 	.word	0x40003c00

08000b70 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b82:	f000 f90b 	bl	8000d9c <audioI2S_halfTransfer_Callback>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <wavPlayer_reset+0x1c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <wavPlayer_reset+0x20>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20001338 	.word	0x20001338
 8000bb4:	20001340 	.word	0x20001340

08000bb8 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <wavPlayer_fileSelect+0x48>)
 8000bca:	f00c f8ed 	bl	800cda8 <f_open>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e00e      	b.n	8000bf6 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	f107 010c 	add.w	r1, r7, #12
 8000be0:	222c      	movs	r2, #44	; 0x2c
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <wavPlayer_fileSelect+0x48>)
 8000be4:	f00c fa9e 	bl	800d124 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <wavPlayer_fileSelect+0x4c>)
 8000bec:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <wavPlayer_fileSelect+0x50>)
 8000bf2:	6013      	str	r3, [r2, #0]
  return true;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000104 	.word	0x20000104
 8000c04:	20000334 	.word	0x20000334
 8000c08:	2000133c 	.word	0x2000133c

08000c0c <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <wavPlayer_play+0x48>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <wavPlayer_play+0x4c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff3e 	bl	8000a9c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <wavPlayer_play+0x50>)
 8000c24:	f00c fc65 	bl	800d4f2 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <wavPlayer_play+0x54>)
 8000c2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <wavPlayer_play+0x58>)
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <wavPlayer_play+0x50>)
 8000c32:	f00c fa77 	bl	800d124 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <wavPlayer_play+0x5c>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <wavPlayer_play+0x54>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <wavPlayer_play+0x60>)
 8000c42:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <wavPlayer_play+0x58>)
 8000c4a:	f7ff ff37 	bl	8000abc <audioI2S_play>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001344 	.word	0x20001344
 8000c58:	2000133c 	.word	0x2000133c
 8000c5c:	20000104 	.word	0x20000104
 8000c60:	20001340 	.word	0x20001340
 8000c64:	20000338 	.word	0x20000338
 8000c68:	20000334 	.word	0x20000334
 8000c6c:	20001338 	.word	0x20001338

08000c70 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <wavPlayer_process+0xc8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d859      	bhi.n	8000d32 <wavPlayer_process+0xc2>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <wavPlayer_process+0x14>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000d31 	.word	0x08000d31
 8000c88:	08000c95 	.word	0x08000c95
 8000c8c:	08000cd7 	.word	0x08000cd7
 8000c90:	08000d19 	.word	0x08000d19
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <wavPlayer_process+0xcc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <wavPlayer_process+0xc8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <wavPlayer_process+0xcc>)
 8000ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca6:	4926      	ldr	r1, [pc, #152]	; (8000d40 <wavPlayer_process+0xd0>)
 8000ca8:	4826      	ldr	r0, [pc, #152]	; (8000d44 <wavPlayer_process+0xd4>)
 8000caa:	f00c fa3b 	bl	800d124 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cb6:	d907      	bls.n	8000cc8 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <wavPlayer_process+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cc4:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cc6:	e034      	b.n	8000d32 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <wavPlayer_process+0xc8>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	701a      	strb	r2, [r3, #0]
    break;
 8000cd4:	e02d      	b.n	8000d32 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <wavPlayer_process+0xcc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <wavPlayer_process+0xc8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <wavPlayer_process+0xcc>)
 8000ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce8:	4918      	ldr	r1, [pc, #96]	; (8000d4c <wavPlayer_process+0xdc>)
 8000cea:	4816      	ldr	r0, [pc, #88]	; (8000d44 <wavPlayer_process+0xd4>)
 8000cec:	f00c fa1a 	bl	800d124 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf8:	d907      	bls.n	8000d0a <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <wavPlayer_process+0xcc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <wavPlayer_process+0xd8>)
 8000d06:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d08:	e013      	b.n	8000d32 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <wavPlayer_process+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <wavPlayer_process+0xc8>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
    break;
 8000d16:	e00c      	b.n	8000d32 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <wavPlayer_process+0xd4>)
 8000d1a:	f00c fbc0 	bl	800d49e <f_close>
    wavPlayer_reset();
 8000d1e:	f7ff ff39 	bl	8000b94 <wavPlayer_reset>
    isFinished = true;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <wavPlayer_process+0xe0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <wavPlayer_process+0xc8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
    break;
 8000d2e:	e000      	b.n	8000d32 <wavPlayer_process+0xc2>
    break;
 8000d30:	bf00      	nop
  }
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001345 	.word	0x20001345
 8000d3c:	20001340 	.word	0x20001340
 8000d40:	20000338 	.word	0x20000338
 8000d44:	20000104 	.word	0x20000104
 8000d48:	20001338 	.word	0x20001338
 8000d4c:	20000b38 	.word	0x20000b38
 8000d50:	20001344 	.word	0x20001344

08000d54 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d58:	f7ff feea 	bl	8000b30 <audioI2S_stop>
  isFinished = true;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <wavPlayer_stop+0x14>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001344 	.word	0x20001344

08000d6c <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000d70:	f7ff fec2 	bl	8000af8 <audioI2S_pause>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000d7c:	f7ff feca 	bl	8000b14 <audioI2S_resume>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return isFinished;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <wavPlayer_isFinished+0x14>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20001344 	.word	0x20001344

08000d9c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <audioI2S_halfTransfer_Callback+0x14>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20001345 	.word	0x20001345

08000db4 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <audioI2S_fullTransfer_Callback+0x14>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20001345 	.word	0x20001345

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b095      	sub	sp, #84	; 0x54
 8000dd0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fd0b 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f90f 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 fa5f 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dde:	f000 fa3d 	bl	800125c <MX_DMA_Init>
  MX_I2C1_Init();
 8000de2:	f000 f9df 	bl	80011a4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000de6:	f000 fa0b 	bl	8001200 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000dea:	f007 fa57 	bl	800829c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000dee:	f00c fde5 	bl	800d9bc <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000df2:	f000 f983 	bl	80010fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000df6:	4c75      	ldr	r4, [pc, #468]	; (8000fcc <main+0x200>)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9311      	str	r3, [sp, #68]	; 0x44
 8000dfc:	4668      	mov	r0, sp
 8000dfe:	f104 0310 	add.w	r3, r4, #16
 8000e02:	2244      	movs	r2, #68	; 0x44
 8000e04:	4619      	mov	r1, r3
 8000e06:	f00d f929 	bl	800e05c <memcpy>
 8000e0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e0e:	f7ff fb95 	bl	800053c <CS43_Init>

  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000e12:	2003      	movs	r0, #3
 8000e14:	f7ff fc98 	bl	8000748 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000e18:	486d      	ldr	r0, [pc, #436]	; (8000fd0 <main+0x204>)
 8000e1a:	f7ff fe2f 	bl	8000a7c <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle=0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	71bb      	strb	r3, [r7, #6]
  while (1)
  {


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e26:	f00c fdef 	bl	800da08 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000e2a:	4b6a      	ldr	r3, [pc, #424]	; (8000fd4 <main+0x208>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d106      	bne.n	8000e40 <main+0x74>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e38:	4867      	ldr	r0, [pc, #412]	; (8000fd8 <main+0x20c>)
 8000e3a:	f001 fff9 	bl	8002e30 <HAL_GPIO_WritePin>
 8000e3e:	e010      	b.n	8000e62 <main+0x96>

    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000e40:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <main+0x208>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d10c      	bne.n	8000e62 <main+0x96>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4e:	4862      	ldr	r0, [pc, #392]	; (8000fd8 <main+0x20c>)
 8000e50:	f001 ffee 	bl	8002e30 <HAL_GPIO_WritePin>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	4961      	ldr	r1, [pc, #388]	; (8000fdc <main+0x210>)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f00b ff5f 	bl	800cd1c <f_mount>
      isSdCardMounted = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
    }

    if(Appli_state == APPLICATION_READY)
 8000e62:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <main+0x208>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d1dd      	bne.n	8000e26 <main+0x5a>
    {


      if(!isSdCardMounted)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f083 0301 	eor.w	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <main+0xb8>
      {
        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	4959      	ldr	r1, [pc, #356]	; (8000fe0 <main+0x214>)
 8000e7a:	485a      	ldr	r0, [pc, #360]	; (8000fe4 <main+0x218>)
 8000e7c:	f00b ff4e 	bl	800cd1c <f_mount>
        isSdCardMounted = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
      }
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e84:	2101      	movs	r1, #1
 8000e86:	4858      	ldr	r0, [pc, #352]	; (8000fe8 <main+0x21c>)
 8000e88:	f001 ffba 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0c9      	beq.n	8000e26 <main+0x5a>
      {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e98:	484f      	ldr	r0, [pc, #316]	; (8000fd8 <main+0x20c>)
 8000e9a:	f001 ffc9 	bl	8002e30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea4:	484c      	ldr	r0, [pc, #304]	; (8000fd8 <main+0x20c>)
 8000ea6:	f001 ffc3 	bl	8002e30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb0:	4849      	ldr	r0, [pc, #292]	; (8000fd8 <main+0x20c>)
 8000eb2:	f001 ffbd 	bl	8002e30 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eba:	f000 fd09 	bl	80018d0 <HAL_Delay>
        wavPlayer_fileSelect(WAV_FILE1);
 8000ebe:	484b      	ldr	r0, [pc, #300]	; (8000fec <main+0x220>)
 8000ec0:	f7ff fe7a 	bl	8000bb8 <wavPlayer_fileSelect>
        wavPlayer_play();
 8000ec4:	f7ff fea2 	bl	8000c0c <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000ec8:	e060      	b.n	8000f8c <main+0x1c0>
        {

          wavPlayer_process();
 8000eca:	f7ff fed1 	bl	8000c70 <wavPlayer_process>
    	  HAL_ADC_Start(&hadc1);
 8000ece:	4848      	ldr	r0, [pc, #288]	; (8000ff0 <main+0x224>)
 8000ed0:	f000 fd64 	bl	800199c <HAL_ADC_Start>
      	  	if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK)
 8000ed4:	2164      	movs	r1, #100	; 0x64
 8000ed6:	4846      	ldr	r0, [pc, #280]	; (8000ff0 <main+0x224>)
 8000ed8:	f000 fe59 	bl	8001b8e <HAL_ADC_PollForConversion>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d106      	bne.n	8000ef0 <main+0x124>
      	  	{
      	  		volumen=HAL_ADC_GetValue(&hadc1);
 8000ee2:	4843      	ldr	r0, [pc, #268]	; (8000ff0 <main+0x224>)
 8000ee4:	f000 fed7 	bl	8001c96 <HAL_ADC_GetValue>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <main+0x228>)
 8000eee:	701a      	strb	r2, [r3, #0]
      	  	}
      	  HAL_ADC_Stop(&hadc1);
 8000ef0:	483f      	ldr	r0, [pc, #252]	; (8000ff0 <main+0x224>)
 8000ef2:	f000 fe19 	bl	8001b28 <HAL_ADC_Stop>
      	  CS43_SetVolume(volumen);
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <main+0x228>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fc6e 	bl	80007dc <CS43_SetVolume>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f00:	2101      	movs	r1, #1
 8000f02:	4839      	ldr	r0, [pc, #228]	; (8000fe8 <main+0x21c>)
 8000f04:	f001 ff7c 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d03e      	beq.n	8000f8c <main+0x1c0>
          {
            pauseResumeToggle^=1;
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	f083 0301 	eor.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d017      	beq.n	8000f56 <main+0x18a>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2c:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <main+0x20c>)
 8000f2e:	f001 ff7f 	bl	8002e30 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f38:	4827      	ldr	r0, [pc, #156]	; (8000fd8 <main+0x20c>)
 8000f3a:	f001 ff79 	bl	8002e30 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f44:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <main+0x20c>)
 8000f46:	f001 ff73 	bl	8002e30 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000f4a:	f7ff ff0f 	bl	8000d6c <wavPlayer_pause>
              HAL_Delay(200);
 8000f4e:	20c8      	movs	r0, #200	; 0xc8
 8000f50:	f000 fcbe 	bl	80018d0 <HAL_Delay>
 8000f54:	e01a      	b.n	8000f8c <main+0x1c0>
            }
            else
            {

              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <main+0x20c>)
 8000f5e:	f001 ff67 	bl	8002e30 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f68:	481b      	ldr	r0, [pc, #108]	; (8000fd8 <main+0x20c>)
 8000f6a:	f001 ff61 	bl	8002e30 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	f000 fcad 	bl	80018d0 <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f76:	2101      	movs	r1, #1
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <main+0x21c>)
 8000f7a:	f001 ff41 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <main+0x1bc>
              {
                wavPlayer_stop();
 8000f84:	f7ff fee6 	bl	8000d54 <wavPlayer_stop>
              }
              {
                wavPlayer_resume();
 8000f88:	f7ff fef6 	bl	8000d78 <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8000f8c:	f7ff fefa 	bl	8000d84 <wavPlayer_isFinished>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f083 0301 	eor.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d196      	bne.n	8000eca <main+0xfe>
              }
            }
          }
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <main+0x20c>)
 8000fa4:	f001 ff44 	bl	8002e30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <main+0x20c>)
 8000fb0:	f001 ff3e 	bl	8002e30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <main+0x20c>)
 8000fbc:	f001 ff38 	bl	8002e30 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8000fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc4:	f000 fc84 	bl	80018d0 <HAL_Delay>
    MX_USB_HOST_Process();
 8000fc8:	e72d      	b.n	8000e26 <main+0x5a>
 8000fca:	bf00      	nop
 8000fcc:	20001390 	.word	0x20001390
 8000fd0:	20001490 	.word	0x20001490
 8000fd4:	20001384 	.word	0x20001384
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	0800e210 	.word	0x0800e210
 8000fe0:	200014dc 	.word	0x200014dc
 8000fe4:	20001710 	.word	0x20001710
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	0800e214 	.word	0x0800e214
 8000ff0:	20001444 	.word	0x20001444
 8000ff4:	2000148c 	.word	0x2000148c

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b098      	sub	sp, #96	; 0x60
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00d f833 	bl	800e072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <SystemClock_Config+0xfc>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <SystemClock_Config+0xfc>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <SystemClock_Config+0xfc>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <SystemClock_Config+0x100>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <SystemClock_Config+0x100>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <SystemClock_Config+0x100>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001062:	2301      	movs	r3, #1
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106c:	2302      	movs	r3, #2
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001070:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001074:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001076:	2308      	movs	r3, #8
 8001078:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800107a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800107e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001084:	2307      	movs	r3, #7
 8001086:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fbff 	bl	8006890 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001098:	f000 f992 	bl	80013c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2105      	movs	r1, #5
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fe58 	bl	8006d70 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010c6:	f000 f97b 	bl	80013c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80010ce:	f240 130f 	movw	r3, #271	; 0x10f
 80010d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80010d4:	2306      	movs	r3, #6
 80010d6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 f825 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80010e8:	f000 f96a 	bl	80013c0 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3760      	adds	r7, #96	; 0x60
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001110:	4a22      	ldr	r2, [pc, #136]	; (800119c <MX_ADC1_Init+0xa0>)
 8001112:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001116:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC1_Init+0x9c>)
 800111e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001122:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_ADC1_Init+0x9c>)
 800112c:	2200      	movs	r2, #0
 800112e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_ADC1_Init+0x9c>)
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <MX_ADC1_Init+0xa4>)
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_ADC1_Init+0x9c>)
 800114c:	2201      	movs	r2, #1
 800114e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ADC1_Init+0x9c>)
 800115a:	2201      	movs	r2, #1
 800115c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001160:	f000 fbd8 	bl	8001914 <HAL_ADC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800116a:	f000 f929 	bl	80013c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800116e:	2301      	movs	r3, #1
 8001170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_ADC1_Init+0x9c>)
 8001180:	f000 fd96 	bl	8001cb0 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800118a:	f000 f919 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20001444 	.word	0x20001444
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f003 fb2f 	bl	8004844 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f8e8 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20001390 	.word	0x20001390
 80011f8:	40005400 	.word	0x40005400
 80011fc:	000186a0 	.word	0x000186a0

08001200 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_I2S3_Init+0x54>)
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <MX_I2S3_Init+0x58>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2S3_Init+0x54>)
 800120c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001210:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_I2S3_Init+0x54>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_I2S3_Init+0x54>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_I2S3_Init+0x54>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_I2S3_Init+0x54>)
 8001228:	f64a 4244 	movw	r2, #44100	; 0xac44
 800122c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_I2S3_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_I2S3_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_I2S3_Init+0x54>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_I2S3_Init+0x54>)
 8001242:	f004 fa89 	bl	8005758 <HAL_I2S_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800124c:	f000 f8b8 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20001490 	.word	0x20001490
 8001258:	40003c00 	.word	0x40003c00

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_DMA_Init+0x3c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <MX_DMA_Init+0x3c>)
 800126c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2010      	movs	r0, #16
 8001284:	f001 f80d 	bl	80022a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001288:	2010      	movs	r0, #16
 800128a:	f001 f826 	bl	80022da <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_GPIO_Init+0x114>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <MX_GPIO_Init+0x114>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <MX_GPIO_Init+0x114>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_GPIO_Init+0x114>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2101      	movs	r1, #1
 8001342:	481c      	ldr	r0, [pc, #112]	; (80013b4 <MX_GPIO_Init+0x118>)
 8001344:	f001 fd74 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001348:	2200      	movs	r2, #0
 800134a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800134e:	481a      	ldr	r0, [pc, #104]	; (80013b8 <MX_GPIO_Init+0x11c>)
 8001350:	f001 fd6e 	bl	8002e30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4812      	ldr	r0, [pc, #72]	; (80013b4 <MX_GPIO_Init+0x118>)
 800136c:	f001 fbae 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001370:	2301      	movs	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <MX_GPIO_Init+0x120>)
 8001384:	f001 fba2 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001388:	f24f 0310 	movw	r3, #61456	; 0xf010
 800138c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_GPIO_Init+0x11c>)
 80013a2:	f001 fb93 	bl	8002acc <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40020000 	.word	0x40020000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_ADC_MspInit+0x7c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d127      	bne.n	8001492 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_ADC_MspInit+0x80>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <HAL_ADC_MspInit+0x80>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_ADC_MspInit+0x80>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_ADC_MspInit+0x80>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_ADC_MspInit+0x80>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_ADC_MspInit+0x80>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800147a:	2302      	movs	r3, #2
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_ADC_MspInit+0x84>)
 800148e:	f001 fb1d 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012000 	.word	0x40012000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000

080014a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_I2C_MspInit+0x84>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12c      	bne.n	8001524 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_I2C_MspInit+0x88>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <HAL_I2C_MspInit+0x88>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_I2C_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80014e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	2312      	movs	r3, #18
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f8:	2304      	movs	r3, #4
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <HAL_I2C_MspInit+0x8c>)
 8001504:	f001 fae2 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_I2C_MspInit+0x88>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_I2C_MspInit+0x88>)
 8001512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_I2C_MspInit+0x88>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005400 	.word	0x40005400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a45      	ldr	r2, [pc, #276]	; (800166c <HAL_I2S_MspInit+0x134>)
 8001556:	4293      	cmp	r3, r2
 8001558:	f040 8084 	bne.w	8001664 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_I2S_MspInit+0x138>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a42      	ldr	r2, [pc, #264]	; (8001670 <HAL_I2S_MspInit+0x138>)
 8001566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b40      	ldr	r3, [pc, #256]	; (8001670 <HAL_I2S_MspInit+0x138>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <HAL_I2S_MspInit+0x138>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a3b      	ldr	r2, [pc, #236]	; (8001670 <HAL_I2S_MspInit+0x138>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_I2S_MspInit+0x138>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_I2S_MspInit+0x138>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a34      	ldr	r2, [pc, #208]	; (8001670 <HAL_I2S_MspInit+0x138>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b32      	ldr	r3, [pc, #200]	; (8001670 <HAL_I2S_MspInit+0x138>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b0:	2310      	movs	r3, #16
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c0:	2306      	movs	r3, #6
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	482a      	ldr	r0, [pc, #168]	; (8001674 <HAL_I2S_MspInit+0x13c>)
 80015cc:	f001 fa7e 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80015d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e2:	2306      	movs	r3, #6
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4822      	ldr	r0, [pc, #136]	; (8001678 <HAL_I2S_MspInit+0x140>)
 80015ee:	f001 fa6d 	bl	8002acc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_I2S_MspInit+0x144>)
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <HAL_I2S_MspInit+0x148>)
 80015f6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_I2S_MspInit+0x144>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_I2S_MspInit+0x144>)
 800160c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001610:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001618:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_I2S_MspInit+0x144>)
 800161c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001620:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001628:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_I2S_MspInit+0x144>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001632:	2204      	movs	r2, #4
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001638:	2203      	movs	r2, #3
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_I2S_MspInit+0x144>)
 800163e:	2200      	movs	r2, #0
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <HAL_I2S_MspInit+0x144>)
 800164a:	f000 fe61 	bl	8002310 <HAL_DMA_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001654:	f7ff feb4 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_I2S_MspInit+0x144>)
 800165c:	639a      	str	r2, [r3, #56]	; 0x38
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_I2S_MspInit+0x144>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40003c00 	.word	0x40003c00
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020800 	.word	0x40020800
 800167c:	200013e4 	.word	0x200013e4
 8001680:	40026088 	.word	0x40026088

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 f8de 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <DMA1_Stream5_IRQHandler+0x10>)
 80016de:	f000 ff8d 	bl	80025fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200013e4 	.word	0x200013e4

080016ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <OTG_FS_IRQHandler+0x10>)
 80016f2:	f001 fe45 	bl	8003380 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20001d1c 	.word	0x20001d1c

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f00c fc5a 	bl	800dfe8 <__errno>
 8001734:	4602      	mov	r2, r0
 8001736:	230c      	movs	r3, #12
 8001738:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20020000 	.word	0x20020000
 8001760:	00002000 	.word	0x00002000
 8001764:	20001348 	.word	0x20001348
 8001768:	20001fe8 	.word	0x20001fe8

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <SystemInit+0x28>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <SystemInit+0x28>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SystemInit+0x28>)
 8001782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001786:	609a      	str	r2, [r3, #8]
#endif
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800179c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800179e:	e003      	b.n	80017a8 <LoopCopyDataInit>

080017a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017a6:	3104      	adds	r1, #4

080017a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017b0:	d3f6      	bcc.n	80017a0 <CopyDataInit>
  ldr  r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017b4:	e002      	b.n	80017bc <LoopFillZerobss>

080017b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017b8:	f842 3b04 	str.w	r3, [r2], #4

080017bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017c0:	d3f9      	bcc.n	80017b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017c2:	f7ff ffd3 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f00c fc15 	bl	800dff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff faff 	bl	8000dcc <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017d4:	0800e38c 	.word	0x0800e38c
  ldr  r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017dc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80017e0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80017e4:	20001fe4 	.word	0x20001fe4

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_Init+0x40>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_Init+0x40>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x40>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 fd39 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fdd6 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fd51 	bl	80022f6 <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 fd19 	bl	80022a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000
 8001888:	20000008 	.word	0x20000008
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008
 80018b4:	200014d8 	.word	0x200014d8

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200014d8 	.word	0x200014d8

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_Delay+0x40>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000008 	.word	0x20000008

08001914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e033      	b.n	8001992 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fd74 	bl	8001420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d118      	bne.n	8001984 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800195a:	f023 0302 	bic.w	r3, r3, #2
 800195e:	f043 0202 	orr.w	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fac4 	bl	8001ef4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	e001      	b.n	8001988 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_Start+0x1a>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e0a5      	b.n	8001b02 <HAL_ADC_Start+0x166>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d018      	beq.n	80019fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_ADC_Start+0x174>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <HAL_ADC_Start+0x178>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0c9a      	lsrs	r2, r3, #18
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d179      	bne.n	8001b00 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4a:	d106      	bne.n	8001a5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f023 0206 	bic.w	r2, r3, #6
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_ADC_Start+0x17c>)
 8001a6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a74:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d12a      	bne.n	8001ad8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a25      	ldr	r2, [pc, #148]	; (8001b1c <HAL_ADC_Start+0x180>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d015      	beq.n	8001ab8 <HAL_ADC_Start+0x11c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_ADC_Start+0x184>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_Start+0x106>
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_ADC_Start+0x17c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_ADC_Start+0x188>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d129      	bne.n	8001b00 <HAL_ADC_Start+0x164>
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_ADC_Start+0x17c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d823      	bhi.n	8001b00 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11c      	bne.n	8001b00 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	e013      	b.n	8001b00 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_ADC_Start+0x180>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10e      	bne.n	8001b00 <HAL_ADC_Start+0x164>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001afe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	40012300 	.word	0x40012300
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	40012100 	.word	0x40012100
 8001b24:	40012200 	.word	0x40012200

08001b28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Stop+0x16>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e021      	b.n	8001b82 <HAL_ADC_Stop+0x5a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001baa:	d113      	bne.n	8001bd4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bba:	d10b      	bne.n	8001bd4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e05c      	b.n	8001c8e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bd4:	f7ff fe70 	bl	80018b8 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bda:	e01a      	b.n	8001c12 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be2:	d016      	beq.n	8001c12 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_ADC_PollForConversion+0x6c>
 8001bea:	f7ff fe65 	bl	80018b8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d20b      	bcs.n	8001c12 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f043 0204 	orr.w	r2, r3, #4
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e03d      	b.n	8001c8e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d1dd      	bne.n	8001bdc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0212 	mvn.w	r2, #18
 8001c28:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d123      	bne.n	8001c8c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d11f      	bne.n	8001c8c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d111      	bne.n	8001c8c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1c>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e105      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x228>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d925      	bls.n	8001d28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b1e      	subs	r3, #30
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	400a      	ands	r2, r1
 8001d00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	4603      	mov	r3, r0
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4403      	add	r3, r0
 8001d1a:	3b1e      	subs	r3, #30
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	e022      	b.n	8001d6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	400a      	ands	r2, r1
 8001d4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4403      	add	r3, r0
 8001d64:	409a      	lsls	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d824      	bhi.n	8001dc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	3b05      	subs	r3, #5
 8001d88:	221f      	movs	r2, #31
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	400a      	ands	r2, r1
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b05      	subs	r3, #5
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001dbe:	e04c      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d824      	bhi.n	8001e12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b23      	subs	r3, #35	; 0x23
 8001dda:	221f      	movs	r2, #31
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b23      	subs	r3, #35	; 0x23
 8001e04:	fa00 f203 	lsl.w	r2, r0, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e10:	e023      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	3b41      	subs	r3, #65	; 0x41
 8001e24:	221f      	movs	r2, #31
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	400a      	ands	r2, r1
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b41      	subs	r3, #65	; 0x41
 8001e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_ADC_ConfigChannel+0x234>)
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <HAL_ADC_ConfigChannel+0x238>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d109      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1cc>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b12      	cmp	r3, #18
 8001e6e:	d105      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_ADC_ConfigChannel+0x238>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d123      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x21e>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d003      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x1e6>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b11      	cmp	r3, #17
 8001e94:	d11b      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d111      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_ADC_ConfigChannel+0x23c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_ADC_ConfigChannel+0x240>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	0c9a      	lsrs	r2, r3, #18
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ec0:	e002      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40012300 	.word	0x40012300
 8001ee8:	40012000 	.word	0x40012000
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	431bde83 	.word	0x431bde83

08001ef4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001efc:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <ADC_Init+0x1f0>)
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	021a      	lsls	r2, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <ADC_Init+0x1f4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	e00f      	b.n	8001ff2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0202 	bic.w	r2, r2, #2
 8002000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e1b      	ldrb	r3, [r3, #24]
 800200c:	005a      	lsls	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800202e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800203e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	3b01      	subs	r3, #1
 800204c:	035a      	lsls	r2, r3, #13
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	e007      	b.n	8002068 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002066:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	3b01      	subs	r3, #1
 8002084:	051a      	lsls	r2, r3, #20
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800209c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020aa:	025a      	lsls	r2, r3, #9
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	029a      	lsls	r2, r3, #10
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40012300 	.word	0x40012300
 80020e8:	0f000001 	.word	0x0f000001

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4907      	ldr	r1, [pc, #28]	; (8002188 <__NVIC_EnableIRQ+0x38>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db0a      	blt.n	80021b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	490c      	ldr	r1, [pc, #48]	; (80021d8 <__NVIC_SetPriority+0x4c>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	0112      	lsls	r2, r2, #4
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	440b      	add	r3, r1
 80021b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b4:	e00a      	b.n	80021cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4908      	ldr	r1, [pc, #32]	; (80021dc <__NVIC_SetPriority+0x50>)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	3b04      	subs	r3, #4
 80021c4:	0112      	lsls	r2, r2, #4
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	440b      	add	r3, r1
 80021ca:	761a      	strb	r2, [r3, #24]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e100 	.word	0xe000e100
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f1c3 0307 	rsb	r3, r3, #7
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf28      	it	cs
 80021fe:	2304      	movcs	r3, #4
 8002200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3304      	adds	r3, #4
 8002206:	2b06      	cmp	r3, #6
 8002208:	d902      	bls.n	8002210 <NVIC_EncodePriority+0x30>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3b03      	subs	r3, #3
 800220e:	e000      	b.n	8002212 <NVIC_EncodePriority+0x32>
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43d9      	mvns	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	4313      	orrs	r3, r2
         );
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff8e 	bl	800218c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff29 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff3e 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff8e 	bl	80021e0 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff31 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff facc 	bl	80018b8 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e099      	b.n	8002460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234c:	e00f      	b.n	800236e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800234e:	f7ff fab3 	bl	80018b8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b05      	cmp	r3, #5
 800235a:	d908      	bls.n	800236e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e078      	b.n	8002460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e8      	bne.n	800234e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_DMA_Init+0x158>)
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4313      	orrs	r3, r2
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0307 	bic.w	r3, r3, #7
 80023ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d117      	bne.n	8002432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fadf 	bl	80029d8 <DMA_CheckFifoParam>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800242e:	2301      	movs	r3, #1
 8002430:	e016      	b.n	8002460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa96 	bl	800296c <DMA_CalcBaseAndBitshift>
 8002440:	4603      	mov	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	223f      	movs	r2, #63	; 0x3f
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	f010803f 	.word	0xf010803f

0800246c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_DMA_Start_IT+0x26>
 800248e:	2302      	movs	r3, #2
 8002490:	e040      	b.n	8002514 <HAL_DMA_Start_IT+0xa8>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d12f      	bne.n	8002506 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fa28 	bl	8002910 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0216 	orr.w	r2, r2, #22
 80024da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e005      	b.n	8002512 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252a:	f7ff f9c5 	bl	80018b8 <HAL_GetTick>
 800252e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d008      	beq.n	800254e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e052      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0216 	bic.w	r2, r2, #22
 800255c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_DMA_Abort+0x62>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259e:	e013      	b.n	80025c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a0:	f7ff f98a 	bl	80018b8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d90c      	bls.n	80025c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e015      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e4      	bne.n	80025a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	223f      	movs	r2, #63	; 0x3f
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002608:	4b92      	ldr	r3, [pc, #584]	; (8002854 <HAL_DMA_IRQHandler+0x258>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a92      	ldr	r2, [pc, #584]	; (8002858 <HAL_DMA_IRQHandler+0x25c>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2208      	movs	r2, #8
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01a      	beq.n	8002668 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2208      	movs	r2, #8
 8002656:	409a      	lsls	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2201      	movs	r2, #1
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2201      	movs	r2, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0202 	orr.w	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2204      	movs	r2, #4
 80026a4:	409a      	lsls	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2204      	movs	r2, #4
 80026c2:	409a      	lsls	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f043 0204 	orr.w	r2, r3, #4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2210      	movs	r2, #16
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d043      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d03c      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2210      	movs	r2, #16
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d018      	beq.n	800273e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d024      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
 800272a:	e01f      	b.n	800276c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01b      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e016      	b.n	800276c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0208 	bic.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2220      	movs	r2, #32
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 808e 	beq.w	800289a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8086 	beq.w	800289a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2220      	movs	r2, #32
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d136      	bne.n	8002814 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0216 	bic.w	r2, r2, #22
 80027b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_DMA_IRQHandler+0x1da>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0208 	bic.w	r2, r2, #8
 80027e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	223f      	movs	r2, #63	; 0x3f
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	2b00      	cmp	r3, #0
 8002808:	d07d      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
        }
        return;
 8002812:	e078      	b.n	8002906 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01c      	beq.n	800285c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	2b00      	cmp	r3, #0
 8002836:	d030      	beq.n	800289a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
 8002840:	e02b      	b.n	800289a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d027      	beq.n	800289a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
 8002852:	e022      	b.n	800289a <HAL_DMA_IRQHandler+0x29e>
 8002854:	20000000 	.word	0x20000000
 8002858:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0210 	bic.w	r2, r2, #16
 8002878:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d032      	beq.n	8002908 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d022      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2205      	movs	r2, #5
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3301      	adds	r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d307      	bcc.n	80028e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f2      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x2ca>
 80028e0:	e000      	b.n	80028e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e000      	b.n	8002908 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002906:	bf00      	nop
    }
  }
}
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop

08002910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800292c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d108      	bne.n	8002950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800294e:	e007      	b.n	8002960 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3b10      	subs	r3, #16
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <DMA_CalcBaseAndBitshift+0x64>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d909      	bls.n	80029ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	1d1a      	adds	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58
 80029ac:	e007      	b.n	80029be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	aaaaaaab 	.word	0xaaaaaaab
 80029d4:	0800e2e0 	.word	0x0800e2e0

080029d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11f      	bne.n	8002a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d855      	bhi.n	8002aa4 <DMA_CheckFifoParam+0xcc>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x28>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a23 	.word	0x08002a23
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d045      	beq.n	8002aa8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e042      	b.n	8002aa8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a2a:	d13f      	bne.n	8002aac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a30:	e03c      	b.n	8002aac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	d121      	bne.n	8002a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d836      	bhi.n	8002ab0 <DMA_CheckFifoParam+0xd8>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <DMA_CheckFifoParam+0x70>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a5f 	.word	0x08002a5f
 8002a50:	08002a59 	.word	0x08002a59
 8002a54:	08002a71 	.word	0x08002a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e02f      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e021      	b.n	8002ab4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a78:	d11e      	bne.n	8002ab8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a7e:	e01b      	b.n	8002ab8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <DMA_CheckFifoParam+0xb4>
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d003      	beq.n	8002a92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a8a:	e018      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e015      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa2:	e00b      	b.n	8002abc <DMA_CheckFifoParam+0xe4>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e00a      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e008      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aac:	bf00      	nop
 8002aae:	e006      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab0:	bf00      	nop
 8002ab2:	e004      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab4:	bf00      	nop
 8002ab6:	e002      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;   
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002abc:	bf00      	nop
    }
  } 
  
  return status; 
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e16b      	b.n	8002dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f040 815a 	bne.w	8002dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d00b      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1a:	2b11      	cmp	r3, #17
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b12      	cmp	r3, #18
 8002b24:	d130      	bne.n	8002b88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0201 	and.w	r2, r3, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0xfc>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b12      	cmp	r3, #18
 8002bc6:	d123      	bne.n	8002c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80b4 	beq.w	8002dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_GPIO_Init+0x308>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a5e      	ldr	r2, [pc, #376]	; (8002dd4 <HAL_GPIO_Init+0x308>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_GPIO_Init+0x308>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a51      	ldr	r2, [pc, #324]	; (8002ddc <HAL_GPIO_Init+0x310>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_GPIO_Init+0x314>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	; (8002de4 <HAL_GPIO_Init+0x318>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_GPIO_Init+0x31c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	; (8002df8 <HAL_GPIO_Init+0x32c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x20a>
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	e00e      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4934      	ldr	r1, [pc, #208]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d36:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae90 	bls.w	8002ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3724      	adds	r7, #36	; 0x24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40021400 	.word	0x40021400
 8002df4:	40021800 	.word	0x40021800
 8002df8:	40021c00 	.word	0x40021c00
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e64:	b08f      	sub	sp, #60	; 0x3c
 8002e66:	af0a      	add	r7, sp, #40	; 0x28
 8002e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e054      	b.n	8002f1e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f00a fdf2 	bl	800da78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fb16 	bl	80074e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	687e      	ldr	r6, [r7, #4]
 8002ec0:	466d      	mov	r5, sp
 8002ec2:	f106 0410 	add.w	r4, r6, #16
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed6:	1d33      	adds	r3, r6, #4
 8002ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eda:	6838      	ldr	r0, [r7, #0]
 8002edc:	f004 fa90 	bl	8007400 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fb0d 	bl	8007506 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	687e      	ldr	r6, [r7, #4]
 8002ef4:	466d      	mov	r5, sp
 8002ef6:	f106 0410 	add.w	r4, r6, #16
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f0a:	1d33      	adds	r3, r6, #4
 8002f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	f004 fc20 	bl	8007754 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f26 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f26:	b590      	push	{r4, r7, lr}
 8002f28:	b089      	sub	sp, #36	; 0x24
 8002f2a:	af04      	add	r7, sp, #16
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	4608      	mov	r0, r1
 8002f30:	4611      	mov	r1, r2
 8002f32:	461a      	mov	r2, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	70fb      	strb	r3, [r7, #3]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70bb      	strb	r3, [r7, #2]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_HCD_HC_Init+0x28>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e07f      	b.n	800304e <HAL_HCD_HC_Init+0x128>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	333d      	adds	r3, #61	; 0x3d
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	3338      	adds	r3, #56	; 0x38
 8002f7a:	787a      	ldrb	r2, [r7, #1]
 8002f7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f90:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3339      	adds	r3, #57	; 0x39
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	333f      	adds	r3, #63	; 0x3f
 8002fb6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	78bb      	ldrb	r3, [r7, #2]
 8002fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc4:	b2d8      	uxtb	r0, r3
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	333a      	adds	r3, #58	; 0x3a
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da0a      	bge.n	8002ff6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	333b      	adds	r3, #59	; 0x3b
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e009      	b.n	800300a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	333b      	adds	r3, #59	; 0x3b
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	333c      	adds	r3, #60	; 0x3c
 800301a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800301e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	787c      	ldrb	r4, [r7, #1]
 8003026:	78ba      	ldrb	r2, [r7, #2]
 8003028:	78f9      	ldrb	r1, [r7, #3]
 800302a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800302c:	9302      	str	r3, [sp, #8]
 800302e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4623      	mov	r3, r4
 800303c:	f004 fd0c 	bl	8007a58 <USB_HC_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}

08003056 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_HCD_HC_Halt+0x1e>
 8003070:	2302      	movs	r3, #2
 8003072:	e00f      	b.n	8003094 <HAL_HCD_HC_Halt+0x3e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f004 ff48 	bl	8007f1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	70fb      	strb	r3, [r7, #3]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70bb      	strb	r3, [r7, #2]
 80030b2:	4613      	mov	r3, r2
 80030b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	333b      	adds	r3, #59	; 0x3b
 80030c6:	78ba      	ldrb	r2, [r7, #2]
 80030c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	333f      	adds	r3, #63	; 0x3f
 80030da:	787a      	ldrb	r2, [r7, #1]
 80030dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030de:	7c3b      	ldrb	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d114      	bne.n	800310e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3342      	adds	r3, #66	; 0x42
 80030f4:	2203      	movs	r2, #3
 80030f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	333d      	adds	r3, #61	; 0x3d
 8003108:	7f3a      	ldrb	r2, [r7, #28]
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e009      	b.n	8003122 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	3342      	adds	r3, #66	; 0x42
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003122:	787b      	ldrb	r3, [r7, #1]
 8003124:	2b03      	cmp	r3, #3
 8003126:	f200 80d6 	bhi.w	80032d6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HAL_HCD_HC_SubmitRequest+0x94>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003141 	.word	0x08003141
 8003134:	080032c1 	.word	0x080032c1
 8003138:	080031ad 	.word	0x080031ad
 800313c:	08003237 	.word	0x08003237
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003140:	7c3b      	ldrb	r3, [r7, #16]
 8003142:	2b01      	cmp	r3, #1
 8003144:	f040 80c9 	bne.w	80032da <HAL_HCD_HC_SubmitRequest+0x23e>
 8003148:	78bb      	ldrb	r3, [r7, #2]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 80c5 	bne.w	80032da <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003150:	8b3b      	ldrh	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3351      	adds	r3, #81	; 0x51
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	3351      	adds	r3, #81	; 0x51
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	3342      	adds	r3, #66	; 0x42
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003194:	e0a1      	b.n	80032da <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	3342      	adds	r3, #66	; 0x42
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]
      break;
 80031aa:	e096      	b.n	80032da <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031ac:	78bb      	ldrb	r3, [r7, #2]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d120      	bne.n	80031f4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	3351      	adds	r3, #81	; 0x51
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	3342      	adds	r3, #66	; 0x42
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031dc:	e07e      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	3342      	adds	r3, #66	; 0x42
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
      break;
 80031f2:	e073      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	3350      	adds	r3, #80	; 0x50
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	3342      	adds	r3, #66	; 0x42
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
      break;
 800321e:	e05d      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	3342      	adds	r3, #66	; 0x42
 8003230:	2202      	movs	r2, #2
 8003232:	701a      	strb	r2, [r3, #0]
      break;
 8003234:	e052      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003236:	78bb      	ldrb	r3, [r7, #2]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d120      	bne.n	800327e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3351      	adds	r3, #81	; 0x51
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	3342      	adds	r3, #66	; 0x42
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003266:	e039      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	3342      	adds	r3, #66	; 0x42
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
      break;
 800327c:	e02e      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	3350      	adds	r3, #80	; 0x50
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	3342      	adds	r3, #66	; 0x42
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
      break;
 80032a8:	e018      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	3342      	adds	r3, #66	; 0x42
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
      break;
 80032be:	e00d      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	3342      	adds	r3, #66	; 0x42
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
      break;
 80032d4:	e002      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80032da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	440b      	add	r3, r1
 80032ea:	3344      	adds	r3, #68	; 0x44
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	8b39      	ldrh	r1, [r7, #24]
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4403      	add	r3, r0
 8003300:	3348      	adds	r3, #72	; 0x48
 8003302:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	334c      	adds	r3, #76	; 0x4c
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	3339      	adds	r3, #57	; 0x39
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	335d      	adds	r3, #93	; 0x5d
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	3338      	adds	r3, #56	; 0x38
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	18d1      	adds	r1, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	f004 fc7c 	bl	8007c6c <USB_HC_StartXfer>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop

08003380 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f004 f999 	bl	80076ce <USB_GetMode>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 80ef 	bne.w	8003582 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 f97d 	bl	80076a8 <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e5 	beq.w	8003580 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 f974 	bl	80076a8 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ca:	d104      	bne.n	80033d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f004 f964 	bl	80076a8 <USB_ReadInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ea:	d104      	bne.n	80033f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 f954 	bl	80076a8 <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	d104      	bne.n	8003416 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003414:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f004 f944 	bl	80076a8 <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2202      	movs	r2, #2
 8003430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f004 f936 	bl	80076a8 <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d115      	bne.n	8003474 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003450:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f00a fb86 	bl	800db74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	4618      	mov	r0, r3
 8003470:	f004 fa2c 	bl	80078cc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f004 f915 	bl	80076a8 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003488:	d102      	bne.n	8003490 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 f966 	bl	800475c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 f907 	bl	80076a8 <USB_ReadInterrupts>
 800349a:	4603      	mov	r3, r0
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d106      	bne.n	80034b2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f00a fb49 	bl	800db3c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2208      	movs	r2, #8
 80034b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f004 f8f6 	bl	80076a8 <USB_ReadInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c6:	d138      	bne.n	800353a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fd13 	bl	8007ef8 <USB_HC_ReadInterrupt>
 80034d2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e025      	b.n	8003526 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d018      	beq.n	8003520 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003504:	d106      	bne.n	8003514 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8cf 	bl	80036b0 <HCD_HC_IN_IRQHandler>
 8003512:	e005      	b.n	8003520 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fcfd 	bl	8003f1a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3301      	adds	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	d3d4      	bcc.n	80034da <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f004 f8b2 	bl	80076a8 <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b10      	cmp	r3, #16
 800354c:	d101      	bne.n	8003552 <HAL_HCD_IRQHandler+0x1d2>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_HCD_IRQHandler+0x1d4>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d014      	beq.n	8003582 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0210 	bic.w	r2, r2, #16
 8003566:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f001 f84b 	bl	8004604 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0210 	orr.w	r2, r2, #16
 800357c:	619a      	str	r2, [r3, #24]
 800357e:	e000      	b.n	8003582 <HAL_HCD_IRQHandler+0x202>
      return;
 8003580:	bf00      	nop
    }
  }
}
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_HCD_Start+0x16>
 800359a:	2302      	movs	r3, #2
 800359c:	e013      	b.n	80035c6 <HAL_HCD_Start+0x3e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 ff89 	bl	80074c2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 f9ec 	bl	8007994 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_HCD_Stop+0x16>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e00d      	b.n	8003600 <HAL_HCD_Stop+0x32>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 fdcd 	bl	8008190 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f004 f993 	bl	8007940 <USB_ResetPort>
 800361a:	4603      	mov	r3, r0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	335c      	adds	r3, #92	; 0x5c
 8003640:	781b      	ldrb	r3, [r3, #0]
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	334c      	adds	r3, #76	; 0x4c
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f004 f9d5 	bl	8007a34 <USB_GetCurrentFrame>
 800368a:	4603      	mov	r3, r0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f004 f9b0 	bl	8007a06 <USB_GetHostSpeed>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d119      	bne.n	8003714 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	2304      	movs	r3, #4
 80036f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	440a      	add	r2, r1
 8003708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	60d3      	str	r3, [r2, #12]
 8003712:	e0ce      	b.n	80038b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d12c      	bne.n	8003786 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	461a      	mov	r2, r3
 800373a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	335d      	adds	r3, #93	; 0x5d
 8003750:	2207      	movs	r2, #7
 8003752:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	0151      	lsls	r1, r2, #5
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	440a      	add	r2, r1
 800376a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800376e:	f043 0302 	orr.w	r3, r3, #2
 8003772:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f004 fbcb 	bl	8007f1a <USB_HC_Halt>
 8003784:	e095      	b.n	80038b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b20      	cmp	r3, #32
 800379a:	d109      	bne.n	80037b0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	461a      	mov	r2, r3
 80037aa:	2320      	movs	r3, #32
 80037ac:	6093      	str	r3, [r2, #8]
 80037ae:	e080      	b.n	80038b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d134      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	0151      	lsls	r1, r2, #5
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	440a      	add	r2, r1
 80037dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	335d      	adds	r3, #93	; 0x5d
 80037f6:	2205      	movs	r2, #5
 80037f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003806:	461a      	mov	r2, r3
 8003808:	2310      	movs	r3, #16
 800380a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003818:	461a      	mov	r2, r3
 800381a:	2308      	movs	r3, #8
 800381c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f004 fb76 	bl	8007f1a <USB_HC_Halt>
 800382e:	e040      	b.n	80038b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d134      	bne.n	80038b2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	440a      	add	r2, r1
 800385e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fb51 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	461a      	mov	r2, r3
 8003886:	2310      	movs	r3, #16
 8003888:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	335d      	adds	r3, #93	; 0x5d
 800389a:	2208      	movs	r2, #8
 800389c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	461a      	mov	r2, r3
 80038ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d122      	bne.n	8003910 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 fb10 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003906:	461a      	mov	r2, r3
 8003908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800390c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800390e:	e300      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b01      	cmp	r3, #1
 8003924:	f040 80fd 	bne.w	8003b22 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3348      	adds	r3, #72	; 0x48
 8003940:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0159      	lsls	r1, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	440b      	add	r3, r1
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003954:	1ad1      	subs	r1, r2, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4403      	add	r3, r0
 8003964:	334c      	adds	r3, #76	; 0x4c
 8003966:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	440b      	add	r3, r1
 8003976:	335d      	adds	r3, #93	; 0x5d
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	3358      	adds	r3, #88	; 0x58
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	461a      	mov	r2, r3
 800399e:	2301      	movs	r3, #1
 80039a0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	333f      	adds	r3, #63	; 0x3f
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	333f      	adds	r3, #63	; 0x3f
 80039c8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d121      	bne.n	8003a12 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f004 fa8e 	bl	8007f1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	e070      	b.n	8003af4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	333f      	adds	r3, #63	; 0x3f
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d12a      	bne.n	8003a7e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a46:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	335c      	adds	r3, #92	; 0x5c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	b2d8      	uxtb	r0, r3
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	335c      	adds	r3, #92	; 0x5c
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	4601      	mov	r1, r0
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f00a f88a 	bl	800db90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a7c:	e03a      	b.n	8003af4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	333f      	adds	r3, #63	; 0x3f
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d12f      	bne.n	8003af4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	335c      	adds	r3, #92	; 0x5c
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3350      	adds	r3, #80	; 0x50
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2d8      	uxtb	r0, r3
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	3350      	adds	r3, #80	; 0x50
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	b2d8      	uxtb	r0, r3
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	335c      	adds	r3, #92	; 0x5c
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4601      	mov	r1, r0
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f00a f84e 	bl	800db90 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	3350      	adds	r3, #80	; 0x50
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2d8      	uxtb	r0, r3
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	3350      	adds	r3, #80	; 0x50
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	701a      	strb	r2, [r3, #0]
}
 8003b20:	e1f7      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f040 811a 	bne.w	8003d6e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b54:	f023 0302 	bic.w	r3, r3, #2
 8003b58:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	335d      	adds	r3, #93	; 0x5d
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10a      	bne.n	8003b86 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	335c      	adds	r3, #92	; 0x5c
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e0d9      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	335d      	adds	r3, #93	; 0x5d
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d10a      	bne.n	8003bb2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	335c      	adds	r3, #92	; 0x5c
 8003bac:	2205      	movs	r2, #5
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e0c3      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	335d      	adds	r3, #93	; 0x5d
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d00a      	beq.n	8003bde <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	335d      	adds	r3, #93	; 0x5d
 8003bd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d156      	bne.n	8003c8c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	3358      	adds	r3, #88	; 0x58
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1c59      	adds	r1, r3, #1
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4403      	add	r3, r0
 8003c00:	3358      	adds	r3, #88	; 0x58
 8003c02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	440b      	add	r3, r1
 8003c12:	3358      	adds	r3, #88	; 0x58
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d914      	bls.n	8003c44 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	440b      	add	r3, r1
 8003c28:	3358      	adds	r3, #88	; 0x58
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	335c      	adds	r3, #92	; 0x5c
 8003c3e:	2204      	movs	r2, #4
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e009      	b.n	8003c58 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	440b      	add	r3, r1
 8003c52:	335c      	adds	r3, #92	; 0x5c
 8003c54:	2202      	movs	r2, #2
 8003c56:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c6e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c76:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e056      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	335d      	adds	r3, #93	; 0x5d
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d123      	bne.n	8003cea <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	440b      	add	r3, r1
 8003cb0:	335c      	adds	r3, #92	; 0x5c
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ccc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cd4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e027      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	440b      	add	r3, r1
 8003cf8:	335d      	adds	r3, #93	; 0x5d
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b07      	cmp	r3, #7
 8003cfe:	d11c      	bne.n	8003d3a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3358      	adds	r3, #88	; 0x58
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	1c59      	adds	r1, r3, #1
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4403      	add	r3, r0
 8003d22:	3358      	adds	r3, #88	; 0x58
 8003d24:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	335c      	adds	r3, #92	; 0x5c
 8003d36:	2204      	movs	r2, #4
 8003d38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	2302      	movs	r3, #2
 8003d4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	b2d8      	uxtb	r0, r3
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	335c      	adds	r3, #92	; 0x5c
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	4601      	mov	r1, r0
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f009 ff12 	bl	800db90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d6c:	e0d1      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b80      	cmp	r3, #128	; 0x80
 8003d82:	d13e      	bne.n	8003e02 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	3358      	adds	r3, #88	; 0x58
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	1c59      	adds	r1, r3, #1
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4403      	add	r3, r0
 8003dc6:	3358      	adds	r3, #88	; 0x58
 8003dc8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	335d      	adds	r3, #93	; 0x5d
 8003dda:	2206      	movs	r2, #6
 8003ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f004 f896 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	6093      	str	r3, [r2, #8]
}
 8003e00:	e087      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d17c      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	440b      	add	r3, r1
 8003e26:	333f      	adds	r3, #63	; 0x3f
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d122      	bne.n	8003e74 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3358      	adds	r3, #88	; 0x58
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 f854 	bl	8007f1a <USB_HC_Halt>
 8003e72:	e045      	b.n	8003f00 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	440b      	add	r3, r1
 8003e82:	333f      	adds	r3, #63	; 0x3f
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	333f      	adds	r3, #63	; 0x3f
 8003e9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d12f      	bne.n	8003f00 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	440b      	add	r3, r1
 8003eae:	3358      	adds	r3, #88	; 0x58
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d121      	bne.n	8003f00 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	335d      	adds	r3, #93	; 0x5d
 8003ecc:	2203      	movs	r2, #3
 8003ece:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 f80d 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2310      	movs	r3, #16
 8003f10:	6093      	str	r3, [r2, #8]
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d119      	bne.n	8003f7e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	461a      	mov	r2, r3
 8003f58:	2304      	movs	r3, #4
 8003f5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f7c:	e33e      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d141      	bne.n	8004018 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	333d      	adds	r3, #61	; 0x3d
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 831f 	bne.w	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	333d      	adds	r3, #61	; 0x3d
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	335c      	adds	r3, #92	; 0x5c
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f003 ff82 	bl	8007f1a <USB_HC_Halt>
}
 8004016:	e2f1      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d13f      	bne.n	80040ae <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	335d      	adds	r3, #93	; 0x5d
 800403e:	2204      	movs	r2, #4
 8004040:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	333d      	adds	r3, #61	; 0x3d
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	3358      	adds	r3, #88	; 0x58
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	440a      	add	r2, r1
 8004080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f003 ff40 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	e2a6      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c4:	d122      	bne.n	800410c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f003 ff12 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004108:	6093      	str	r3, [r2, #8]
}
 800410a:	e277      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d135      	bne.n	800418e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	440b      	add	r3, r1
 8004130:	3358      	adds	r3, #88	; 0x58
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	440a      	add	r2, r1
 800414c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f003 feda 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	461a      	mov	r2, r3
 8004174:	2301      	movs	r3, #1
 8004176:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	440b      	add	r3, r1
 8004186:	335d      	adds	r3, #93	; 0x5d
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
}
 800418c:	e236      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d12b      	bne.n	80041fc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b0:	461a      	mov	r2, r3
 80041b2:	2308      	movs	r3, #8
 80041b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f003 fe9a 	bl	8007f1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	440b      	add	r3, r1
 80041f4:	335d      	adds	r3, #93	; 0x5d
 80041f6:	2205      	movs	r2, #5
 80041f8:	701a      	strb	r2, [r3, #0]
}
 80041fa:	e1ff      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d155      	bne.n	80042be <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	3358      	adds	r3, #88	; 0x58
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	440b      	add	r3, r1
 8004234:	335d      	adds	r3, #93	; 0x5d
 8004236:	2203      	movs	r2, #3
 8004238:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	440b      	add	r3, r1
 8004248:	333d      	adds	r3, #61	; 0x3d
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d114      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	440b      	add	r3, r1
 800425e:	333c      	adds	r3, #60	; 0x3c
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	440b      	add	r3, r1
 8004274:	333d      	adds	r3, #61	; 0x3d
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	440a      	add	r2, r1
 8004290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f003 fe38 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	461a      	mov	r2, r3
 80042b8:	2310      	movs	r3, #16
 80042ba:	6093      	str	r3, [r2, #8]
}
 80042bc:	e19e      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d12b      	bne.n	800432c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	4611      	mov	r1, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f003 fe0b 	bl	8007f1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	440b      	add	r3, r1
 8004312:	335d      	adds	r3, #93	; 0x5d
 8004314:	2206      	movs	r2, #6
 8004316:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004324:	461a      	mov	r2, r3
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	6093      	str	r3, [r2, #8]
}
 800432a:	e167      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004342:	d135      	bne.n	80043b0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4413      	add	r3, r2
 800434c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	440a      	add	r2, r1
 800435a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f003 fdd3 	bl	8007f1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004380:	461a      	mov	r2, r3
 8004382:	2310      	movs	r3, #16
 8004384:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004398:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	335d      	adds	r3, #93	; 0x5d
 80043aa:	2208      	movs	r2, #8
 80043ac:	701a      	strb	r2, [r3, #0]
}
 80043ae:	e125      	b.n	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	f040 811a 	bne.w	80045fc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e2:	f023 0302 	bic.w	r3, r3, #2
 80043e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	440b      	add	r3, r1
 80043f6:	335d      	adds	r3, #93	; 0x5d
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d137      	bne.n	800446e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	440b      	add	r3, r1
 800440c:	335c      	adds	r3, #92	; 0x5c
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	440b      	add	r3, r1
 8004420:	333f      	adds	r3, #63	; 0x3f
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d00b      	beq.n	8004440 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	440b      	add	r3, r1
 8004436:	333f      	adds	r3, #63	; 0x3f
 8004438:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800443a:	2b03      	cmp	r3, #3
 800443c:	f040 80c5 	bne.w	80045ca <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	3351      	adds	r3, #81	; 0x51
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	f083 0301 	eor.w	r3, r3, #1
 8004456:	b2d8      	uxtb	r0, r3
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	440b      	add	r3, r1
 8004466:	3351      	adds	r3, #81	; 0x51
 8004468:	4602      	mov	r2, r0
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	e0ad      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	440b      	add	r3, r1
 800447c:	335d      	adds	r3, #93	; 0x5d
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d10a      	bne.n	800449a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	440b      	add	r3, r1
 8004492:	335c      	adds	r3, #92	; 0x5c
 8004494:	2202      	movs	r2, #2
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	e097      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	440b      	add	r3, r1
 80044a8:	335d      	adds	r3, #93	; 0x5d
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d10a      	bne.n	80044c6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	440b      	add	r3, r1
 80044be:	335c      	adds	r3, #92	; 0x5c
 80044c0:	2202      	movs	r2, #2
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e081      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	440b      	add	r3, r1
 80044d4:	335d      	adds	r3, #93	; 0x5d
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d10a      	bne.n	80044f2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	440b      	add	r3, r1
 80044ea:	335c      	adds	r3, #92	; 0x5c
 80044ec:	2205      	movs	r2, #5
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	e06b      	b.n	80045ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	335d      	adds	r3, #93	; 0x5d
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d00a      	beq.n	800451e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	335d      	adds	r3, #93	; 0x5d
 8004518:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800451a:	2b08      	cmp	r3, #8
 800451c:	d155      	bne.n	80045ca <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	440b      	add	r3, r1
 800452c:	3358      	adds	r3, #88	; 0x58
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4403      	add	r3, r0
 8004540:	3358      	adds	r3, #88	; 0x58
 8004542:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	3358      	adds	r3, #88	; 0x58
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d914      	bls.n	8004584 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	3358      	adds	r3, #88	; 0x58
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	335c      	adds	r3, #92	; 0x5c
 800457e:	2204      	movs	r2, #4
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e009      	b.n	8004598 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	335c      	adds	r3, #92	; 0x5c
 8004594:	2202      	movs	r2, #2
 8004596:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	461a      	mov	r2, r3
 80045d8:	2302      	movs	r3, #2
 80045da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	b2d8      	uxtb	r0, r3
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	440b      	add	r3, r1
 80045ee:	335c      	adds	r3, #92	; 0x5c
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4601      	mov	r1, r0
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f009 faca 	bl	800db90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	0c5b      	lsrs	r3, r3, #17
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004638:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d003      	beq.n	8004648 <HCD_RXQLVL_IRQHandler+0x44>
 8004640:	2b05      	cmp	r3, #5
 8004642:	f000 8082 	beq.w	800474a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004646:	e083      	b.n	8004750 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d07f      	beq.n	800474e <HCD_RXQLVL_IRQHandler+0x14a>
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	3344      	adds	r3, #68	; 0x44
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d074      	beq.n	800474e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	3344      	adds	r3, #68	; 0x44
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	b292      	uxth	r2, r2
 800467e:	4619      	mov	r1, r3
 8004680:	f002 ffe9 	bl	8007656 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	440b      	add	r3, r1
 8004692:	3344      	adds	r3, #68	; 0x44
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	18d1      	adds	r1, r2, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4403      	add	r3, r0
 80046a8:	3344      	adds	r3, #68	; 0x44
 80046aa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	440b      	add	r3, r1
 80046ba:	334c      	adds	r3, #76	; 0x4c
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	18d1      	adds	r1, r2, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4403      	add	r3, r0
 80046d0:	334c      	adds	r3, #76	; 0x4c
 80046d2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HCD_RXQLVL_IRQHandler+0x154>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d031      	beq.n	800474e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004700:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004708:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	440b      	add	r3, r1
 800472a:	3350      	adds	r3, #80	; 0x50
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f083 0301 	eor.w	r3, r3, #1
 8004732:	b2d8      	uxtb	r0, r3
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	440b      	add	r3, r1
 8004742:	3350      	adds	r3, #80	; 0x50
 8004744:	4602      	mov	r2, r0
 8004746:	701a      	strb	r2, [r3, #0]
      break;
 8004748:	e001      	b.n	800474e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800474e:	bf00      	nop
  }
}
 8004750:	bf00      	nop
 8004752:	3728      	adds	r7, #40	; 0x28
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	1ff80000 	.word	0x1ff80000

0800475c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004788:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d10b      	bne.n	80047ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d102      	bne.n	80047a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f009 f9da 	bl	800db58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f043 0302 	orr.w	r3, r3, #2
 80047aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d132      	bne.n	800481c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f043 0308 	orr.w	r3, r3, #8
 80047bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d126      	bne.n	8004816 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d113      	bne.n	80047f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047da:	d106      	bne.n	80047ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f003 f872 	bl	80078cc <USB_InitFSLSPClkSel>
 80047e8:	e011      	b.n	800480e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2101      	movs	r1, #1
 80047f0:	4618      	mov	r0, r3
 80047f2:	f003 f86b 	bl	80078cc <USB_InitFSLSPClkSel>
 80047f6:	e00a      	b.n	800480e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d106      	bne.n	800480e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004806:	461a      	mov	r2, r3
 8004808:	f64e 2360 	movw	r3, #60000	; 0xea60
 800480c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f009 f9cc 	bl	800dbac <HAL_HCD_PortEnabled_Callback>
 8004814:	e002      	b.n	800481c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f009 f9d6 	bl	800dbc8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b20      	cmp	r3, #32
 8004824:	d103      	bne.n	800482e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f043 0320 	orr.w	r3, r3, #32
 800482c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6013      	str	r3, [r2, #0]
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e11f      	b.n	8004a96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fc fe1c 	bl	80014a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048a8:	f002 fc2c 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 80048ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4a7b      	ldr	r2, [pc, #492]	; (8004aa0 <HAL_I2C_Init+0x25c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d807      	bhi.n	80048c8 <HAL_I2C_Init+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a7a      	ldr	r2, [pc, #488]	; (8004aa4 <HAL_I2C_Init+0x260>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	bf94      	ite	ls
 80048c0:	2301      	movls	r3, #1
 80048c2:	2300      	movhi	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e006      	b.n	80048d6 <HAL_I2C_Init+0x92>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a77      	ldr	r2, [pc, #476]	; (8004aa8 <HAL_I2C_Init+0x264>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bf94      	ite	ls
 80048d0:	2301      	movls	r3, #1
 80048d2:	2300      	movhi	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0db      	b.n	8004a96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a72      	ldr	r2, [pc, #456]	; (8004aac <HAL_I2C_Init+0x268>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	0c9b      	lsrs	r3, r3, #18
 80048e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a64      	ldr	r2, [pc, #400]	; (8004aa0 <HAL_I2C_Init+0x25c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d802      	bhi.n	8004918 <HAL_I2C_Init+0xd4>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3301      	adds	r3, #1
 8004916:	e009      	b.n	800492c <HAL_I2C_Init+0xe8>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_I2C_Init+0x26c>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	3301      	adds	r3, #1
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	430b      	orrs	r3, r1
 8004932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800493e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4956      	ldr	r1, [pc, #344]	; (8004aa0 <HAL_I2C_Init+0x25c>)
 8004948:	428b      	cmp	r3, r1
 800494a:	d80d      	bhi.n	8004968 <HAL_I2C_Init+0x124>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1e59      	subs	r1, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fbb1 f3f3 	udiv	r3, r1, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b04      	cmp	r3, #4
 8004962:	bf38      	it	cc
 8004964:	2304      	movcc	r3, #4
 8004966:	e04f      	b.n	8004a08 <HAL_I2C_Init+0x1c4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d111      	bne.n	8004994 <HAL_I2C_Init+0x150>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1e58      	subs	r0, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	440b      	add	r3, r1
 800497e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e012      	b.n	80049ba <HAL_I2C_Init+0x176>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1e58      	subs	r0, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	0099      	lsls	r1, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049aa:	3301      	adds	r3, #1
 80049ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Init+0x17e>
 80049be:	2301      	movs	r3, #1
 80049c0:	e022      	b.n	8004a08 <HAL_I2C_Init+0x1c4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10e      	bne.n	80049e8 <HAL_I2C_Init+0x1a4>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1e58      	subs	r0, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	440b      	add	r3, r1
 80049d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	e00f      	b.n	8004a08 <HAL_I2C_Init+0x1c4>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1e58      	subs	r0, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	0099      	lsls	r1, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049fe:	3301      	adds	r3, #1
 8004a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	6809      	ldr	r1, [r1, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69da      	ldr	r2, [r3, #28]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6911      	ldr	r1, [r2, #16]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68d2      	ldr	r2, [r2, #12]
 8004a42:	4311      	orrs	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	000186a0 	.word	0x000186a0
 8004aa4:	001e847f 	.word	0x001e847f
 8004aa8:	003d08ff 	.word	0x003d08ff
 8004aac:	431bde83 	.word	0x431bde83
 8004ab0:	10624dd3 	.word	0x10624dd3

08004ab4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	817b      	strh	r3, [r7, #10]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ac8:	f7fc fef6 	bl	80018b8 <HAL_GetTick>
 8004acc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	f040 80e0 	bne.w	8004c9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2319      	movs	r3, #25
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	4970      	ldr	r1, [pc, #448]	; (8004ca8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fc58 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
 8004af4:	e0d3      	b.n	8004c9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_I2C_Master_Transmit+0x50>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e0cc      	b.n	8004c9e <HAL_I2C_Master_Transmit+0x1ea>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d007      	beq.n	8004b2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2221      	movs	r2, #33	; 0x21
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2210      	movs	r2, #16
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	893a      	ldrh	r2, [r7, #8]
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a50      	ldr	r2, [pc, #320]	; (8004cac <HAL_I2C_Master_Transmit+0x1f8>)
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b6c:	8979      	ldrh	r1, [r7, #10]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fac2 	bl	80050fc <I2C_MasterRequestWrite>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e08d      	b.n	8004c9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b98:	e066      	b.n	8004c68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	6a39      	ldr	r1, [r7, #32]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fcd2 	bl	8005548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d107      	bne.n	8004bc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e06b      	b.n	8004c9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d11b      	bne.n	8004c3c <HAL_I2C_Master_Transmit+0x188>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	781a      	ldrb	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	6a39      	ldr	r1, [r7, #32]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fcc2 	bl	80055ca <I2C_WaitOnBTFFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00d      	beq.n	8004c68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d107      	bne.n	8004c64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e01a      	b.n	8004c9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d194      	bne.n	8004b9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	00100002 	.word	0x00100002
 8004cac:	ffff0000 	.word	0xffff0000

08004cb0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	; 0x30
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	817b      	strh	r3, [r7, #10]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cc4:	f7fc fdf8 	bl	80018b8 <HAL_GetTick>
 8004cc8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	f040 820b 	bne.w	80050ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2319      	movs	r3, #25
 8004cde:	2201      	movs	r2, #1
 8004ce0:	497c      	ldr	r1, [pc, #496]	; (8004ed4 <HAL_I2C_Master_Receive+0x224>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fb5a 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e1fe      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2C_Master_Receive+0x50>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e1f7      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d007      	beq.n	8004d26 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2222      	movs	r2, #34	; 0x22
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2210      	movs	r2, #16
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	893a      	ldrh	r2, [r7, #8]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a5c      	ldr	r2, [pc, #368]	; (8004ed8 <HAL_I2C_Master_Receive+0x228>)
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d68:	8979      	ldrh	r1, [r7, #10]
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fa46 	bl	8005200 <I2C_MasterRequestRead>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e1b8      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d113      	bne.n	8004dae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d86:	2300      	movs	r3, #0
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	623b      	str	r3, [r7, #32]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e18c      	b.n	80050c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d11b      	bne.n	8004dee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e16c      	b.n	80050c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d11b      	bne.n	8004e2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	e14c      	b.n	80050c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e54:	e138      	b.n	80050c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	f200 80f1 	bhi.w	8005042 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d123      	bne.n	8004eb0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fbed 	bl	800564c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e139      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eae:	e10b      	b.n	80050c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d14e      	bne.n	8004f56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	4906      	ldr	r1, [pc, #24]	; (8004edc <HAL_I2C_Master_Receive+0x22c>)
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fa6a 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e10e      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
 8004ed2:	bf00      	nop
 8004ed4:	00100002 	.word	0x00100002
 8004ed8:	ffff0000 	.word	0xffff0000
 8004edc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f54:	e0b8      	b.n	80050c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4966      	ldr	r1, [pc, #408]	; (80050f8 <HAL_I2C_Master_Receive+0x448>)
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fa1b 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0bf      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	2200      	movs	r2, #0
 8004fba:	494f      	ldr	r1, [pc, #316]	; (80050f8 <HAL_I2C_Master_Receive+0x448>)
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f9ed 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e091      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005040:	e042      	b.n	80050c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fb00 	bl	800564c <I2C_WaitOnRXNEFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e04c      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d118      	bne.n	80050c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f47f aec2 	bne.w	8004e56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	00010004 	.word	0x00010004

080050fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	460b      	mov	r3, r1
 800510a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d006      	beq.n	8005126 <I2C_MasterRequestWrite+0x2a>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d003      	beq.n	8005126 <I2C_MasterRequestWrite+0x2a>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005124:	d108      	bne.n	8005138 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e00b      	b.n	8005150 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	2b12      	cmp	r3, #18
 800513e:	d107      	bne.n	8005150 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f91d 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d103      	bne.n	8005180 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e035      	b.n	80051f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518c:	d108      	bne.n	80051a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800518e:	897b      	ldrh	r3, [r7, #10]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800519c:	611a      	str	r2, [r3, #16]
 800519e:	e01b      	b.n	80051d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051a0:	897b      	ldrh	r3, [r7, #10]
 80051a2:	11db      	asrs	r3, r3, #7
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 0306 	and.w	r3, r3, #6
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f063 030f 	orn	r3, r3, #15
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	490e      	ldr	r1, [pc, #56]	; (80051f8 <I2C_MasterRequestWrite+0xfc>)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f943 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e010      	b.n	80051f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	4907      	ldr	r1, [pc, #28]	; (80051fc <I2C_MasterRequestWrite+0x100>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f933 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	00010008 	.word	0x00010008
 80051fc:	00010002 	.word	0x00010002

08005200 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	460b      	mov	r3, r1
 800520e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d006      	beq.n	800523a <I2C_MasterRequestRead+0x3a>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d003      	beq.n	800523a <I2C_MasterRequestRead+0x3a>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005238:	d108      	bne.n	800524c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e00b      	b.n	8005264 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	2b11      	cmp	r3, #17
 8005252:	d107      	bne.n	8005264 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f893 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00d      	beq.n	8005298 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528a:	d103      	bne.n	8005294 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e079      	b.n	800538c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a0:	d108      	bne.n	80052b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052a2:	897b      	ldrh	r3, [r7, #10]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	611a      	str	r2, [r3, #16]
 80052b2:	e05f      	b.n	8005374 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	11db      	asrs	r3, r3, #7
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f063 030f 	orn	r3, r3, #15
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4930      	ldr	r1, [pc, #192]	; (8005394 <I2C_MasterRequestRead+0x194>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8b9 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e054      	b.n	800538c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	4929      	ldr	r1, [pc, #164]	; (8005398 <I2C_MasterRequestRead+0x198>)
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f8a9 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e044      	b.n	800538c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005326:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f831 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534e:	d103      	bne.n	8005358 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e017      	b.n	800538c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800535c:	897b      	ldrh	r3, [r7, #10]
 800535e:	11db      	asrs	r3, r3, #7
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 0306 	and.w	r3, r3, #6
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f063 030e 	orn	r3, r3, #14
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	4907      	ldr	r1, [pc, #28]	; (8005398 <I2C_MasterRequestRead+0x198>)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f865 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	00010008 	.word	0x00010008
 8005398:	00010002 	.word	0x00010002

0800539c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ac:	e025      	b.n	80053fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d021      	beq.n	80053fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fc fa7f 	bl	80018b8 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d116      	bne.n	80053fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e023      	b.n	8005442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10d      	bne.n	8005420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	43da      	mvns	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	e00c      	b.n	800543a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	43da      	mvns	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4013      	ands	r3, r2
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	429a      	cmp	r2, r3
 800543e:	d0b6      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005458:	e051      	b.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d123      	bne.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0204 	orr.w	r2, r3, #4
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e046      	b.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d021      	beq.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fc f9fd 	bl	80018b8 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d116      	bne.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	f043 0220 	orr.w	r2, r3, #32
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e020      	b.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10c      	bne.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	43da      	mvns	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4013      	ands	r3, r2
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e00b      	b.n	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	43da      	mvns	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d18d      	bne.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005554:	e02d      	b.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 f8ce 	bl	80056f8 <I2C_IsAcknowledgeFailed>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e02d      	b.n	80055c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d021      	beq.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fc f9a3 	bl	80018b8 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e007      	b.n	80055c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055bc:	2b80      	cmp	r3, #128	; 0x80
 80055be:	d1ca      	bne.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055d6:	e02d      	b.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f88d 	bl	80056f8 <I2C_IsAcknowledgeFailed>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e02d      	b.n	8005644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d021      	beq.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f0:	f7fc f962 	bl	80018b8 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d302      	bcc.n	8005606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d116      	bne.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e007      	b.n	8005644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b04      	cmp	r3, #4
 8005640:	d1ca      	bne.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005658:	e042      	b.n	80056e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d119      	bne.n	800569c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0210 	mvn.w	r2, #16
 8005670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e029      	b.n	80056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569c:	f7fc f90c 	bl	80018b8 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d302      	bcc.n	80056b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d116      	bne.n	80056e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f043 0220 	orr.w	r2, r3, #32
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e007      	b.n	80056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d1b5      	bne.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570e:	d11b      	bne.n	8005748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	f043 0204 	orr.w	r2, r3, #4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e128      	b.n	80059bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a90      	ldr	r2, [pc, #576]	; (80059c4 <HAL_I2S_Init+0x26c>)
 8005782:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fb fed7 	bl	8001538 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80057a0:	f023 030f 	bic.w	r3, r3, #15
 80057a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2202      	movs	r2, #2
 80057ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d060      	beq.n	8005878 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80057be:	2310      	movs	r3, #16
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e001      	b.n	80057c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80057c4:	2320      	movs	r3, #32
 80057c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d802      	bhi.n	80057d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80057d6:	2001      	movs	r0, #1
 80057d8:	f001 fdb6 	bl	8007348 <HAL_RCCEx_GetPeriphCLKFreq>
 80057dc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e6:	d125      	bne.n	8005834 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d010      	beq.n	8005812 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	3305      	adds	r3, #5
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	e01f      	b.n	8005852 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	fbb2 f2f3 	udiv	r2, r2, r3
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	461a      	mov	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	3305      	adds	r3, #5
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e00e      	b.n	8005852 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	461a      	mov	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	fbb2 f3f3 	udiv	r3, r2, r3
 800584e:	3305      	adds	r3, #5
 8005850:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4a5c      	ldr	r2, [pc, #368]	; (80059c8 <HAL_I2S_Init+0x270>)
 8005856:	fba2 2303 	umull	r2, r3, r2, r3
 800585a:	08db      	lsrs	r3, r3, #3
 800585c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e003      	b.n	8005880 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005878:	2302      	movs	r3, #2
 800587a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d902      	bls.n	800588c <HAL_I2S_Init+0x134>
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2bff      	cmp	r3, #255	; 0xff
 800588a:	d907      	bls.n	800589c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005890:	f043 0210 	orr.w	r2, r3, #16
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e08f      	b.n	80059bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	ea42 0103 	orr.w	r1, r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058ba:	f023 030f 	bic.w	r3, r3, #15
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6851      	ldr	r1, [r2, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6892      	ldr	r2, [r2, #8]
 80058c6:	4311      	orrs	r1, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	68d2      	ldr	r2, [r2, #12]
 80058cc:	4311      	orrs	r1, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6992      	ldr	r2, [r2, #24]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d161      	bne.n	80059ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a38      	ldr	r2, [pc, #224]	; (80059cc <HAL_I2S_Init+0x274>)
 80058ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a37      	ldr	r2, [pc, #220]	; (80059d0 <HAL_I2S_Init+0x278>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_I2S_Init+0x1a4>
 80058f8:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <HAL_I2S_Init+0x27c>)
 80058fa:	e001      	b.n	8005900 <HAL_I2S_Init+0x1a8>
 80058fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	4932      	ldr	r1, [pc, #200]	; (80059d0 <HAL_I2S_Init+0x278>)
 8005908:	428a      	cmp	r2, r1
 800590a:	d101      	bne.n	8005910 <HAL_I2S_Init+0x1b8>
 800590c:	4a31      	ldr	r2, [pc, #196]	; (80059d4 <HAL_I2S_Init+0x27c>)
 800590e:	e001      	b.n	8005914 <HAL_I2S_Init+0x1bc>
 8005910:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005914:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005918:	f023 030f 	bic.w	r3, r3, #15
 800591c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a2b      	ldr	r2, [pc, #172]	; (80059d0 <HAL_I2S_Init+0x278>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d101      	bne.n	800592c <HAL_I2S_Init+0x1d4>
 8005928:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <HAL_I2S_Init+0x27c>)
 800592a:	e001      	b.n	8005930 <HAL_I2S_Init+0x1d8>
 800592c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005930:	2202      	movs	r2, #2
 8005932:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a25      	ldr	r2, [pc, #148]	; (80059d0 <HAL_I2S_Init+0x278>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_I2S_Init+0x1ea>
 800593e:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <HAL_I2S_Init+0x27c>)
 8005940:	e001      	b.n	8005946 <HAL_I2S_Init+0x1ee>
 8005942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005952:	d003      	beq.n	800595c <HAL_I2S_Init+0x204>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800595c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e001      	b.n	8005968 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	b299      	uxth	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800597e:	4303      	orrs	r3, r0
 8005980:	b29b      	uxth	r3, r3
 8005982:	430b      	orrs	r3, r1
 8005984:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005986:	4313      	orrs	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	897b      	ldrh	r3, [r7, #10]
 800598c:	4313      	orrs	r3, r2
 800598e:	b29b      	uxth	r3, r3
 8005990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005994:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a0d      	ldr	r2, [pc, #52]	; (80059d0 <HAL_I2S_Init+0x278>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_I2S_Init+0x24c>
 80059a0:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <HAL_I2S_Init+0x27c>)
 80059a2:	e001      	b.n	80059a8 <HAL_I2S_Init+0x250>
 80059a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059a8:	897a      	ldrh	r2, [r7, #10]
 80059aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	08006255 	.word	0x08006255
 80059c8:	cccccccd 	.word	0xcccccccd
 80059cc:	080063dd 	.word	0x080063dd
 80059d0:	40003800 	.word	0x40003800
 80059d4:	40003400 	.word	0x40003400

080059d8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_I2S_Transmit_DMA+0x1a>
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e08e      	b.n	8005b14 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_I2S_Transmit_DMA+0x2e>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e086      	b.n	8005b14 <HAL_I2S_Transmit_DMA+0x13c>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d005      	beq.n	8005a26 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
 8005a24:	e076      	b.n	8005b14 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2203      	movs	r2, #3
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d002      	beq.n	8005a52 <HAL_I2S_Transmit_DMA+0x7a>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b05      	cmp	r3, #5
 8005a50:	d10a      	bne.n	8005a68 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a66:	e005      	b.n	8005a74 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	4a28      	ldr	r2, [pc, #160]	; (8005b1c <HAL_I2S_Transmit_DMA+0x144>)
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	4a27      	ldr	r2, [pc, #156]	; (8005b20 <HAL_I2S_Transmit_DMA+0x148>)
 8005a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <HAL_I2S_Transmit_DMA+0x14c>)
 8005a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a94:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a9c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005aa4:	f7fc fce2 	bl	800246c <HAL_DMA_Start_IT>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00f      	beq.n	8005ace <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	f043 0208 	orr.w	r2, r3, #8
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e022      	b.n	8005b14 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d107      	bne.n	8005aec <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aea:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0202 	orr.w	r2, r2, #2
 8005b08:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	08006133 	.word	0x08006133
 8005b20:	080060f1 	.word	0x080060f1
 8005b24:	0800614f 	.word	0x0800614f

08005b28 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_I2S_DMAPause+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e04a      	b.n	8005bd6 <HAL_I2S_DMAPause+0xae>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d108      	bne.n	8005b66 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0202 	bic.w	r2, r2, #2
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	e032      	b.n	8005bcc <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d108      	bne.n	8005b84 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	e023      	b.n	8005bcc <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d11d      	bne.n	8005bcc <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0203 	bic.w	r2, r2, #3
 8005b9e:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a0f      	ldr	r2, [pc, #60]	; (8005be4 <HAL_I2S_DMAPause+0xbc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_I2S_DMAPause+0x86>
 8005baa:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <HAL_I2S_DMAPause+0xc0>)
 8005bac:	e001      	b.n	8005bb2 <HAL_I2S_DMAPause+0x8a>
 8005bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	490a      	ldr	r1, [pc, #40]	; (8005be4 <HAL_I2S_DMAPause+0xbc>)
 8005bba:	428b      	cmp	r3, r1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2S_DMAPause+0x9a>
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_I2S_DMAPause+0xc0>)
 8005bc0:	e001      	b.n	8005bc6 <HAL_I2S_DMAPause+0x9e>
 8005bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc6:	f022 0203 	bic.w	r2, r2, #3
 8005bca:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40003800 	.word	0x40003800
 8005be8:	40003400 	.word	0x40003400

08005bec <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_I2S_DMAResume+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e07d      	b.n	8005d00 <HAL_I2S_DMAResume+0x114>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d108      	bne.n	8005c2a <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0202 	orr.w	r2, r2, #2
 8005c26:	605a      	str	r2, [r3, #4]
 8005c28:	e056      	b.n	8005cd8 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d108      	bne.n	8005c48 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	e047      	b.n	8005cd8 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d141      	bne.n	8005cd8 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0203 	orr.w	r2, r2, #3
 8005c62:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <HAL_I2S_DMAResume+0x120>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <HAL_I2S_DMAResume+0x86>
 8005c6e:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <HAL_I2S_DMAResume+0x124>)
 8005c70:	e001      	b.n	8005c76 <HAL_I2S_DMAResume+0x8a>
 8005c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4923      	ldr	r1, [pc, #140]	; (8005d0c <HAL_I2S_DMAResume+0x120>)
 8005c7e:	428b      	cmp	r3, r1
 8005c80:	d101      	bne.n	8005c86 <HAL_I2S_DMAResume+0x9a>
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <HAL_I2S_DMAResume+0x124>)
 8005c84:	e001      	b.n	8005c8a <HAL_I2S_DMAResume+0x9e>
 8005c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c8a:	f042 0203 	orr.w	r2, r2, #3
 8005c8e:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <HAL_I2S_DMAResume+0x120>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <HAL_I2S_DMAResume+0xb2>
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <HAL_I2S_DMAResume+0x124>)
 8005c9c:	e001      	b.n	8005ca2 <HAL_I2S_DMAResume+0xb6>
 8005c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d115      	bne.n	8005cd8 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <HAL_I2S_DMAResume+0x120>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d101      	bne.n	8005cba <HAL_I2S_DMAResume+0xce>
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <HAL_I2S_DMAResume+0x124>)
 8005cb8:	e001      	b.n	8005cbe <HAL_I2S_DMAResume+0xd2>
 8005cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4911      	ldr	r1, [pc, #68]	; (8005d0c <HAL_I2S_DMAResume+0x120>)
 8005cc6:	428b      	cmp	r3, r1
 8005cc8:	d101      	bne.n	8005cce <HAL_I2S_DMAResume+0xe2>
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <HAL_I2S_DMAResume+0x124>)
 8005ccc:	e001      	b.n	8005cd2 <HAL_I2S_DMAResume+0xe6>
 8005cce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cd6:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf4:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40003800 	.word	0x40003800
 8005d10:	40003400 	.word	0x40003400

08005d14 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d004      	beq.n	8005d34 <HAL_I2S_DMAStop+0x20>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f040 80d1 	bne.w	8005ed6 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00f      	beq.n	8005d5c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fc fbeb 	bl	800251c <HAL_DMA_Abort>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	f043 0208 	orr.w	r2, r3, #8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005d5c:	2364      	movs	r3, #100	; 0x64
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2102      	movs	r1, #2
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fb00 	bl	8006368 <I2S_WaitFlagStateUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	f043 0201 	orr.w	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005d86:	2364      	movs	r3, #100	; 0x64
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 faeb 	bl	8006368 <I2S_WaitFlagStateUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	f043 0201 	orr.w	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69da      	ldr	r2, [r3, #28]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbe:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0202 	bic.w	r2, r2, #2
 8005ddc:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	f040 8165 	bne.w	80060b6 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00f      	beq.n	8005e14 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fc fb8f 	bl	800251c <HAL_DMA_Abort>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e08:	f043 0208 	orr.w	r2, r3, #8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a8a      	ldr	r2, [pc, #552]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_I2S_DMAStop+0x10e>
 8005e1e:	4b8a      	ldr	r3, [pc, #552]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005e20:	e001      	b.n	8005e26 <HAL_I2S_DMAStop+0x112>
 8005e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4985      	ldr	r1, [pc, #532]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005e2e:	428b      	cmp	r3, r1
 8005e30:	d101      	bne.n	8005e36 <HAL_I2S_DMAStop+0x122>
 8005e32:	4b85      	ldr	r3, [pc, #532]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005e34:	e001      	b.n	8005e3a <HAL_I2S_DMAStop+0x126>
 8005e36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a7e      	ldr	r2, [pc, #504]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2S_DMAStop+0x13e>
 8005e4e:	4b7e      	ldr	r3, [pc, #504]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005e50:	e001      	b.n	8005e56 <HAL_I2S_DMAStop+0x142>
 8005e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a79      	ldr	r2, [pc, #484]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_I2S_DMAStop+0x154>
 8005e64:	4b78      	ldr	r3, [pc, #480]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005e66:	e001      	b.n	8005e6c <HAL_I2S_DMAStop+0x158>
 8005e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a73      	ldr	r2, [pc, #460]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d101      	bne.n	8005e80 <HAL_I2S_DMAStop+0x16c>
 8005e7c:	4b72      	ldr	r3, [pc, #456]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005e7e:	e001      	b.n	8005e84 <HAL_I2S_DMAStop+0x170>
 8005e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	496e      	ldr	r1, [pc, #440]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	d101      	bne.n	8005e94 <HAL_I2S_DMAStop+0x180>
 8005e90:	4b6d      	ldr	r3, [pc, #436]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005e92:	e001      	b.n	8005e98 <HAL_I2S_DMAStop+0x184>
 8005e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005ebe:	e0fa      	b.n	80060b6 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a5f      	ldr	r2, [pc, #380]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <HAL_I2S_DMAStop+0x1ba>
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005ecc:	e001      	b.n	8005ed2 <HAL_I2S_DMAStop+0x1be>
 8005ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed2:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005ed4:	e0ef      	b.n	80060b6 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ede:	d005      	beq.n	8005eec <HAL_I2S_DMAStop+0x1d8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee8:	f040 80e5 	bne.w	80060b6 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00f      	beq.n	8005f14 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fc fb0f 	bl	800251c <HAL_DMA_Abort>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f08:	f043 0208 	orr.w	r2, r3, #8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b05      	cmp	r3, #5
 8005f1e:	f040 809a 	bne.w	8006056 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00f      	beq.n	8005f4a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fc faf4 	bl	800251c <HAL_DMA_Abort>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	f043 0208 	orr.w	r2, r3, #8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005f4a:	f7fb fcb5 	bl	80018b8 <HAL_GetTick>
 8005f4e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005f50:	e012      	b.n	8005f78 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005f52:	f7fb fcb1 	bl	80018b8 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b64      	cmp	r3, #100	; 0x64
 8005f5e:	d90b      	bls.n	8005f78 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a31      	ldr	r2, [pc, #196]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d101      	bne.n	8005f86 <HAL_I2S_DMAStop+0x272>
 8005f82:	4b31      	ldr	r3, [pc, #196]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005f84:	e001      	b.n	8005f8a <HAL_I2S_DMAStop+0x276>
 8005f86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d1de      	bne.n	8005f52 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005f94:	e012      	b.n	8005fbc <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005f96:	f7fb fc8f 	bl	80018b8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b64      	cmp	r3, #100	; 0x64
 8005fa2:	d90b      	bls.n	8005fbc <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa8:	f043 0201 	orr.w	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <HAL_I2S_DMAStop+0x2b6>
 8005fc6:	4b20      	ldr	r3, [pc, #128]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005fc8:	e001      	b.n	8005fce <HAL_I2S_DMAStop+0x2ba>
 8005fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d0de      	beq.n	8005f96 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a19      	ldr	r2, [pc, #100]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <HAL_I2S_DMAStop+0x2d2>
 8005fe2:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005fe4:	e001      	b.n	8005fea <HAL_I2S_DMAStop+0x2d6>
 8005fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4914      	ldr	r1, [pc, #80]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8005ff2:	428b      	cmp	r3, r1
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2S_DMAStop+0x2e6>
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8005ff8:	e001      	b.n	8005ffe <HAL_I2S_DMAStop+0x2ea>
 8005ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006002:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0d      	ldr	r2, [pc, #52]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d101      	bne.n	8006016 <HAL_I2S_DMAStop+0x302>
 8006012:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8006014:	e001      	b.n	800601a <HAL_I2S_DMAStop+0x306>
 8006016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a07      	ldr	r2, [pc, #28]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d101      	bne.n	800602e <HAL_I2S_DMAStop+0x31a>
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 800602c:	e001      	b.n	8006032 <HAL_I2S_DMAStop+0x31e>
 800602e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4902      	ldr	r1, [pc, #8]	; (8006044 <HAL_I2S_DMAStop+0x330>)
 800603a:	428b      	cmp	r3, r1
 800603c:	d106      	bne.n	800604c <HAL_I2S_DMAStop+0x338>
 800603e:	4b02      	ldr	r3, [pc, #8]	; (8006048 <HAL_I2S_DMAStop+0x334>)
 8006040:	e006      	b.n	8006050 <HAL_I2S_DMAStop+0x33c>
 8006042:	bf00      	nop
 8006044:	40003800 	.word	0x40003800
 8006048:	40003400 	.word	0x40003400
 800604c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006050:	f022 0202 	bic.w	r2, r2, #2
 8006054:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006064:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006094:	d10c      	bne.n	80060b0 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e002      	b.n	80060b6 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80060be:	7ffb      	ldrb	r3, [r7, #31]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10e      	bne.n	8006124 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0202 	bic.w	r2, r2, #2
 8006114:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7fa fd11 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7fa fd15 	bl	8000b70 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0203 	bic.w	r2, r2, #3
 800616a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006184:	f043 0208 	orr.w	r2, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff ffa5 	bl	80060dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	881a      	ldrh	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10e      	bne.n	80061ee <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7fa fcaf 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	b292      	uxth	r2, r2
 800620a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10e      	bne.n	800624c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800623c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff ff3e 	bl	80060c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b04      	cmp	r3, #4
 800626e:	d13a      	bne.n	80062e6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d109      	bne.n	800628e <I2S_IRQHandler+0x3a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d102      	bne.n	800628e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff ffb4 	bl	80061f6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d126      	bne.n	80062e6 <I2S_IRQHandler+0x92>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d11f      	bne.n	80062e6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062b4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d8:	f043 0202 	orr.w	r2, r3, #2
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff fefb 	bl	80060dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d136      	bne.n	8006360 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d109      	bne.n	8006310 <I2S_IRQHandler+0xbc>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b80      	cmp	r3, #128	; 0x80
 8006308:	d102      	bne.n	8006310 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff ff45 	bl	800619a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b08      	cmp	r3, #8
 8006318:	d122      	bne.n	8006360 <I2S_IRQHandler+0x10c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b20      	cmp	r3, #32
 8006326:	d11b      	bne.n	8006360 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006336:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	f043 0204 	orr.w	r2, r3, #4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff febe 	bl	80060dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006360:	bf00      	nop
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006378:	f7fb fa9e 	bl	80018b8 <HAL_GetTick>
 800637c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800637e:	e018      	b.n	80063b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d014      	beq.n	80063b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006388:	f7fb fa96 	bl	80018b8 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d902      	bls.n	800639e <I2S_WaitFlagStateUntilTimeout+0x36>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e00f      	b.n	80063d2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4013      	ands	r3, r2
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	bf0c      	ite	eq
 80063c2:	2301      	moveq	r3, #1
 80063c4:	2300      	movne	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d1d7      	bne.n	8006380 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4aa2      	ldr	r2, [pc, #648]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d101      	bne.n	80063fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80063f6:	4ba2      	ldr	r3, [pc, #648]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063f8:	e001      	b.n	80063fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80063fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a9b      	ldr	r2, [pc, #620]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d101      	bne.n	8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006414:	4b9a      	ldr	r3, [pc, #616]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006416:	e001      	b.n	800641c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006428:	d004      	beq.n	8006434 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 8099 	bne.w	8006566 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d107      	bne.n	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f925 	bl	8006698 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d107      	bne.n	8006468 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9c8 	bl	80067f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	d13a      	bne.n	80064e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d035      	beq.n	80064e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a7e      	ldr	r2, [pc, #504]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006486:	4b7e      	ldr	r3, [pc, #504]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006488:	e001      	b.n	800648e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800648a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4979      	ldr	r1, [pc, #484]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006496:	428b      	cmp	r3, r1
 8006498:	d101      	bne.n	800649e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800649a:	4b79      	ldr	r3, [pc, #484]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800649c:	e001      	b.n	80064a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800649e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	f043 0202 	orr.w	r2, r3, #2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff fdfa 	bl	80060dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	f040 80be 	bne.w	8006670 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80b8 	beq.w	8006670 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800650e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a59      	ldr	r2, [pc, #356]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d101      	bne.n	800651e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800651a:	4b59      	ldr	r3, [pc, #356]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800651c:	e001      	b.n	8006522 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800651e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4954      	ldr	r1, [pc, #336]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800652a:	428b      	cmp	r3, r1
 800652c:	d101      	bne.n	8006532 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800652e:	4b54      	ldr	r3, [pc, #336]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006530:	e001      	b.n	8006536 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006536:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800653a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800653c:	2300      	movs	r3, #0
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	60bb      	str	r3, [r7, #8]
 8006548:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	f043 0204 	orr.w	r2, r3, #4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fdbc 	bl	80060dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006564:	e084      	b.n	8006670 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d107      	bne.n	8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f8be 	bl	80066fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d107      	bne.n	800659a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f8fd 	bl	8006794 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d12f      	bne.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d02a      	beq.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a2e      	ldr	r2, [pc, #184]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d101      	bne.n	80065cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80065c8:	4b2d      	ldr	r3, [pc, #180]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065ca:	e001      	b.n	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80065cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4929      	ldr	r1, [pc, #164]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065d8:	428b      	cmp	r3, r1
 80065da:	d101      	bne.n	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80065dc:	4b28      	ldr	r3, [pc, #160]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065de:	e001      	b.n	80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80065e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	f043 0202 	orr.w	r2, r3, #2
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff fd6c 	bl	80060dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b08      	cmp	r3, #8
 800660c:	d131      	bne.n	8006672 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d02c      	beq.n	8006672 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a17      	ldr	r2, [pc, #92]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006624:	e001      	b.n	800662a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4912      	ldr	r1, [pc, #72]	; (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006632:	428b      	cmp	r3, r1
 8006634:	d101      	bne.n	800663a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006636:	4b12      	ldr	r3, [pc, #72]	; (8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006638:	e001      	b.n	800663e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800663a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800663e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006642:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006652:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	f043 0204 	orr.w	r2, r3, #4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff fd37 	bl	80060dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800666e:	e000      	b.n	8006672 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006670:	bf00      	nop
}
 8006672:	bf00      	nop
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40003800 	.word	0x40003800
 8006680:	40003400 	.word	0x40003400

08006684 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	1c99      	adds	r1, r3, #2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6251      	str	r1, [r2, #36]	; 0x24
 80066aa:	881a      	ldrh	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d113      	bne.n	80066f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ffc9 	bl	8006684 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	1c99      	adds	r1, r3, #2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6251      	str	r1, [r2, #36]	; 0x24
 800670e:	8819      	ldrh	r1, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1d      	ldr	r2, [pc, #116]	; (800678c <I2SEx_TxISR_I2SExt+0x90>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d101      	bne.n	800671e <I2SEx_TxISR_I2SExt+0x22>
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <I2SEx_TxISR_I2SExt+0x94>)
 800671c:	e001      	b.n	8006722 <I2SEx_TxISR_I2SExt+0x26>
 800671e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006722:	460a      	mov	r2, r1
 8006724:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d121      	bne.n	8006782 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a12      	ldr	r2, [pc, #72]	; (800678c <I2SEx_TxISR_I2SExt+0x90>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <I2SEx_TxISR_I2SExt+0x50>
 8006748:	4b11      	ldr	r3, [pc, #68]	; (8006790 <I2SEx_TxISR_I2SExt+0x94>)
 800674a:	e001      	b.n	8006750 <I2SEx_TxISR_I2SExt+0x54>
 800674c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	490d      	ldr	r1, [pc, #52]	; (800678c <I2SEx_TxISR_I2SExt+0x90>)
 8006758:	428b      	cmp	r3, r1
 800675a:	d101      	bne.n	8006760 <I2SEx_TxISR_I2SExt+0x64>
 800675c:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <I2SEx_TxISR_I2SExt+0x94>)
 800675e:	e001      	b.n	8006764 <I2SEx_TxISR_I2SExt+0x68>
 8006760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006768:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d106      	bne.n	8006782 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ff81 	bl	8006684 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40003800 	.word	0x40003800
 8006790:	40003400 	.word	0x40003400

08006794 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68d8      	ldr	r0, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	1c99      	adds	r1, r3, #2
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80067ac:	b282      	uxth	r2, r0
 80067ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d113      	bne.n	80067f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ff4a 	bl	8006684 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a20      	ldr	r2, [pc, #128]	; (8006888 <I2SEx_RxISR_I2SExt+0x90>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d101      	bne.n	800680e <I2SEx_RxISR_I2SExt+0x16>
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <I2SEx_RxISR_I2SExt+0x94>)
 800680c:	e001      	b.n	8006812 <I2SEx_RxISR_I2SExt+0x1a>
 800680e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006812:	68d8      	ldr	r0, [r3, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	1c99      	adds	r1, r3, #2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800681e:	b282      	uxth	r2, r0
 8006820:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d121      	bne.n	800687e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a12      	ldr	r2, [pc, #72]	; (8006888 <I2SEx_RxISR_I2SExt+0x90>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d101      	bne.n	8006848 <I2SEx_RxISR_I2SExt+0x50>
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <I2SEx_RxISR_I2SExt+0x94>)
 8006846:	e001      	b.n	800684c <I2SEx_RxISR_I2SExt+0x54>
 8006848:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	490d      	ldr	r1, [pc, #52]	; (8006888 <I2SEx_RxISR_I2SExt+0x90>)
 8006854:	428b      	cmp	r3, r1
 8006856:	d101      	bne.n	800685c <I2SEx_RxISR_I2SExt+0x64>
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <I2SEx_RxISR_I2SExt+0x94>)
 800685a:	e001      	b.n	8006860 <I2SEx_RxISR_I2SExt+0x68>
 800685c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006860:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006864:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff03 	bl	8006684 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40003800 	.word	0x40003800
 800688c:	40003400 	.word	0x40003400

08006890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e25b      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d075      	beq.n	800699a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068ae:	4ba3      	ldr	r3, [pc, #652]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d00c      	beq.n	80068d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ba:	4ba0      	ldr	r3, [pc, #640]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d112      	bne.n	80068ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c6:	4b9d      	ldr	r3, [pc, #628]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d2:	d10b      	bne.n	80068ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d4:	4b99      	ldr	r3, [pc, #612]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05b      	beq.n	8006998 <HAL_RCC_OscConfig+0x108>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d157      	bne.n	8006998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e236      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d106      	bne.n	8006904 <HAL_RCC_OscConfig+0x74>
 80068f6:	4b91      	ldr	r3, [pc, #580]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a90      	ldr	r2, [pc, #576]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e01d      	b.n	8006940 <HAL_RCC_OscConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0x98>
 800690e:	4b8b      	ldr	r3, [pc, #556]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a8a      	ldr	r2, [pc, #552]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b88      	ldr	r3, [pc, #544]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a87      	ldr	r2, [pc, #540]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e00b      	b.n	8006940 <HAL_RCC_OscConfig+0xb0>
 8006928:	4b84      	ldr	r3, [pc, #528]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a83      	ldr	r2, [pc, #524]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	4b81      	ldr	r3, [pc, #516]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a80      	ldr	r2, [pc, #512]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800693a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800693e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d013      	beq.n	8006970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fa ffb6 	bl	80018b8 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006950:	f7fa ffb2 	bl	80018b8 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e1fb      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006962:	4b76      	ldr	r3, [pc, #472]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0xc0>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006970:	f7fa ffa2 	bl	80018b8 <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006978:	f7fa ff9e 	bl	80018b8 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	; 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e1e7      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698a:	4b6c      	ldr	r3, [pc, #432]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f0      	bne.n	8006978 <HAL_RCC_OscConfig+0xe8>
 8006996:	e000      	b.n	800699a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d063      	beq.n	8006a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069a6:	4b65      	ldr	r3, [pc, #404]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069b2:	4b62      	ldr	r3, [pc, #392]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d11c      	bne.n	80069f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069be:	4b5f      	ldr	r3, [pc, #380]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d116      	bne.n	80069f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ca:	4b5c      	ldr	r3, [pc, #368]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_RCC_OscConfig+0x152>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d001      	beq.n	80069e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e1bb      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e2:	4b56      	ldr	r3, [pc, #344]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4952      	ldr	r1, [pc, #328]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f6:	e03a      	b.n	8006a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d020      	beq.n	8006a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a00:	4b4f      	ldr	r3, [pc, #316]	; (8006b40 <HAL_RCC_OscConfig+0x2b0>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fa ff57 	bl	80018b8 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a0e:	f7fa ff53 	bl	80018b8 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e19c      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a20:	4b46      	ldr	r3, [pc, #280]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b43      	ldr	r3, [pc, #268]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4940      	ldr	r1, [pc, #256]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	e015      	b.n	8006a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a42:	4b3f      	ldr	r3, [pc, #252]	; (8006b40 <HAL_RCC_OscConfig+0x2b0>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fa ff36 	bl	80018b8 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a50:	f7fa ff32 	bl	80018b8 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e17b      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a62:	4b36      	ldr	r3, [pc, #216]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d030      	beq.n	8006adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a82:	4b30      	ldr	r3, [pc, #192]	; (8006b44 <HAL_RCC_OscConfig+0x2b4>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fa ff16 	bl	80018b8 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a90:	f7fa ff12 	bl	80018b8 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e15b      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa2:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0f0      	beq.n	8006a90 <HAL_RCC_OscConfig+0x200>
 8006aae:	e015      	b.n	8006adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab0:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <HAL_RCC_OscConfig+0x2b4>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab6:	f7fa feff 	bl	80018b8 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006abe:	f7fa fefb 	bl	80018b8 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e144      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f0      	bne.n	8006abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80a0 	beq.w	8006c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10f      	bne.n	8006b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	4a0e      	ldr	r2, [pc, #56]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b08:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCC_OscConfig+0x2b8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d121      	bne.n	8006b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <HAL_RCC_OscConfig+0x2b8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a07      	ldr	r2, [pc, #28]	; (8006b48 <HAL_RCC_OscConfig+0x2b8>)
 8006b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b32:	f7fa fec1 	bl	80018b8 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b38:	e011      	b.n	8006b5e <HAL_RCC_OscConfig+0x2ce>
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	42470000 	.word	0x42470000
 8006b44:	42470e80 	.word	0x42470e80
 8006b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4c:	f7fa feb4 	bl	80018b8 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e0fd      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5e:	4b81      	ldr	r3, [pc, #516]	; (8006d64 <HAL_RCC_OscConfig+0x4d4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f0      	beq.n	8006b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d106      	bne.n	8006b80 <HAL_RCC_OscConfig+0x2f0>
 8006b72:	4b7d      	ldr	r3, [pc, #500]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	4a7c      	ldr	r2, [pc, #496]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7e:	e01c      	b.n	8006bba <HAL_RCC_OscConfig+0x32a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x312>
 8006b88:	4b77      	ldr	r3, [pc, #476]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	4a76      	ldr	r2, [pc, #472]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6713      	str	r3, [r2, #112]	; 0x70
 8006b94:	4b74      	ldr	r3, [pc, #464]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	4a73      	ldr	r2, [pc, #460]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba0:	e00b      	b.n	8006bba <HAL_RCC_OscConfig+0x32a>
 8006ba2:	4b71      	ldr	r3, [pc, #452]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a70      	ldr	r2, [pc, #448]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
 8006bae:	4b6e      	ldr	r3, [pc, #440]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a6d      	ldr	r2, [pc, #436]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc2:	f7fa fe79 	bl	80018b8 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bca:	f7fa fe75 	bl	80018b8 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0bc      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	4b61      	ldr	r3, [pc, #388]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ee      	beq.n	8006bca <HAL_RCC_OscConfig+0x33a>
 8006bec:	e014      	b.n	8006c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bee:	f7fa fe63 	bl	80018b8 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf6:	f7fa fe5f 	bl	80018b8 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0a6      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	4b56      	ldr	r3, [pc, #344]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ee      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1e:	4b52      	ldr	r3, [pc, #328]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	4a51      	ldr	r2, [pc, #324]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8092 	beq.w	8006d58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c34:	4b4c      	ldr	r3, [pc, #304]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d05c      	beq.n	8006cfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d141      	bne.n	8006ccc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c48:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <HAL_RCC_OscConfig+0x4dc>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4e:	f7fa fe33 	bl	80018b8 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c54:	e008      	b.n	8006c68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c56:	f7fa fe2f 	bl	80018b8 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e078      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c68:	4b3f      	ldr	r3, [pc, #252]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f0      	bne.n	8006c56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	019b      	lsls	r3, r3, #6
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	061b      	lsls	r3, r3, #24
 8006c98:	4933      	ldr	r1, [pc, #204]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9e:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <HAL_RCC_OscConfig+0x4dc>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca4:	f7fa fe08 	bl	80018b8 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cac:	f7fa fe04 	bl	80018b8 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e04d      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0x41c>
 8006cca:	e045      	b.n	8006d58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ccc:	4b27      	ldr	r3, [pc, #156]	; (8006d6c <HAL_RCC_OscConfig+0x4dc>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd2:	f7fa fdf1 	bl	80018b8 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cda:	f7fa fded 	bl	80018b8 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e036      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f0      	bne.n	8006cda <HAL_RCC_OscConfig+0x44a>
 8006cf8:	e02e      	b.n	8006d58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e029      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <HAL_RCC_OscConfig+0x4d8>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d11c      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d115      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d2e:	4013      	ands	r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10d      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40007000 	.word	0x40007000
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	42470060 	.word	0x42470060

08006d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0cc      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d84:	4b68      	ldr	r3, [pc, #416]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d90c      	bls.n	8006dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d92:	4b65      	ldr	r3, [pc, #404]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9a:	4b63      	ldr	r3, [pc, #396]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d001      	beq.n	8006dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0b8      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d020      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dc4:	4b59      	ldr	r3, [pc, #356]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4a58      	ldr	r2, [pc, #352]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ddc:	4b53      	ldr	r3, [pc, #332]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4a52      	ldr	r2, [pc, #328]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de8:	4b50      	ldr	r3, [pc, #320]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	494d      	ldr	r1, [pc, #308]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d044      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0e:	4b47      	ldr	r3, [pc, #284]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d119      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e07f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d003      	beq.n	8006e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e2e:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e06f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3e:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e067      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e4e:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 0203 	bic.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4934      	ldr	r1, [pc, #208]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e60:	f7fa fd2a 	bl	80018b8 <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e68:	f7fa fd26 	bl	80018b8 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e04f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7e:	4b2b      	ldr	r3, [pc, #172]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 020c 	and.w	r2, r3, #12
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1eb      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e90:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d20c      	bcs.n	8006eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9e:	4b22      	ldr	r3, [pc, #136]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea6:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e032      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4916      	ldr	r1, [pc, #88]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	490e      	ldr	r1, [pc, #56]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ef6:	f000 f821 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 8006efa:	4601      	mov	r1, r0
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006f08:	5cd3      	ldrb	r3, [r2, r3]
 8006f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <HAL_RCC_ClockConfig+0x1c8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fa fc8a 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40023c00 	.word	0x40023c00
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	0800e2c8 	.word	0x0800e2c8
 8006f34:	20000000 	.word	0x20000000
 8006f38:	20000004 	.word	0x20000004

08006f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f52:	4b63      	ldr	r3, [pc, #396]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 030c 	and.w	r3, r3, #12
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d007      	beq.n	8006f6e <HAL_RCC_GetSysClockFreq+0x32>
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d008      	beq.n	8006f74 <HAL_RCC_GetSysClockFreq+0x38>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f040 80b4 	bne.w	80070d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f68:	4b5e      	ldr	r3, [pc, #376]	; (80070e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006f6a:	60bb      	str	r3, [r7, #8]
       break;
 8006f6c:	e0b3      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f6e:	4b5e      	ldr	r3, [pc, #376]	; (80070e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006f70:	60bb      	str	r3, [r7, #8]
      break;
 8006f72:	e0b0      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f74:	4b5a      	ldr	r3, [pc, #360]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f7e:	4b58      	ldr	r3, [pc, #352]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d04a      	beq.n	8007020 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f8a:	4b55      	ldr	r3, [pc, #340]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	099b      	lsrs	r3, r3, #6
 8006f90:	f04f 0400 	mov.w	r4, #0
 8006f94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	ea03 0501 	and.w	r5, r3, r1
 8006fa0:	ea04 0602 	and.w	r6, r4, r2
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4632      	mov	r2, r6
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	f04f 0400 	mov.w	r4, #0
 8006fb0:	0154      	lsls	r4, r2, #5
 8006fb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006fb6:	014b      	lsls	r3, r1, #5
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4622      	mov	r2, r4
 8006fbc:	1b49      	subs	r1, r1, r5
 8006fbe:	eb62 0206 	sbc.w	r2, r2, r6
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	f04f 0400 	mov.w	r4, #0
 8006fca:	0194      	lsls	r4, r2, #6
 8006fcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006fd0:	018b      	lsls	r3, r1, #6
 8006fd2:	1a5b      	subs	r3, r3, r1
 8006fd4:	eb64 0402 	sbc.w	r4, r4, r2
 8006fd8:	f04f 0100 	mov.w	r1, #0
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	00e2      	lsls	r2, r4, #3
 8006fe2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006fe6:	00d9      	lsls	r1, r3, #3
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4614      	mov	r4, r2
 8006fec:	195b      	adds	r3, r3, r5
 8006fee:	eb44 0406 	adc.w	r4, r4, r6
 8006ff2:	f04f 0100 	mov.w	r1, #0
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	0262      	lsls	r2, r4, #9
 8006ffc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007000:	0259      	lsls	r1, r3, #9
 8007002:	460b      	mov	r3, r1
 8007004:	4614      	mov	r4, r2
 8007006:	4618      	mov	r0, r3
 8007008:	4621      	mov	r1, r4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f04f 0400 	mov.w	r4, #0
 8007010:	461a      	mov	r2, r3
 8007012:	4623      	mov	r3, r4
 8007014:	f7f9 f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8007018:	4603      	mov	r3, r0
 800701a:	460c      	mov	r4, r1
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e049      	b.n	80070b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007020:	4b2f      	ldr	r3, [pc, #188]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	099b      	lsrs	r3, r3, #6
 8007026:	f04f 0400 	mov.w	r4, #0
 800702a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	ea03 0501 	and.w	r5, r3, r1
 8007036:	ea04 0602 	and.w	r6, r4, r2
 800703a:	4629      	mov	r1, r5
 800703c:	4632      	mov	r2, r6
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	f04f 0400 	mov.w	r4, #0
 8007046:	0154      	lsls	r4, r2, #5
 8007048:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800704c:	014b      	lsls	r3, r1, #5
 800704e:	4619      	mov	r1, r3
 8007050:	4622      	mov	r2, r4
 8007052:	1b49      	subs	r1, r1, r5
 8007054:	eb62 0206 	sbc.w	r2, r2, r6
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	f04f 0400 	mov.w	r4, #0
 8007060:	0194      	lsls	r4, r2, #6
 8007062:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007066:	018b      	lsls	r3, r1, #6
 8007068:	1a5b      	subs	r3, r3, r1
 800706a:	eb64 0402 	sbc.w	r4, r4, r2
 800706e:	f04f 0100 	mov.w	r1, #0
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	00e2      	lsls	r2, r4, #3
 8007078:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800707c:	00d9      	lsls	r1, r3, #3
 800707e:	460b      	mov	r3, r1
 8007080:	4614      	mov	r4, r2
 8007082:	195b      	adds	r3, r3, r5
 8007084:	eb44 0406 	adc.w	r4, r4, r6
 8007088:	f04f 0100 	mov.w	r1, #0
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	02a2      	lsls	r2, r4, #10
 8007092:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007096:	0299      	lsls	r1, r3, #10
 8007098:	460b      	mov	r3, r1
 800709a:	4614      	mov	r4, r2
 800709c:	4618      	mov	r0, r3
 800709e:	4621      	mov	r1, r4
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f04f 0400 	mov.w	r4, #0
 80070a6:	461a      	mov	r2, r3
 80070a8:	4623      	mov	r3, r4
 80070aa:	f7f9 f88d 	bl	80001c8 <__aeabi_uldivmod>
 80070ae:	4603      	mov	r3, r0
 80070b0:	460c      	mov	r4, r1
 80070b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070b4:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	3301      	adds	r3, #1
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	60bb      	str	r3, [r7, #8]
      break;
 80070ce:	e002      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80070d2:	60bb      	str	r3, [r7, #8]
      break;
 80070d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070d6:	68bb      	ldr	r3, [r7, #8]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	00f42400 	.word	0x00f42400
 80070e8:	007a1200 	.word	0x007a1200

080070ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f0:	4b03      	ldr	r3, [pc, #12]	; (8007100 <HAL_RCC_GetHCLKFreq+0x14>)
 80070f2:	681b      	ldr	r3, [r3, #0]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	20000000 	.word	0x20000000

08007104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007108:	f7ff fff0 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 800710c:	4601      	mov	r1, r0
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	0a9b      	lsrs	r3, r3, #10
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	4a03      	ldr	r2, [pc, #12]	; (8007128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800711a:	5cd3      	ldrb	r3, [r2, r3]
 800711c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40023800 	.word	0x40023800
 8007128:	0800e2d8 	.word	0x0800e2d8

0800712c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d105      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007150:	2b00      	cmp	r3, #0
 8007152:	d035      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007154:	4b62      	ldr	r3, [pc, #392]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800715a:	f7fa fbad 	bl	80018b8 <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007160:	e008      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007162:	f7fa fba9 	bl	80018b8 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e0b0      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007174:	4b5b      	ldr	r3, [pc, #364]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1f0      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	019a      	lsls	r2, r3, #6
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	071b      	lsls	r3, r3, #28
 800718c:	4955      	ldr	r1, [pc, #340]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007194:	4b52      	ldr	r3, [pc, #328]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800719a:	f7fa fb8d 	bl	80018b8 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071a0:	e008      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071a2:	f7fa fb89 	bl	80018b8 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e090      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b4:	4b4b      	ldr	r3, [pc, #300]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0f0      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8083 	beq.w	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	4a43      	ldr	r2, [pc, #268]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071dc:	6413      	str	r3, [r2, #64]	; 0x40
 80071de:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071ea:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3e      	ldr	r2, [pc, #248]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071f6:	f7fa fb5f 	bl	80018b8 <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071fc:	e008      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071fe:	f7fa fb5b 	bl	80018b8 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e062      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007210:	4b35      	ldr	r3, [pc, #212]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800721c:	4b31      	ldr	r3, [pc, #196]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007224:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02f      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	429a      	cmp	r2, r3
 8007238:	d028      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800723a:	4b2a      	ldr	r3, [pc, #168]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007242:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007244:	4b29      	ldr	r3, [pc, #164]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800724a:	4b28      	ldr	r3, [pc, #160]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007250:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007256:	4b23      	ldr	r3, [pc, #140]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b01      	cmp	r3, #1
 8007260:	d114      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007262:	f7fa fb29 	bl	80018b8 <HAL_GetTick>
 8007266:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007268:	e00a      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800726a:	f7fa fb25 	bl	80018b8 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e02a      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ee      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007298:	d10d      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	490d      	ldr	r1, [pc, #52]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	608b      	str	r3, [r1, #8]
 80072b4:	e005      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072c0:	6093      	str	r3, [r2, #8]
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ce:	4905      	ldr	r1, [pc, #20]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	42470068 	.word	0x42470068
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40007000 	.word	0x40007000
 80072ec:	42470e40 	.word	0x42470e40

080072f0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2203      	movs	r2, #3
 80072fc:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80072fe:	4b11      	ldr	r3, [pc, #68]	; (8007344 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007304:	099b      	lsrs	r3, r3, #6
 8007306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800730e:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007314:	0f1b      	lsrs	r3, r3, #28
 8007316:	f003 0207 	and.w	r2, r3, #7
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007326:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40023800 	.word	0x40023800

08007348 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d13d      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007366:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800736e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007376:	2b01      	cmp	r3, #1
 8007378:	d12f      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800737a:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800737c:	617b      	str	r3, [r7, #20]
          break;
 800737e:	e02f      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800738c:	d108      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007396:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	e007      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80073b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80073c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ca:	0f1b      	lsrs	r3, r3, #28
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d6:	617b      	str	r3, [r7, #20]
          break;
 80073d8:	e002      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]
          break;
 80073de:	bf00      	nop
        }
      }
      break;
 80073e0:	bf00      	nop
    }
  }
  return frequency;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40023800 	.word	0x40023800
 80073f4:	00bb8000 	.word	0x00bb8000
 80073f8:	007a1200 	.word	0x007a1200
 80073fc:	00f42400 	.word	0x00f42400

08007400 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007400:	b084      	sub	sp, #16
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	f107 001c 	add.w	r0, r7, #28
 800740e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	2b01      	cmp	r3, #1
 8007416:	d122      	bne.n	800745e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800742c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007442:	2b01      	cmp	r3, #1
 8007444:	d105      	bne.n	8007452 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f94a 	bl	80076ec <USB_CoreReset>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]
 800745c:	e01a      	b.n	8007494 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f93e 	bl	80076ec <USB_CoreReset>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
 8007486:	e005      	b.n	8007494 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	2b01      	cmp	r3, #1
 8007498:	d10b      	bne.n	80074b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f043 0206 	orr.w	r2, r3, #6
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074be:	b004      	add	sp, #16
 80074c0:	4770      	bx	lr

080074c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f043 0201 	orr.w	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f023 0201 	bic.w	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800751e:	78fb      	ldrb	r3, [r7, #3]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d106      	bne.n	8007532 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60da      	str	r2, [r3, #12]
 8007530:	e00b      	b.n	800754a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d106      	bne.n	8007546 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	e001      	b.n	800754a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e003      	b.n	8007552 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800754a:	2032      	movs	r0, #50	; 0x32
 800754c:	f7fa f9c0 	bl	80018d0 <HAL_Delay>

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	019b      	lsls	r3, r3, #6
 800756e:	f043 0220 	orr.w	r2, r3, #32
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <USB_FlushTxFifo+0x48>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d901      	bls.n	8007588 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e006      	b.n	8007596 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b20      	cmp	r3, #32
 8007592:	d0f0      	beq.n	8007576 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	00030d40 	.word	0x00030d40

080075a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2210      	movs	r2, #16
 80075b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <USB_FlushRxFifo+0x40>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d901      	bls.n	80075cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e006      	b.n	80075da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 0310 	and.w	r3, r3, #16
 80075d4:	2b10      	cmp	r3, #16
 80075d6:	d0f0      	beq.n	80075ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	00030d40 	.word	0x00030d40

080075ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4611      	mov	r1, r2
 80075f8:	461a      	mov	r2, r3
 80075fa:	460b      	mov	r3, r1
 80075fc:	71fb      	strb	r3, [r7, #7]
 80075fe:	4613      	mov	r3, r2
 8007600:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800760a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800760e:	2b00      	cmp	r3, #0
 8007610:	d11a      	bne.n	8007648 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007612:	88bb      	ldrh	r3, [r7, #4]
 8007614:	3303      	adds	r3, #3
 8007616:	089b      	lsrs	r3, r3, #2
 8007618:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	e00f      	b.n	8007640 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	031a      	lsls	r2, r3, #12
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4413      	add	r3, r2
 8007628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800762c:	461a      	mov	r2, r3
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	3304      	adds	r3, #4
 8007638:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	3301      	adds	r3, #1
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d3eb      	bcc.n	8007620 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3724      	adds	r7, #36	; 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007656:	b480      	push	{r7}
 8007658:	b089      	sub	sp, #36	; 0x24
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	4613      	mov	r3, r2
 8007662:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	3303      	adds	r3, #3
 8007670:	089b      	lsrs	r3, r3, #2
 8007672:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007674:	2300      	movs	r3, #0
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	e00b      	b.n	8007692 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	601a      	str	r2, [r3, #0]
    pDest++;
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	3304      	adds	r3, #4
 800768a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	3301      	adds	r3, #1
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d3ef      	bcc.n	800767a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800769a:	69fb      	ldr	r3, [r7, #28]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3724      	adds	r7, #36	; 0x24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4013      	ands	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	f003 0301 	and.w	r3, r3, #1
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3301      	adds	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4a13      	ldr	r2, [pc, #76]	; (8007750 <USB_CoreReset+0x64>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e01b      	b.n	8007742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	daf2      	bge.n	80076f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f043 0201 	orr.w	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4a09      	ldr	r2, [pc, #36]	; (8007750 <USB_CoreReset+0x64>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d901      	bls.n	8007734 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e006      	b.n	8007742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d0f0      	beq.n	8007722 <USB_CoreReset+0x36>

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	00030d40 	.word	0x00030d40

08007754 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007754:	b084      	sub	sp, #16
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	f107 001c 	add.w	r0, r7, #28
 8007762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007770:	461a      	mov	r2, r3
 8007772:	2300      	movs	r3, #0
 8007774:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d018      	beq.n	80077d8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10a      	bne.n	80077c2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077ba:	f043 0304 	orr.w	r3, r3, #4
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	e014      	b.n	80077ec <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077d0:	f023 0304 	bic.w	r3, r3, #4
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e009      	b.n	80077ec <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077e6:	f023 0304 	bic.w	r3, r3, #4
 80077ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80077ec:	2110      	movs	r1, #16
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff feb4 	bl	800755c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fed7 	bl	80075a8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	e015      	b.n	800782c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780c:	461a      	mov	r2, r3
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4413      	add	r3, r2
 800781c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007820:	461a      	mov	r2, r3
 8007822:	2300      	movs	r3, #0
 8007824:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	429a      	cmp	r2, r3
 8007832:	d3e5      	bcc.n	8007800 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007834:	2101      	movs	r1, #1
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8ac 	bl	8007994 <USB_DriveVbus>

  HAL_Delay(200U);
 800783c:	20c8      	movs	r0, #200	; 0xc8
 800783e:	f7fa f847 	bl	80018d0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f04f 32ff 	mov.w	r2, #4294967295
 800784e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007862:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a14      	ldr	r2, [pc, #80]	; (80078b8 <USB_HostInit+0x164>)
 8007868:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a13      	ldr	r2, [pc, #76]	; (80078bc <USB_HostInit+0x168>)
 800786e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007872:	e009      	b.n	8007888 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2280      	movs	r2, #128	; 0x80
 8007878:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a10      	ldr	r2, [pc, #64]	; (80078c0 <USB_HostInit+0x16c>)
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <USB_HostInit+0x170>)
 8007884:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f043 0210 	orr.w	r2, r3, #16
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <USB_HostInit+0x174>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078b2:	b004      	add	sp, #16
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	01000200 	.word	0x01000200
 80078bc:	00e00300 	.word	0x00e00300
 80078c0:	00600080 	.word	0x00600080
 80078c4:	004000e0 	.word	0x004000e0
 80078c8:	a3200008 	.word	0xa3200008

080078cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078ea:	f023 0303 	bic.w	r3, r3, #3
 80078ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007904:	4313      	orrs	r3, r2
 8007906:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d107      	bne.n	800791e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007914:	461a      	mov	r2, r3
 8007916:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800791a:	6053      	str	r3, [r2, #4]
 800791c:	e009      	b.n	8007932 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d106      	bne.n	8007932 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800792a:	461a      	mov	r2, r3
 800792c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007930:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007960:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800796a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800796e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007970:	2064      	movs	r0, #100	; 0x64
 8007972:	f7f9 ffad 	bl	80018d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800797e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007982:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007984:	200a      	movs	r0, #10
 8007986:	f7f9 ffa3 	bl	80018d0 <HAL_Delay>

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <USB_DriveVbus+0x44>
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d106      	bne.n	80079d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d109      	bne.n	80079f8 <USB_DriveVbus+0x64>
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	0c5b      	lsrs	r3, r3, #17
 8007a24:	f003 0303 	and.w	r3, r3, #3
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	b29b      	uxth	r3, r3
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	4608      	mov	r0, r1
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	70fb      	strb	r3, [r7, #3]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70bb      	strb	r3, [r7, #2]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a86:	461a      	mov	r2, r3
 8007a88:	f04f 33ff 	mov.w	r3, #4294967295
 8007a8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d87e      	bhi.n	8007b94 <USB_HC_Init+0x13c>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <USB_HC_Init+0x44>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007aad 	.word	0x08007aad
 8007aa0:	08007b57 	.word	0x08007b57
 8007aa4:	08007aad 	.word	0x08007aad
 8007aa8:	08007b19 	.word	0x08007b19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f240 439d 	movw	r3, #1181	; 0x49d
 8007abe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da10      	bge.n	8007aea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007ae8:	e057      	b.n	8007b9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d051      	beq.n	8007b9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	78fa      	ldrb	r2, [r7, #3]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b14:	60d3      	str	r3, [r2, #12]
      break;
 8007b16:	e040      	b.n	8007b9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b24:	461a      	mov	r2, r3
 8007b26:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da34      	bge.n	8007b9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b54:	e023      	b.n	8007b9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b62:	461a      	mov	r2, r3
 8007b64:	f240 2325 	movw	r3, #549	; 0x225
 8007b68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	da17      	bge.n	8007ba2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	78fa      	ldrb	r2, [r7, #3]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007b90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b92:	e006      	b.n	8007ba2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	75fb      	strb	r3, [r7, #23]
      break;
 8007b98:	e004      	b.n	8007ba4 <USB_HC_Init+0x14c>
      break;
 8007b9a:	bf00      	nop
 8007b9c:	e002      	b.n	8007ba4 <USB_HC_Init+0x14c>
      break;
 8007b9e:	bf00      	nop
 8007ba0:	e000      	b.n	8007ba4 <USB_HC_Init+0x14c>
      break;
 8007ba2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007baa:	699a      	ldr	r2, [r3, #24]
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007bce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da03      	bge.n	8007bde <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	e001      	b.n	8007be2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d103      	bne.n	8007bf2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e001      	b.n	8007bf6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bf6:	787b      	ldrb	r3, [r7, #1]
 8007bf8:	059b      	lsls	r3, r3, #22
 8007bfa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007bfe:	78bb      	ldrb	r3, [r7, #2]
 8007c00:	02db      	lsls	r3, r3, #11
 8007c02:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c06:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c0c:	049b      	lsls	r3, r3, #18
 8007c0e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c1a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	0159      	lsls	r1, r3, #5
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	440b      	add	r3, r1
 8007c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c32:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007c34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d10f      	bne.n	8007c5c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	0151      	lsls	r1, r2, #5
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	440a      	add	r2, r1
 8007c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c5a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop

08007c6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08c      	sub	sp, #48	; 0x30
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c88:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d028      	beq.n	8007ce8 <USB_HC_StartXfer+0x7c>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d124      	bne.n	8007ce8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10b      	bne.n	8007cbc <USB_HC_StartXfer+0x50>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	795b      	ldrb	r3, [r3, #5]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d107      	bne.n	8007cbc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fa30 	bl	8008118 <USB_DoPing>
      return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e114      	b.n	8007ee6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d112      	bne.n	8007ce8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	6a3a      	ldr	r2, [r7, #32]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cdc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007ce0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d018      	beq.n	8007d22 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	8912      	ldrh	r2, [r2, #8]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	8912      	ldrh	r2, [r2, #8]
 8007d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d04:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007d06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d08:	8b7b      	ldrh	r3, [r7, #26]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d90b      	bls.n	8007d26 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007d0e:	8b7b      	ldrh	r3, [r7, #26]
 8007d10:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	8912      	ldrh	r2, [r2, #8]
 8007d18:	fb02 f203 	mul.w	r2, r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	611a      	str	r2, [r3, #16]
 8007d20:	e001      	b.n	8007d26 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007d22:	2301      	movs	r3, #1
 8007d24:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	78db      	ldrb	r3, [r3, #3]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	8912      	ldrh	r2, [r2, #8]
 8007d34:	fb02 f203 	mul.w	r2, r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d46:	04d9      	lsls	r1, r3, #19
 8007d48:	4b69      	ldr	r3, [pc, #420]	; (8007ef0 <USB_HC_StartXfer+0x284>)
 8007d4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	7a9b      	ldrb	r3, [r3, #10]
 8007d52:	075b      	lsls	r3, r3, #29
 8007d54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d58:	69f9      	ldr	r1, [r7, #28]
 8007d5a:	0148      	lsls	r0, r1, #5
 8007d5c:	6a39      	ldr	r1, [r7, #32]
 8007d5e:	4401      	add	r1, r0
 8007d60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	68d9      	ldr	r1, [r3, #12]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7e:	460a      	mov	r2, r1
 8007d80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bf0c      	ite	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	2300      	movne	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	6a3a      	ldr	r2, [r7, #32]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007db4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007db8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	7e7b      	ldrb	r3, [r7, #25]
 8007dca:	075b      	lsls	r3, r3, #29
 8007dcc:	69f9      	ldr	r1, [r7, #28]
 8007dce:	0148      	lsls	r0, r1, #5
 8007dd0:	6a39      	ldr	r1, [r7, #32]
 8007dd2:	4401      	add	r1, r0
 8007dd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a42      	ldr	r2, [pc, #264]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007dec:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007dee:	4b41      	ldr	r3, [pc, #260]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007df6:	4a3f      	ldr	r2, [pc, #252]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007df8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d006      	beq.n	8007e10 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e02:	4b3c      	ldr	r3, [pc, #240]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e0a:	4a3a      	ldr	r2, [pc, #232]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e005      	b.n	8007e1c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e10:	4b38      	ldr	r3, [pc, #224]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e18:	4a36      	ldr	r2, [pc, #216]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007e1a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e1c:	4b35      	ldr	r3, [pc, #212]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e24:	4a33      	ldr	r2, [pc, #204]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007e26:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <USB_HC_StartXfer+0x288>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e04f      	b.n	8007ee6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	78db      	ldrb	r3, [r3, #3]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d14a      	bne.n	8007ee4 <USB_HC_StartXfer+0x278>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d046      	beq.n	8007ee4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	79db      	ldrb	r3, [r3, #7]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d830      	bhi.n	8007ec0 <USB_HC_StartXfer+0x254>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <USB_HC_StartXfer+0x1f8>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007e99 	.word	0x08007e99
 8007e6c:	08007e75 	.word	0x08007e75
 8007e70:	08007e99 	.word	0x08007e99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	3303      	adds	r3, #3
 8007e7a:	089b      	lsrs	r3, r3, #2
 8007e7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e7e:	8afa      	ldrh	r2, [r7, #22]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d91c      	bls.n	8007ec4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f043 0220 	orr.w	r2, r3, #32
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e96:	e015      	b.n	8007ec4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	3303      	adds	r3, #3
 8007e9e:	089b      	lsrs	r3, r3, #2
 8007ea0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ea2:	8afa      	ldrh	r2, [r7, #22]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d90a      	bls.n	8007ec8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ebe:	e003      	b.n	8007ec8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007ec0:	bf00      	nop
 8007ec2:	e002      	b.n	8007eca <USB_HC_StartXfer+0x25e>
        break;
 8007ec4:	bf00      	nop
 8007ec6:	e000      	b.n	8007eca <USB_HC_StartXfer+0x25e>
        break;
 8007ec8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	68d9      	ldr	r1, [r3, #12]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	785a      	ldrb	r2, [r3, #1]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	b298      	uxth	r0, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4603      	mov	r3, r0
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f7ff fb84 	bl	80075ec <USB_WritePacket>
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3728      	adds	r7, #40	; 0x28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	1ff80000 	.word	0x1ff80000
 8007ef4:	2000134c 	.word	0x2000134c

08007ef8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	b29b      	uxth	r3, r3
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b087      	sub	sp, #28
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	0c9b      	lsrs	r3, r3, #18
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <USB_HC_Halt+0x3a>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d16c      	bne.n	800802e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f72:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d143      	bne.n	8008008 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fbe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fde:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fec:	d81d      	bhi.n	800802a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008004:	d0ec      	beq.n	8007fe0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008006:	e080      	b.n	800810a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4413      	add	r3, r2
 8008010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	440a      	add	r2, r1
 800801e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008026:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008028:	e06f      	b.n	800810a <USB_HC_Halt+0x1f0>
          break;
 800802a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800802c:	e06d      	b.n	800810a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	440a      	add	r2, r1
 8008044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800804c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d143      	bne.n	80080e6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	440a      	add	r2, r1
 8008074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800807c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	4413      	add	r3, r2
 8008086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	440a      	add	r2, r1
 8008094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800809c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080bc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	3301      	adds	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ca:	d81d      	bhi.n	8008108 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e2:	d0ec      	beq.n	80080be <USB_HC_Halt+0x1a4>
 80080e4:	e011      	b.n	800810a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	0151      	lsls	r1, r2, #5
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	440a      	add	r2, r1
 80080fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	e000      	b.n	800810a <USB_HC_Halt+0x1f0>
          break;
 8008108:	bf00      	nop
    }
  }

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	04da      	lsls	r2, r3, #19
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <USB_DoPing+0x74>)
 8008136:	4013      	ands	r3, r2
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	440a      	add	r2, r1
 8008140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008148:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008160:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008168:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	461a      	mov	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	1ff80000 	.word	0x1ff80000

08008190 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff f99f 	bl	80074e4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80081a6:	2110      	movs	r1, #16
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff f9d7 	bl	800755c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff f9fa 	bl	80075a8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	e01f      	b.n	80081fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ee:	461a      	mov	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	3301      	adds	r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b0f      	cmp	r3, #15
 80081fe:	d9dc      	bls.n	80081ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	e034      	b.n	8008270 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800821c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008224:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800822c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800823a:	461a      	mov	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	3301      	adds	r3, #1
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800824c:	d80c      	bhi.n	8008268 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008264:	d0ec      	beq.n	8008240 <USB_StopHost+0xb0>
 8008266:	e000      	b.n	800826a <USB_StopHost+0xda>
        break;
 8008268:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	3301      	adds	r3, #1
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b0f      	cmp	r3, #15
 8008274:	d9c7      	bls.n	8008206 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800827c:	461a      	mov	r2, r3
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f04f 32ff 	mov.w	r2, #4294967295
 800828a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff f918 	bl	80074c2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80082a0:	4904      	ldr	r1, [pc, #16]	; (80082b4 <MX_FATFS_Init+0x18>)
 80082a2:	4805      	ldr	r0, [pc, #20]	; (80082b8 <MX_FATFS_Init+0x1c>)
 80082a4:	f005 fb7a 	bl	800d99c <FATFS_LinkDriver>
 80082a8:	4603      	mov	r3, r0
 80082aa:	461a      	mov	r2, r3
 80082ac:	4b03      	ldr	r3, [pc, #12]	; (80082bc <MX_FATFS_Init+0x20>)
 80082ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80082b0:	bf00      	nop
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	200014dc 	.word	0x200014dc
 80082b8:	0800e2e8 	.word	0x0800e2e8
 80082bc:	20001940 	.word	0x20001940

080082c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80082c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	4619      	mov	r1, r3
 80082fa:	4808      	ldr	r0, [pc, #32]	; (800831c <USBH_status+0x34>)
 80082fc:	f000 fe11 	bl	8008f22 <USBH_MSC_UnitIsReady>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <USBH_status+0x24>
  {
    res = RES_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]
 800830a:	e001      	b.n	8008310 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20001944 	.word	0x20001944

08008320 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b094      	sub	sp, #80	; 0x50
 8008324:	af02      	add	r7, sp, #8
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008336:	7bf9      	ldrb	r1, [r7, #15]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	4812      	ldr	r0, [pc, #72]	; (800838c <USBH_read+0x6c>)
 8008342:	f000 fe38 	bl	8008fb6 <USBH_MSC_Read>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <USBH_read+0x34>
  {
    res = RES_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008352:	e015      	b.n	8008380 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008354:	f107 0210 	add.w	r2, r7, #16
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4619      	mov	r1, r3
 800835c:	480b      	ldr	r0, [pc, #44]	; (800838c <USBH_read+0x6c>)
 800835e:	f000 fe06 	bl	8008f6e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008362:	7f7b      	ldrb	r3, [r7, #29]
 8008364:	2b28      	cmp	r3, #40	; 0x28
 8008366:	d003      	beq.n	8008370 <USBH_read+0x50>
 8008368:	2b3a      	cmp	r3, #58	; 0x3a
 800836a:	d001      	beq.n	8008370 <USBH_read+0x50>
 800836c:	2b04      	cmp	r3, #4
 800836e:	d103      	bne.n	8008378 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008370:	2303      	movs	r3, #3
 8008372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008376:	e003      	b.n	8008380 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800837e:	bf00      	nop
    }
  }

  return res;
 8008380:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008384:	4618      	mov	r0, r3
 8008386:	3748      	adds	r7, #72	; 0x48
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20001944 	.word	0x20001944

08008390 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b094      	sub	sp, #80	; 0x50
 8008394:	af02      	add	r7, sp, #8
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80083a6:	7bf9      	ldrb	r1, [r7, #15]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4817      	ldr	r0, [pc, #92]	; (8008410 <USBH_write+0x80>)
 80083b2:	f000 fe69 	bl	8009088 <USBH_MSC_Write>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <USBH_write+0x34>
  {
    res = RES_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80083c2:	e01f      	b.n	8008404 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80083c4:	f107 0210 	add.w	r2, r7, #16
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	4619      	mov	r1, r3
 80083cc:	4810      	ldr	r0, [pc, #64]	; (8008410 <USBH_write+0x80>)
 80083ce:	f000 fdce 	bl	8008f6e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80083d2:	7f7b      	ldrb	r3, [r7, #29]
 80083d4:	2b27      	cmp	r3, #39	; 0x27
 80083d6:	d009      	beq.n	80083ec <USBH_write+0x5c>
 80083d8:	2b27      	cmp	r3, #39	; 0x27
 80083da:	dc02      	bgt.n	80083e2 <USBH_write+0x52>
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d009      	beq.n	80083f4 <USBH_write+0x64>
 80083e0:	e00c      	b.n	80083fc <USBH_write+0x6c>
 80083e2:	2b28      	cmp	r3, #40	; 0x28
 80083e4:	d006      	beq.n	80083f4 <USBH_write+0x64>
 80083e6:	2b3a      	cmp	r3, #58	; 0x3a
 80083e8:	d004      	beq.n	80083f4 <USBH_write+0x64>
 80083ea:	e007      	b.n	80083fc <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80083ec:	2302      	movs	r3, #2
 80083ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083f2:	e007      	b.n	8008404 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80083f4:	2303      	movs	r3, #3
 80083f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083fa:	e003      	b.n	8008404 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008402:	bf00      	nop
    }
  }

  return res;
 8008404:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008408:	4618      	mov	r0, r3
 800840a:	3748      	adds	r7, #72	; 0x48
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20001944 	.word	0x20001944

08008414 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b090      	sub	sp, #64	; 0x40
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	603a      	str	r2, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
 8008420:	460b      	mov	r3, r1
 8008422:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800842a:	79bb      	ldrb	r3, [r7, #6]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d852      	bhi.n	80084d6 <USBH_ioctl+0xc2>
 8008430:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <USBH_ioctl+0x24>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	08008449 	.word	0x08008449
 800843c:	08008451 	.word	0x08008451
 8008440:	0800847b 	.word	0x0800847b
 8008444:	080084a7 	.word	0x080084a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800844e:	e045      	b.n	80084dc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008450:	f107 0208 	add.w	r2, r7, #8
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	4619      	mov	r1, r3
 8008458:	4823      	ldr	r0, [pc, #140]	; (80084e8 <USBH_ioctl+0xd4>)
 800845a:	f000 fd88 	bl	8008f6e <USBH_MSC_GetLUNInfo>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d106      	bne.n	8008472 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008470:	e034      	b.n	80084dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008478:	e030      	b.n	80084dc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800847a:	f107 0208 	add.w	r2, r7, #8
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	4619      	mov	r1, r3
 8008482:	4819      	ldr	r0, [pc, #100]	; (80084e8 <USBH_ioctl+0xd4>)
 8008484:	f000 fd73 	bl	8008f6e <USBH_MSC_GetLUNInfo>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d107      	bne.n	800849e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800848e:	8a3b      	ldrh	r3, [r7, #16]
 8008490:	461a      	mov	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800849c:	e01e      	b.n	80084dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80084a4:	e01a      	b.n	80084dc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80084a6:	f107 0208 	add.w	r2, r7, #8
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	4619      	mov	r1, r3
 80084ae:	480e      	ldr	r0, [pc, #56]	; (80084e8 <USBH_ioctl+0xd4>)
 80084b0:	f000 fd5d 	bl	8008f6e <USBH_MSC_GetLUNInfo>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80084ba:	8a3b      	ldrh	r3, [r7, #16]
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	b29b      	uxth	r3, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80084cc:	e006      	b.n	80084dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80084d4:	e002      	b.n	80084dc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80084d6:	2304      	movs	r3, #4
 80084d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80084dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3740      	adds	r7, #64	; 0x40
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20001944 	.word	0x20001944

080084ec <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b089      	sub	sp, #36	; 0x24
 80084f0:	af04      	add	r7, sp, #16
 80084f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084fa:	7919      	ldrb	r1, [r3, #4]
 80084fc:	2350      	movs	r3, #80	; 0x50
 80084fe:	2206      	movs	r2, #6
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 fc4f 	bl	8009da4 <USBH_FindInterface>
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2bff      	cmp	r3, #255	; 0xff
 800850e:	d002      	beq.n	8008516 <USBH_MSC_InterfaceInit+0x2a>
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d901      	bls.n	800851a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008516:	2302      	movs	r3, #2
 8008518:	e0ef      	b.n	80086fa <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 fc24 	bl	8009d6c <USBH_SelectInterface>
 8008524:	4603      	mov	r3, r0
 8008526:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	e0e3      	b.n	80086fa <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008538:	f44f 7080 	mov.w	r0, #256	; 0x100
 800853c:	f005 fd7e 	bl	800e03c <malloc>
 8008540:	4603      	mov	r3, r0
 8008542:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008554:	2302      	movs	r3, #2
 8008556:	e0d0      	b.n	80086fa <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800855c:	2100      	movs	r1, #0
 800855e:	68b8      	ldr	r0, [r7, #8]
 8008560:	f005 fd87 	bl	800e072 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	211a      	movs	r1, #26
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	4413      	add	r3, r2
 8008570:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	b25b      	sxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	da16      	bge.n	80085aa <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	211a      	movs	r1, #26
 8008582:	fb01 f303 	mul.w	r3, r1, r3
 8008586:	4413      	add	r3, r2
 8008588:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	211a      	movs	r1, #26
 8008598:	fb01 f303 	mul.w	r3, r1, r3
 800859c:	4413      	add	r3, r2
 800859e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085a2:	881a      	ldrh	r2, [r3, #0]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	815a      	strh	r2, [r3, #10]
 80085a8:	e015      	b.n	80085d6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	211a      	movs	r1, #26
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	4413      	add	r3, r2
 80085b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	211a      	movs	r1, #26
 80085c6:	fb01 f303 	mul.w	r3, r1, r3
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085d0:	881a      	ldrh	r2, [r3, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	211a      	movs	r1, #26
 80085dc:	fb01 f303 	mul.w	r3, r1, r3
 80085e0:	4413      	add	r3, r2
 80085e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	b25b      	sxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	da16      	bge.n	800861c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	211a      	movs	r1, #26
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085fe:	781a      	ldrb	r2, [r3, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	211a      	movs	r1, #26
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	4413      	add	r3, r2
 8008610:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008614:	881a      	ldrh	r2, [r3, #0]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	815a      	strh	r2, [r3, #10]
 800861a:	e015      	b.n	8008648 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	211a      	movs	r1, #26
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	4413      	add	r3, r2
 8008628:	f203 3356 	addw	r3, r3, #854	; 0x356
 800862c:	781a      	ldrb	r2, [r3, #0]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	211a      	movs	r1, #26
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	4413      	add	r3, r2
 800863e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008642:	881a      	ldrh	r2, [r3, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2200      	movs	r2, #0
 8008652:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	799b      	ldrb	r3, [r3, #6]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f002 fdc2 	bl	800b1ea <USBH_AllocPipe>
 8008666:	4603      	mov	r3, r0
 8008668:	461a      	mov	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	79db      	ldrb	r3, [r3, #7]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f002 fdb8 	bl	800b1ea <USBH_AllocPipe>
 800867a:	4603      	mov	r3, r0
 800867c:	461a      	mov	r2, r3
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fda4 	bl	80091d0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	7959      	ldrb	r1, [r3, #5]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	7998      	ldrb	r0, [r3, #6]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	8912      	ldrh	r2, [r2, #8]
 80086a0:	9202      	str	r2, [sp, #8]
 80086a2:	2202      	movs	r2, #2
 80086a4:	9201      	str	r2, [sp, #4]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4623      	mov	r3, r4
 80086aa:	4602      	mov	r2, r0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f002 fd6d 	bl	800b18c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	7919      	ldrb	r1, [r3, #4]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	79d8      	ldrb	r0, [r3, #7]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	8952      	ldrh	r2, [r2, #10]
 80086ca:	9202      	str	r2, [sp, #8]
 80086cc:	2202      	movs	r2, #2
 80086ce:	9201      	str	r2, [sp, #4]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	4623      	mov	r3, r4
 80086d4:	4602      	mov	r2, r0
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f002 fd58 	bl	800b18c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	791b      	ldrb	r3, [r3, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f005 fbe2 	bl	800deae <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	795b      	ldrb	r3, [r3, #5]
 80086ee:	2200      	movs	r2, #0
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f005 fbdb 	bl	800deae <USBH_LL_SetToggle>

  return USBH_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd90      	pop	{r4, r7, pc}

08008702 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	795b      	ldrb	r3, [r3, #5]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	795b      	ldrb	r3, [r3, #5]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f002 fd51 	bl	800b1ca <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	795b      	ldrb	r3, [r3, #5]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 fd7c 	bl	800b22c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	791b      	ldrb	r3, [r3, #4]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f002 fd3e 	bl	800b1ca <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	791b      	ldrb	r3, [r3, #4]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f002 fd69 	bl	800b22c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	4618      	mov	r0, r3
 8008776:	f005 fc69 	bl	800e04c <free>
    phost->pActiveClass->pData = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008780:	2200      	movs	r2, #0
 8008782:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80087a0:	2301      	movs	r3, #1
 80087a2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	7b9b      	ldrb	r3, [r3, #14]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d004      	beq.n	80087b6 <USBH_MSC_ClassRequest+0x28>
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d03e      	beq.n	800882e <USBH_MSC_ClassRequest+0xa0>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d000      	beq.n	80087b6 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80087b4:	e04a      	b.n	800884c <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fcea 	bl	8009194 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d104      	bne.n	80087d4 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d135      	bne.n	8008846 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d804      	bhi.n	80087ec <USBH_MSC_ClassRequest+0x5e>
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	e000      	b.n	80087ee <USBH_MSC_ClassRequest+0x60>
 80087ec:	2202      	movs	r2, #2
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80087f2:	2300      	movs	r3, #0
 80087f4:	73bb      	strb	r3, [r7, #14]
 80087f6:	e014      	b.n	8008822 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	2134      	movs	r1, #52	; 0x34
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	3392      	adds	r3, #146	; 0x92
 8008806:	2202      	movs	r2, #2
 8008808:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	2134      	movs	r1, #52	; 0x34
 8008810:	fb01 f303 	mul.w	r3, r1, r3
 8008814:	4413      	add	r3, r2
 8008816:	33c1      	adds	r3, #193	; 0xc1
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	3301      	adds	r3, #1
 8008820:	73bb      	strb	r3, [r7, #14]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	7bba      	ldrb	r2, [r7, #14]
 8008828:	429a      	cmp	r2, r3
 800882a:	d3e5      	bcc.n	80087f8 <USBH_MSC_ClassRequest+0x6a>
      break;
 800882c:	e00b      	b.n	8008846 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800882e:	2100      	movs	r1, #0
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f002 f878 	bl	800a926 <USBH_ClrFeature>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	7bda      	ldrb	r2, [r3, #15]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	739a      	strb	r2, [r3, #14]
      break;
 8008844:	e001      	b.n	800884a <USBH_MSC_ClassRequest+0xbc>
      break;
 8008846:	bf00      	nop
 8008848:	e000      	b.n	800884c <USBH_MSC_ClassRequest+0xbe>
      break;
 800884a:	bf00      	nop
  }

  return status;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800886a:	2301      	movs	r3, #1
 800886c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800886e:	2301      	movs	r3, #1
 8008870:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008872:	2301      	movs	r3, #1
 8008874:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	7b1b      	ldrb	r3, [r3, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <USBH_MSC_Process+0x2e>
 800887e:	2b01      	cmp	r3, #1
 8008880:	f000 8271 	beq.w	8008d66 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008884:	e272      	b.n	8008d6c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	429a      	cmp	r2, r3
 8008894:	f080 824f 	bcs.w	8008d36 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800889e:	4619      	mov	r1, r3
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	2334      	movs	r3, #52	; 0x34
 80088a4:	fb03 f301 	mul.w	r3, r3, r1
 80088a8:	4413      	add	r3, r2
 80088aa:	3391      	adds	r3, #145	; 0x91
 80088ac:	2201      	movs	r2, #1
 80088ae:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088b6:	4619      	mov	r1, r3
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	2334      	movs	r3, #52	; 0x34
 80088bc:	fb03 f301 	mul.w	r3, r3, r1
 80088c0:	4413      	add	r3, r2
 80088c2:	3390      	adds	r3, #144	; 0x90
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	f200 8243 	bhi.w	8008d52 <USBH_MSC_Process+0x4fa>
 80088cc:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <USBH_MSC_Process+0x7c>)
 80088ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d2:	bf00      	nop
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	08008d53 	.word	0x08008d53
 80088dc:	080089c1 	.word	0x080089c1
 80088e0:	08008b45 	.word	0x08008b45
 80088e4:	0800891f 	.word	0x0800891f
 80088e8:	08008c11 	.word	0x08008c11
 80088ec:	08008d53 	.word	0x08008d53
 80088f0:	08008d53 	.word	0x08008d53
 80088f4:	08008d25 	.word	0x08008d25
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088fe:	4619      	mov	r1, r3
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	2334      	movs	r3, #52	; 0x34
 8008904:	fb03 f301 	mul.w	r3, r3, r1
 8008908:	4413      	add	r3, r2
 800890a:	3390      	adds	r3, #144	; 0x90
 800890c:	2204      	movs	r2, #4
 800890e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800891c:	e222      	b.n	8008d64 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008924:	b2d9      	uxtb	r1, r3
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800892c:	461a      	mov	r2, r3
 800892e:	2334      	movs	r3, #52	; 0x34
 8008930:	fb03 f302 	mul.w	r3, r3, r2
 8008934:	3398      	adds	r3, #152	; 0x98
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	4413      	add	r3, r2
 800893a:	3307      	adds	r3, #7
 800893c:	461a      	mov	r2, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 ff68 	bl	8009814 <USBH_MSC_SCSI_Inquiry>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008954:	4619      	mov	r1, r3
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	2334      	movs	r3, #52	; 0x34
 800895a:	fb03 f301 	mul.w	r3, r3, r1
 800895e:	4413      	add	r3, r2
 8008960:	3390      	adds	r3, #144	; 0x90
 8008962:	2202      	movs	r2, #2
 8008964:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d10c      	bne.n	8008986 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008972:	4619      	mov	r1, r3
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	2334      	movs	r3, #52	; 0x34
 8008978:	fb03 f301 	mul.w	r3, r3, r1
 800897c:	4413      	add	r3, r2
 800897e:	3390      	adds	r3, #144	; 0x90
 8008980:	2205      	movs	r2, #5
 8008982:	701a      	strb	r2, [r3, #0]
            break;
 8008984:	e1e7      	b.n	8008d56 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	2b04      	cmp	r3, #4
 800898a:	f040 81e4 	bne.w	8008d56 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008994:	4619      	mov	r1, r3
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	2334      	movs	r3, #52	; 0x34
 800899a:	fb03 f301 	mul.w	r3, r3, r1
 800899e:	4413      	add	r3, r2
 80089a0:	3390      	adds	r3, #144	; 0x90
 80089a2:	2201      	movs	r2, #1
 80089a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ac:	4619      	mov	r1, r3
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	2334      	movs	r3, #52	; 0x34
 80089b2:	fb03 f301 	mul.w	r3, r3, r1
 80089b6:	4413      	add	r3, r2
 80089b8:	3391      	adds	r3, #145	; 0x91
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
            break;
 80089be:	e1ca      	b.n	8008d56 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fe64 	bl	8009698 <USBH_MSC_SCSI_TestUnitReady>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d149      	bne.n	8008a6e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089e0:	4619      	mov	r1, r3
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	2334      	movs	r3, #52	; 0x34
 80089e6:	fb03 f301 	mul.w	r3, r3, r1
 80089ea:	4413      	add	r3, r2
 80089ec:	3392      	adds	r3, #146	; 0x92
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00c      	beq.n	8008a0e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089fa:	4619      	mov	r1, r3
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	2334      	movs	r3, #52	; 0x34
 8008a00:	fb03 f301 	mul.w	r3, r3, r1
 8008a04:	4413      	add	r3, r2
 8008a06:	33c1      	adds	r3, #193	; 0xc1
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e00b      	b.n	8008a26 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a14:	4619      	mov	r1, r3
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	2334      	movs	r3, #52	; 0x34
 8008a1a:	fb03 f301 	mul.w	r3, r3, r1
 8008a1e:	4413      	add	r3, r2
 8008a20:	33c1      	adds	r3, #193	; 0xc1
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	2334      	movs	r3, #52	; 0x34
 8008a32:	fb03 f301 	mul.w	r3, r3, r1
 8008a36:	4413      	add	r3, r2
 8008a38:	3390      	adds	r3, #144	; 0x90
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a44:	4619      	mov	r1, r3
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	2334      	movs	r3, #52	; 0x34
 8008a4a:	fb03 f301 	mul.w	r3, r3, r1
 8008a4e:	4413      	add	r3, r2
 8008a50:	3391      	adds	r3, #145	; 0x91
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	2334      	movs	r3, #52	; 0x34
 8008a62:	fb03 f301 	mul.w	r3, r3, r1
 8008a66:	4413      	add	r3, r2
 8008a68:	3392      	adds	r3, #146	; 0x92
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d14a      	bne.n	8008b0a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	2334      	movs	r3, #52	; 0x34
 8008a80:	fb03 f301 	mul.w	r3, r3, r1
 8008a84:	4413      	add	r3, r2
 8008a86:	3392      	adds	r3, #146	; 0x92
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d00c      	beq.n	8008aa8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a94:	4619      	mov	r1, r3
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	2334      	movs	r3, #52	; 0x34
 8008a9a:	fb03 f301 	mul.w	r3, r3, r1
 8008a9e:	4413      	add	r3, r2
 8008aa0:	33c1      	adds	r3, #193	; 0xc1
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	701a      	strb	r2, [r3, #0]
 8008aa6:	e00b      	b.n	8008ac0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aae:	4619      	mov	r1, r3
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	2334      	movs	r3, #52	; 0x34
 8008ab4:	fb03 f301 	mul.w	r3, r3, r1
 8008ab8:	4413      	add	r3, r2
 8008aba:	33c1      	adds	r3, #193	; 0xc1
 8008abc:	2200      	movs	r2, #0
 8008abe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	2334      	movs	r3, #52	; 0x34
 8008acc:	fb03 f301 	mul.w	r3, r3, r1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	3390      	adds	r3, #144	; 0x90
 8008ad4:	2205      	movs	r2, #5
 8008ad6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ade:	4619      	mov	r1, r3
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	2334      	movs	r3, #52	; 0x34
 8008ae4:	fb03 f301 	mul.w	r3, r3, r1
 8008ae8:	4413      	add	r3, r2
 8008aea:	3391      	adds	r3, #145	; 0x91
 8008aec:	2201      	movs	r2, #1
 8008aee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008af6:	4619      	mov	r1, r3
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	2334      	movs	r3, #52	; 0x34
 8008afc:	fb03 f301 	mul.w	r3, r3, r1
 8008b00:	4413      	add	r3, r2
 8008b02:	3392      	adds	r3, #146	; 0x92
 8008b04:	2202      	movs	r2, #2
 8008b06:	701a      	strb	r2, [r3, #0]
            break;
 8008b08:	e127      	b.n	8008d5a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	f040 8124 	bne.w	8008d5a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b18:	4619      	mov	r1, r3
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	2334      	movs	r3, #52	; 0x34
 8008b1e:	fb03 f301 	mul.w	r3, r3, r1
 8008b22:	4413      	add	r3, r2
 8008b24:	3390      	adds	r3, #144	; 0x90
 8008b26:	2201      	movs	r2, #1
 8008b28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b30:	4619      	mov	r1, r3
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	2334      	movs	r3, #52	; 0x34
 8008b36:	fb03 f301 	mul.w	r3, r3, r1
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3391      	adds	r3, #145	; 0x91
 8008b3e:	2202      	movs	r2, #2
 8008b40:	701a      	strb	r2, [r3, #0]
            break;
 8008b42:	e10a      	b.n	8008d5a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b4a:	b2d9      	uxtb	r1, r3
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b52:	461a      	mov	r2, r3
 8008b54:	2334      	movs	r3, #52	; 0x34
 8008b56:	fb03 f302 	mul.w	r3, r3, r2
 8008b5a:	3390      	adds	r3, #144	; 0x90
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4413      	add	r3, r2
 8008b60:	3304      	adds	r3, #4
 8008b62:	461a      	mov	r2, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fdda 	bl	800971e <USBH_MSC_SCSI_ReadCapacity>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d120      	bne.n	8008bb6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	2334      	movs	r3, #52	; 0x34
 8008b80:	fb03 f301 	mul.w	r3, r3, r1
 8008b84:	4413      	add	r3, r2
 8008b86:	3390      	adds	r3, #144	; 0x90
 8008b88:	2201      	movs	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b92:	4619      	mov	r1, r3
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	2334      	movs	r3, #52	; 0x34
 8008b98:	fb03 f301 	mul.w	r3, r3, r1
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3391      	adds	r3, #145	; 0x91
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008baa:	3301      	adds	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008bb4:	e0d3      	b.n	8008d5e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d10c      	bne.n	8008bd6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	2334      	movs	r3, #52	; 0x34
 8008bc8:	fb03 f301 	mul.w	r3, r3, r1
 8008bcc:	4413      	add	r3, r2
 8008bce:	3390      	adds	r3, #144	; 0x90
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	701a      	strb	r2, [r3, #0]
            break;
 8008bd4:	e0c3      	b.n	8008d5e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	f040 80c0 	bne.w	8008d5e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008be4:	4619      	mov	r1, r3
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	2334      	movs	r3, #52	; 0x34
 8008bea:	fb03 f301 	mul.w	r3, r3, r1
 8008bee:	4413      	add	r3, r2
 8008bf0:	3390      	adds	r3, #144	; 0x90
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	2334      	movs	r3, #52	; 0x34
 8008c02:	fb03 f301 	mul.w	r3, r3, r1
 8008c06:	4413      	add	r3, r2
 8008c08:	3391      	adds	r3, #145	; 0x91
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	701a      	strb	r2, [r3, #0]
            break;
 8008c0e:	e0a6      	b.n	8008d5e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c16:	b2d9      	uxtb	r1, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c1e:	461a      	mov	r2, r3
 8008c20:	2334      	movs	r3, #52	; 0x34
 8008c22:	fb03 f302 	mul.w	r3, r3, r2
 8008c26:	3398      	adds	r3, #152	; 0x98
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fe94 	bl	800995e <USBH_MSC_SCSI_RequestSense>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d145      	bne.n	8008ccc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c46:	4619      	mov	r1, r3
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	2334      	movs	r3, #52	; 0x34
 8008c4c:	fb03 f301 	mul.w	r3, r3, r1
 8008c50:	4413      	add	r3, r2
 8008c52:	339c      	adds	r3, #156	; 0x9c
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b06      	cmp	r3, #6
 8008c58:	d00c      	beq.n	8008c74 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c60:	4619      	mov	r1, r3
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	2334      	movs	r3, #52	; 0x34
 8008c66:	fb03 f301 	mul.w	r3, r3, r1
 8008c6a:	4413      	add	r3, r2
 8008c6c:	339c      	adds	r3, #156	; 0x9c
 8008c6e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d117      	bne.n	8008ca4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f242 720f 	movw	r2, #9999	; 0x270f
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d80c      	bhi.n	8008ca4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c90:	4619      	mov	r1, r3
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	2334      	movs	r3, #52	; 0x34
 8008c96:	fb03 f301 	mul.w	r3, r3, r1
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3390      	adds	r3, #144	; 0x90
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	701a      	strb	r2, [r3, #0]
                  break;
 8008ca2:	e05f      	b.n	8008d64 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008caa:	4619      	mov	r1, r3
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	2334      	movs	r3, #52	; 0x34
 8008cb0:	fb03 f301 	mul.w	r3, r3, r1
 8008cb4:	4413      	add	r3, r2
 8008cb6:	3390      	adds	r3, #144	; 0x90
 8008cb8:	2201      	movs	r2, #1
 8008cba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d10c      	bne.n	8008cec <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cd8:	4619      	mov	r1, r3
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	2334      	movs	r3, #52	; 0x34
 8008cde:	fb03 f301 	mul.w	r3, r3, r1
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3390      	adds	r3, #144	; 0x90
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	701a      	strb	r2, [r3, #0]
            break;
 8008cea:	e03a      	b.n	8008d62 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d137      	bne.n	8008d62 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	2334      	movs	r3, #52	; 0x34
 8008cfe:	fb03 f301 	mul.w	r3, r3, r1
 8008d02:	4413      	add	r3, r2
 8008d04:	3390      	adds	r3, #144	; 0x90
 8008d06:	2201      	movs	r2, #1
 8008d08:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d10:	4619      	mov	r1, r3
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	2334      	movs	r3, #52	; 0x34
 8008d16:	fb03 f301 	mul.w	r3, r3, r1
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3391      	adds	r3, #145	; 0x91
 8008d1e:	2202      	movs	r2, #2
 8008d20:	701a      	strb	r2, [r3, #0]
            break;
 8008d22:	e01e      	b.n	8008d62 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008d34:	e016      	b.n	8008d64 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	2201      	movs	r2, #1
 8008d42:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d4a:	2102      	movs	r1, #2
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
      break;
 8008d50:	e00c      	b.n	8008d6c <USBH_MSC_Process+0x514>
            break;
 8008d52:	bf00      	nop
 8008d54:	e00a      	b.n	8008d6c <USBH_MSC_Process+0x514>
            break;
 8008d56:	bf00      	nop
 8008d58:	e008      	b.n	8008d6c <USBH_MSC_Process+0x514>
            break;
 8008d5a:	bf00      	nop
 8008d5c:	e006      	b.n	8008d6c <USBH_MSC_Process+0x514>
            break;
 8008d5e:	bf00      	nop
 8008d60:	e004      	b.n	8008d6c <USBH_MSC_Process+0x514>
            break;
 8008d62:	bf00      	nop
      break;
 8008d64:	e002      	b.n	8008d6c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	75fb      	strb	r3, [r7, #23]
      break;
 8008d6a:	bf00      	nop
  }
  return error;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop

08008d78 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b088      	sub	sp, #32
 8008d92:	af02      	add	r7, sp, #8
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	460b      	mov	r3, r1
 8008d98:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	2134      	movs	r1, #52	; 0x34
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	4413      	add	r3, r2
 8008db8:	3390      	adds	r3, #144	; 0x90
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b06      	cmp	r3, #6
 8008dbe:	d004      	beq.n	8008dca <USBH_MSC_RdWrProcess+0x3c>
 8008dc0:	2b07      	cmp	r3, #7
 8008dc2:	d037      	beq.n	8008e34 <USBH_MSC_RdWrProcess+0xa6>
 8008dc4:	2b05      	cmp	r3, #5
 8008dc6:	d06a      	beq.n	8008e9e <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8008dc8:	e0a6      	b.n	8008f18 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008dca:	78f9      	ldrb	r1, [r7, #3]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fea6 	bl	8009b26 <USBH_MSC_SCSI_Read>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10b      	bne.n	8008dfc <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	2134      	movs	r1, #52	; 0x34
 8008dea:	fb01 f303 	mul.w	r3, r1, r3
 8008dee:	4413      	add	r3, r2
 8008df0:	3390      	adds	r3, #144	; 0x90
 8008df2:	2201      	movs	r2, #1
 8008df4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dfa:	e088      	b.n	8008f0e <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d109      	bne.n	8008e16 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	2134      	movs	r1, #52	; 0x34
 8008e08:	fb01 f303 	mul.w	r3, r1, r3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3390      	adds	r3, #144	; 0x90
 8008e10:	2205      	movs	r2, #5
 8008e12:	701a      	strb	r2, [r3, #0]
      break;
 8008e14:	e07b      	b.n	8008f0e <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d178      	bne.n	8008f0e <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	2134      	movs	r1, #52	; 0x34
 8008e22:	fb01 f303 	mul.w	r3, r1, r3
 8008e26:	4413      	add	r3, r2
 8008e28:	3390      	adds	r3, #144	; 0x90
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	75fb      	strb	r3, [r7, #23]
      break;
 8008e32:	e06c      	b.n	8008f0e <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008e34:	78f9      	ldrb	r1, [r7, #3]
 8008e36:	2300      	movs	r3, #0
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fe06 	bl	8009a50 <USBH_MSC_SCSI_Write>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10b      	bne.n	8008e66 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	2134      	movs	r1, #52	; 0x34
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	3390      	adds	r3, #144	; 0x90
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	75fb      	strb	r3, [r7, #23]
      break;
 8008e64:	e055      	b.n	8008f12 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d109      	bne.n	8008e80 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	2134      	movs	r1, #52	; 0x34
 8008e72:	fb01 f303 	mul.w	r3, r1, r3
 8008e76:	4413      	add	r3, r2
 8008e78:	3390      	adds	r3, #144	; 0x90
 8008e7a:	2205      	movs	r2, #5
 8008e7c:	701a      	strb	r2, [r3, #0]
      break;
 8008e7e:	e048      	b.n	8008f12 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d145      	bne.n	8008f12 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	2134      	movs	r1, #52	; 0x34
 8008e8c:	fb01 f303 	mul.w	r3, r1, r3
 8008e90:	4413      	add	r3, r2
 8008e92:	3390      	adds	r3, #144	; 0x90
 8008e94:	2208      	movs	r2, #8
 8008e96:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e9c:	e039      	b.n	8008f12 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	2234      	movs	r2, #52	; 0x34
 8008ea2:	fb02 f303 	mul.w	r3, r2, r3
 8008ea6:	3398      	adds	r3, #152	; 0x98
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4413      	add	r3, r2
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fd53 	bl	800995e <USBH_MSC_SCSI_RequestSense>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d113      	bne.n	8008eea <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	2134      	movs	r1, #52	; 0x34
 8008ec8:	fb01 f303 	mul.w	r3, r1, r3
 8008ecc:	4413      	add	r3, r2
 8008ece:	3390      	adds	r3, #144	; 0x90
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	2134      	movs	r1, #52	; 0x34
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	4413      	add	r3, r2
 8008ee0:	3391      	adds	r3, #145	; 0x91
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d012      	beq.n	8008f16 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d10f      	bne.n	8008f16 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	2134      	movs	r1, #52	; 0x34
 8008efc:	fb01 f303 	mul.w	r3, r1, r3
 8008f00:	4413      	add	r3, r2
 8008f02:	3390      	adds	r3, #144	; 0x90
 8008f04:	2208      	movs	r2, #8
 8008f06:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0c:	e003      	b.n	8008f16 <USBH_MSC_RdWrProcess+0x188>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e002      	b.n	8008f18 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008f16:	bf00      	nop

  }
  return error;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b0b      	cmp	r3, #11
 8008f40:	d10c      	bne.n	8008f5c <USBH_MSC_UnitIsReady+0x3a>
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	2134      	movs	r1, #52	; 0x34
 8008f48:	fb01 f303 	mul.w	r3, r1, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3391      	adds	r3, #145	; 0x91
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008f56:	2301      	movs	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
 8008f5a:	e001      	b.n	8008f60 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b086      	sub	sp, #24
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	460b      	mov	r3, r1
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b0b      	cmp	r3, #11
 8008f8e:	d10d      	bne.n	8008fac <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	2234      	movs	r2, #52	; 0x34
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
 8008f98:	3390      	adds	r3, #144	; 0x90
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	2234      	movs	r2, #52	; 0x34
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f005 f85a 	bl	800e05c <memcpy>
    return USBH_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e000      	b.n	8008fae <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008fac:	2302      	movs	r3, #2
  }
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b088      	sub	sp, #32
 8008fba:	af02      	add	r7, sp, #8
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00e      	beq.n	8008ffa <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008fe2:	2b0b      	cmp	r3, #11
 8008fe4:	d109      	bne.n	8008ffa <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	2134      	movs	r1, #52	; 0x34
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3390      	adds	r3, #144	; 0x90
 8008ff4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d001      	beq.n	8008ffe <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	e040      	b.n	8009080 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2206      	movs	r2, #6
 8009002:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	2134      	movs	r1, #52	; 0x34
 800900a:	fb01 f303 	mul.w	r3, r1, r3
 800900e:	4413      	add	r3, r2
 8009010:	3390      	adds	r3, #144	; 0x90
 8009012:	2206      	movs	r2, #6
 8009014:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	b29a      	uxth	r2, r3
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009020:	7af9      	ldrb	r1, [r7, #11]
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fd7b 	bl	8009b26 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009036:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009038:	e016      	b.n	8009068 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	1ad2      	subs	r2, r2, r3
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	f242 7110 	movw	r1, #10000	; 0x2710
 800904a:	fb01 f303 	mul.w	r3, r1, r3
 800904e:	429a      	cmp	r2, r3
 8009050:	d805      	bhi.n	800905e <USBH_MSC_Read+0xa8>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2201      	movs	r2, #1
 8009062:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009064:	2302      	movs	r3, #2
 8009066:	e00b      	b.n	8009080 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	4619      	mov	r1, r3
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f7ff fe8e 	bl	8008d8e <USBH_MSC_RdWrProcess>
 8009072:	4603      	mov	r3, r0
 8009074:	2b01      	cmp	r3, #1
 8009076:	d0e0      	beq.n	800903a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2201      	movs	r2, #1
 800907c:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af02      	add	r7, sp, #8
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	460b      	mov	r3, r1
 8009096:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00e      	beq.n	80090cc <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80090b4:	2b0b      	cmp	r3, #11
 80090b6:	d109      	bne.n	80090cc <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80090b8:	7afb      	ldrb	r3, [r7, #11]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	2134      	movs	r1, #52	; 0x34
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	4413      	add	r3, r2
 80090c4:	3390      	adds	r3, #144	; 0x90
 80090c6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d001      	beq.n	80090d0 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80090cc:	2302      	movs	r3, #2
 80090ce:	e040      	b.n	8009152 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2207      	movs	r2, #7
 80090d4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80090d6:	7afb      	ldrb	r3, [r7, #11]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	2134      	movs	r1, #52	; 0x34
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	4413      	add	r3, r2
 80090e2:	3390      	adds	r3, #144	; 0x90
 80090e4:	2207      	movs	r2, #7
 80090e6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80090f2:	7af9      	ldrb	r1, [r7, #11]
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 fca7 	bl	8009a50 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009108:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800910a:	e016      	b.n	800913a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad2      	subs	r2, r2, r3
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	f242 7110 	movw	r1, #10000	; 0x2710
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	429a      	cmp	r2, r3
 8009122:	d805      	bhi.n	8009130 <USBH_MSC_Write+0xa8>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d104      	bne.n	800913a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2201      	movs	r2, #1
 8009134:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009136:	2302      	movs	r3, #2
 8009138:	e00b      	b.n	8009152 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800913a:	7afb      	ldrb	r3, [r7, #11]
 800913c:	4619      	mov	r1, r3
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fe25 	bl	8008d8e <USBH_MSC_RdWrProcess>
 8009144:	4603      	mov	r3, r0
 8009146:	2b01      	cmp	r3, #1
 8009148:	d0e0      	beq.n	800910c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2201      	movs	r2, #1
 800914e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2221      	movs	r2, #33	; 0x21
 8009166:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	22ff      	movs	r2, #255	; 0xff
 800916c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fdae 	bl	800ace6 <USBH_CtlReq>
 800918a:	4603      	mov	r3, r0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	22a1      	movs	r2, #161	; 0xa1
 80091a2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	22fe      	movs	r2, #254	; 0xfe
 80091a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80091bc:	2201      	movs	r2, #1
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 fd90 	bl	800ace6 <USBH_CtlReq>
 80091c6:	4603      	mov	r3, r0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4a09      	ldr	r2, [pc, #36]	; (800920c <USBH_MSC_BOT_Init+0x3c>)
 80091e6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a09      	ldr	r2, [pc, #36]	; (8009210 <USBH_MSC_BOT_Init+0x40>)
 80091ec:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	43425355 	.word	0x43425355
 8009210:	20304050 	.word	0x20304050

08009214 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af02      	add	r7, sp, #8
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009220:	2301      	movs	r3, #1
 8009222:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009224:	2301      	movs	r3, #1
 8009226:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009228:	2301      	movs	r3, #1
 800922a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800922c:	2300      	movs	r3, #0
 800922e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009244:	3b01      	subs	r3, #1
 8009246:	2b0a      	cmp	r3, #10
 8009248:	f200 81a1 	bhi.w	800958e <USBH_MSC_BOT_Process+0x37a>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <USBH_MSC_BOT_Process+0x40>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009281 	.word	0x08009281
 8009258:	080092ab 	.word	0x080092ab
 800925c:	08009315 	.word	0x08009315
 8009260:	08009333 	.word	0x08009333
 8009264:	080093b7 	.word	0x080093b7
 8009268:	080093db 	.word	0x080093db
 800926c:	08009475 	.word	0x08009475
 8009270:	08009491 	.word	0x08009491
 8009274:	080094e3 	.word	0x080094e3
 8009278:	08009513 	.word	0x08009513
 800927c:	08009575 	.word	0x08009575
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	78fa      	ldrb	r2, [r7, #3]
 8009284:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	795a      	ldrb	r2, [r3, #5]
 800929a:	2301      	movs	r3, #1
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	4613      	mov	r3, r2
 80092a0:	221f      	movs	r2, #31
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 ff2f 	bl	800b106 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80092a8:	e180      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	795b      	ldrb	r3, [r3, #5]
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f004 fddb 	bl	800de6c <USBH_LL_GetURBState>
 80092b6:	4603      	mov	r3, r0
 80092b8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80092ba:	7d3b      	ldrb	r3, [r7, #20]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d118      	bne.n	80092f2 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00f      	beq.n	80092e8 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80092ce:	b25b      	sxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	da04      	bge.n	80092de <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	2203      	movs	r2, #3
 80092d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80092dc:	e159      	b.n	8009592 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	2205      	movs	r2, #5
 80092e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092e6:	e154      	b.n	8009592 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2207      	movs	r2, #7
 80092ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092f0:	e14f      	b.n	8009592 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092f2:	7d3b      	ldrb	r3, [r7, #20]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d104      	bne.n	8009302 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009300:	e147      	b.n	8009592 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8009302:	7d3b      	ldrb	r3, [r7, #20]
 8009304:	2b05      	cmp	r3, #5
 8009306:	f040 8144 	bne.w	8009592 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	220a      	movs	r2, #10
 800930e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009312:	e13e      	b.n	8009592 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	895a      	ldrh	r2, [r3, #10]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 ff14 	bl	800b150 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	2204      	movs	r2, #4
 800932c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009330:	e13c      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f004 fd97 	bl	800de6c <USBH_LL_GetURBState>
 800933e:	4603      	mov	r3, r0
 8009340:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009342:	7d3b      	ldrb	r3, [r7, #20]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d12d      	bne.n	80093a4 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	8952      	ldrh	r2, [r2, #10]
 8009350:	4293      	cmp	r3, r2
 8009352:	d910      	bls.n	8009376 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	8952      	ldrh	r2, [r2, #10]
 800935e:	441a      	add	r2, r3
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	8952      	ldrh	r2, [r2, #10]
 800936e:	1a9a      	subs	r2, r3, r2
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	65da      	str	r2, [r3, #92]	; 0x5c
 8009374:	e002      	b.n	800937c <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2200      	movs	r2, #0
 800937a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	895a      	ldrh	r2, [r3, #10]
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	791b      	ldrb	r3, [r3, #4]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 fedc 	bl	800b150 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009398:	e0fd      	b.n	8009596 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2207      	movs	r2, #7
 800939e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093a2:	e0f8      	b.n	8009596 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80093a4:	7d3b      	ldrb	r3, [r7, #20]
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	f040 80f5 	bne.w	8009596 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	2209      	movs	r2, #9
 80093b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093b4:	e0ef      	b.n	8009596 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	891a      	ldrh	r2, [r3, #8]
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	7958      	ldrb	r0, [r3, #5]
 80093c4:	2301      	movs	r3, #1
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	4603      	mov	r3, r0
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 fe9b 	bl	800b106 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2206      	movs	r2, #6
 80093d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093d8:	e0e8      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	795b      	ldrb	r3, [r3, #5]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f004 fd43 	bl	800de6c <USBH_LL_GetURBState>
 80093e6:	4603      	mov	r3, r0
 80093e8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80093ea:	7d3b      	ldrb	r3, [r7, #20]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d130      	bne.n	8009452 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	8912      	ldrh	r2, [r2, #8]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d910      	bls.n	800941e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	8912      	ldrh	r2, [r2, #8]
 8009406:	441a      	add	r2, r3
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	8912      	ldrh	r2, [r2, #8]
 8009416:	1a9a      	subs	r2, r3, r2
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	65da      	str	r2, [r3, #92]	; 0x5c
 800941c:	e002      	b.n	8009424 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2200      	movs	r2, #0
 8009422:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00d      	beq.n	8009448 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	891a      	ldrh	r2, [r3, #8]
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	7958      	ldrb	r0, [r3, #5]
 800943a:	2301      	movs	r3, #1
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	4603      	mov	r3, r0
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 fe60 	bl	800b106 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009446:	e0a8      	b.n	800959a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	2207      	movs	r2, #7
 800944c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009450:	e0a3      	b.n	800959a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009452:	7d3b      	ldrb	r3, [r7, #20]
 8009454:	2b02      	cmp	r3, #2
 8009456:	d104      	bne.n	8009462 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	2205      	movs	r2, #5
 800945c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009460:	e09b      	b.n	800959a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009462:	7d3b      	ldrb	r3, [r7, #20]
 8009464:	2b05      	cmp	r3, #5
 8009466:	f040 8098 	bne.w	800959a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	220a      	movs	r2, #10
 800946e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009472:	e092      	b.n	800959a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	791b      	ldrb	r3, [r3, #4]
 800947e:	220d      	movs	r2, #13
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 fe65 	bl	800b150 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2208      	movs	r2, #8
 800948a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800948e:	e08d      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	791b      	ldrb	r3, [r3, #4]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f004 fce8 	bl	800de6c <USBH_LL_GetURBState>
 800949c:	4603      	mov	r3, r0
 800949e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80094a0:	7d3b      	ldrb	r3, [r7, #20]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d115      	bne.n	80094d2 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f8aa 	bl	8009610 <USBH_MSC_DecodeCSW>
 80094bc:	4603      	mov	r3, r0
 80094be:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80094c0:	7d7b      	ldrb	r3, [r7, #21]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d102      	bne.n	80094cc <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80094ca:	e068      	b.n	800959e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 80094cc:	2302      	movs	r3, #2
 80094ce:	75fb      	strb	r3, [r7, #23]
      break;
 80094d0:	e065      	b.n	800959e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 80094d2:	7d3b      	ldrb	r3, [r7, #20]
 80094d4:	2b05      	cmp	r3, #5
 80094d6:	d162      	bne.n	800959e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2209      	movs	r2, #9
 80094dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094e0:	e05d      	b.n	800959e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	2200      	movs	r2, #0
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f865 	bl	80095b8 <USBH_MSC_BOT_Abort>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80094f2:	7dbb      	ldrb	r3, [r7, #22]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d104      	bne.n	8009502 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2207      	movs	r2, #7
 80094fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009500:	e04f      	b.n	80095a2 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009502:	7dbb      	ldrb	r3, [r7, #22]
 8009504:	2b04      	cmp	r3, #4
 8009506:	d14c      	bne.n	80095a2 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	220b      	movs	r2, #11
 800950c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009510:	e047      	b.n	80095a2 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	2201      	movs	r2, #1
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f84d 	bl	80095b8 <USBH_MSC_BOT_Abort>
 800951e:	4603      	mov	r3, r0
 8009520:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009522:	7dbb      	ldrb	r3, [r7, #22]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d11d      	bne.n	8009564 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	795b      	ldrb	r3, [r3, #5]
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f004 fcf0 	bl	800df14 <USBH_LL_GetToggle>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	7959      	ldrb	r1, [r3, #5]
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	f1c3 0301 	rsb	r3, r3, #1
 8009542:	b2db      	uxtb	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f004 fcb1 	bl	800deae <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	791b      	ldrb	r3, [r3, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f004 fcaa 	bl	800deae <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2209      	movs	r2, #9
 800955e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009562:	e020      	b.n	80095a6 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009564:	7dbb      	ldrb	r3, [r7, #22]
 8009566:	2b04      	cmp	r3, #4
 8009568:	d11d      	bne.n	80095a6 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	220b      	movs	r2, #11
 800956e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009572:	e018      	b.n	80095a6 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff fdf0 	bl	800915a <USBH_MSC_BOT_REQ_Reset>
 800957a:	4603      	mov	r3, r0
 800957c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d112      	bne.n	80095aa <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800958c:	e00d      	b.n	80095aa <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800958e:	bf00      	nop
 8009590:	e00c      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>
      break;
 8009592:	bf00      	nop
 8009594:	e00a      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>
      break;
 8009596:	bf00      	nop
 8009598:	e008      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>
      break;
 800959a:	bf00      	nop
 800959c:	e006      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>
      break;
 800959e:	bf00      	nop
 80095a0:	e004      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>
      break;
 80095a2:	bf00      	nop
 80095a4:	e002      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>
      break;
 80095a6:	bf00      	nop
 80095a8:	e000      	b.n	80095ac <USBH_MSC_BOT_Process+0x398>
      break;
 80095aa:	bf00      	nop
  }
  return status;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop

080095b8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
 80095c4:	4613      	mov	r3, r2
 80095c6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80095c8:	2302      	movs	r3, #2
 80095ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80095d6:	78bb      	ldrb	r3, [r7, #2]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <USBH_MSC_BOT_Abort+0x2a>
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d009      	beq.n	80095f4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80095e0:	e011      	b.n	8009606 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	79db      	ldrb	r3, [r3, #7]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f99c 	bl	800a926 <USBH_ClrFeature>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73fb      	strb	r3, [r7, #15]
      break;
 80095f2:	e008      	b.n	8009606 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	799b      	ldrb	r3, [r3, #6]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 f993 	bl	800a926 <USBH_ClrFeature>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]
      break;
 8009604:	bf00      	nop
  }
  return status;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009622:	2301      	movs	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	791b      	ldrb	r3, [r3, #4]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f004 fb8b 	bl	800dd48 <USBH_LL_GetLastXferSize>
 8009632:	4603      	mov	r3, r0
 8009634:	2b0d      	cmp	r3, #13
 8009636:	d002      	beq.n	800963e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009638:	2302      	movs	r3, #2
 800963a:	73fb      	strb	r3, [r7, #15]
 800963c:	e024      	b.n	8009688 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009642:	4a14      	ldr	r2, [pc, #80]	; (8009694 <USBH_MSC_DecodeCSW+0x84>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d11d      	bne.n	8009684 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009650:	429a      	cmp	r2, r3
 8009652:	d119      	bne.n	8009688 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
 8009662:	e011      	b.n	8009688 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800966a:	2b01      	cmp	r3, #1
 800966c:	d102      	bne.n	8009674 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800966e:	2301      	movs	r3, #1
 8009670:	73fb      	strb	r3, [r7, #15]
 8009672:	e009      	b.n	8009688 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800967a:	2b02      	cmp	r3, #2
 800967c:	d104      	bne.n	8009688 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800967e:	2302      	movs	r3, #2
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e001      	b.n	8009688 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009684:	2302      	movs	r3, #2
 8009686:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	53425355 	.word	0x53425355

08009698 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80096a4:	2302      	movs	r3, #2
 80096a6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d002      	beq.n	80096c2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d021      	beq.n	8009704 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80096c0:	e028      	b.n	8009714 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2200      	movs	r2, #0
 80096c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	220a      	movs	r2, #10
 80096d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	3363      	adds	r3, #99	; 0x63
 80096dc:	2210      	movs	r2, #16
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f004 fcc6 	bl	800e072 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2202      	movs	r2, #2
 80096fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80096fe:	2301      	movs	r3, #1
 8009700:	73fb      	strb	r3, [r7, #15]
      break;
 8009702:	e007      	b.n	8009714 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fd83 	bl	8009214 <USBH_MSC_BOT_Process>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]
      break;
 8009712:	bf00      	nop
  }

  return error;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b086      	sub	sp, #24
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	460b      	mov	r3, r1
 8009728:	607a      	str	r2, [r7, #4]
 800972a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800972c:	2301      	movs	r3, #1
 800972e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009740:	2b01      	cmp	r3, #1
 8009742:	d002      	beq.n	800974a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009744:	2b02      	cmp	r3, #2
 8009746:	d027      	beq.n	8009798 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009748:	e05f      	b.n	800980a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2208      	movs	r2, #8
 800974e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2280      	movs	r2, #128	; 0x80
 8009754:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	220a      	movs	r2, #10
 800975c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3363      	adds	r3, #99	; 0x63
 8009764:	2210      	movs	r2, #16
 8009766:	2100      	movs	r1, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f004 fc82 	bl	800e072 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2225      	movs	r2, #37	; 0x25
 8009772:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	2202      	movs	r2, #2
 8009782:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f103 0210 	add.w	r2, r3, #16
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009792:	2301      	movs	r3, #1
 8009794:	75fb      	strb	r3, [r7, #23]
      break;
 8009796:	e038      	b.n	800980a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7ff fd39 	bl	8009214 <USBH_MSC_BOT_Process>
 80097a2:	4603      	mov	r3, r0
 80097a4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d12d      	bne.n	8009808 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b2:	3303      	adds	r3, #3
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097be:	3302      	adds	r3, #2
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	021b      	lsls	r3, r3, #8
 80097c4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097cc:	3301      	adds	r3, #1
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80097d2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	061b      	lsls	r3, r3, #24
 80097de:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ea:	3307      	adds	r3, #7
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f6:	3306      	adds	r3, #6
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	b29b      	uxth	r3, r3
 8009800:	4313      	orrs	r3, r2
 8009802:	b29a      	uxth	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	809a      	strh	r2, [r3, #4]
      break;
 8009808:	bf00      	nop
  }

  return error;
 800980a:	7dfb      	ldrb	r3, [r7, #23]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	460b      	mov	r3, r1
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009822:	2302      	movs	r3, #2
 8009824:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009836:	2b01      	cmp	r3, #1
 8009838:	d002      	beq.n	8009840 <USBH_MSC_SCSI_Inquiry+0x2c>
 800983a:	2b02      	cmp	r3, #2
 800983c:	d03d      	beq.n	80098ba <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800983e:	e089      	b.n	8009954 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	2224      	movs	r2, #36	; 0x24
 8009844:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2280      	movs	r2, #128	; 0x80
 800984a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	220a      	movs	r2, #10
 8009852:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	3363      	adds	r3, #99	; 0x63
 800985a:	220a      	movs	r2, #10
 800985c:	2100      	movs	r1, #0
 800985e:	4618      	mov	r0, r3
 8009860:	f004 fc07 	bl	800e072 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	2212      	movs	r2, #18
 8009868:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	015b      	lsls	r3, r3, #5
 8009870:	b2da      	uxtb	r2, r3
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2224      	movs	r2, #36	; 0x24
 800988c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f103 0210 	add.w	r2, r3, #16
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80098b4:	2301      	movs	r3, #1
 80098b6:	75fb      	strb	r3, [r7, #23]
      break;
 80098b8:	e04c      	b.n	8009954 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80098ba:	7afb      	ldrb	r3, [r7, #11]
 80098bc:	4619      	mov	r1, r3
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff fca8 	bl	8009214 <USBH_MSC_BOT_Process>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d141      	bne.n	8009952 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80098ce:	2222      	movs	r2, #34	; 0x22
 80098d0:	2100      	movs	r1, #0
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f004 fbcd 	bl	800e072 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009900:	3301      	adds	r3, #1
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	b25b      	sxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	da03      	bge.n	8009912 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	709a      	strb	r2, [r3, #2]
 8009910:	e002      	b.n	8009918 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	1cd8      	adds	r0, r3, #3
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009922:	3308      	adds	r3, #8
 8009924:	2208      	movs	r2, #8
 8009926:	4619      	mov	r1, r3
 8009928:	f004 fb98 	bl	800e05c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f103 000c 	add.w	r0, r3, #12
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009938:	3310      	adds	r3, #16
 800993a:	2210      	movs	r2, #16
 800993c:	4619      	mov	r1, r3
 800993e:	f004 fb8d 	bl	800e05c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	331d      	adds	r3, #29
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800994c:	3220      	adds	r2, #32
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	601a      	str	r2, [r3, #0]
      break;
 8009952:	bf00      	nop
  }

  return error;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	460b      	mov	r3, r1
 8009968:	607a      	str	r2, [r7, #4]
 800996a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800996c:	2302      	movs	r3, #2
 800996e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009980:	2b01      	cmp	r3, #1
 8009982:	d002      	beq.n	800998a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009984:	2b02      	cmp	r3, #2
 8009986:	d03d      	beq.n	8009a04 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009988:	e05d      	b.n	8009a46 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	220e      	movs	r2, #14
 800998e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	2280      	movs	r2, #128	; 0x80
 8009994:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	220a      	movs	r2, #10
 800999c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	3363      	adds	r3, #99	; 0x63
 80099a4:	2210      	movs	r2, #16
 80099a6:	2100      	movs	r1, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f004 fb62 	bl	800e072 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2203      	movs	r2, #3
 80099b2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	015b      	lsls	r3, r3, #5
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	220e      	movs	r2, #14
 80099d6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2202      	movs	r2, #2
 80099ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f103 0210 	add.w	r2, r3, #16
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80099fe:	2301      	movs	r3, #1
 8009a00:	75fb      	strb	r3, [r7, #23]
      break;
 8009a02:	e020      	b.n	8009a46 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a04:	7afb      	ldrb	r3, [r7, #11]
 8009a06:	4619      	mov	r1, r3
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f7ff fc03 	bl	8009214 <USBH_MSC_BOT_Process>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d115      	bne.n	8009a44 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a1e:	3302      	adds	r3, #2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	f003 030f 	and.w	r3, r3, #15
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a32:	7b1a      	ldrb	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a3e:	7b5a      	ldrb	r2, [r3, #13]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	709a      	strb	r2, [r3, #2]
      break;
 8009a44:	bf00      	nop
  }

  return error;
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009a60:	2302      	movs	r3, #2
 8009a62:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d002      	beq.n	8009a7e <USBH_MSC_SCSI_Write+0x2e>
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d047      	beq.n	8009b0c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009a7c:	e04e      	b.n	8009b1c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009a84:	461a      	mov	r2, r3
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	fb03 f202 	mul.w	r2, r3, r2
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	220a      	movs	r2, #10
 8009a9c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	3363      	adds	r3, #99	; 0x63
 8009aa4:	2210      	movs	r2, #16
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f004 fae2 	bl	800e072 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	222a      	movs	r2, #42	; 0x2a
 8009ab2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009ab6:	79fa      	ldrb	r2, [r7, #7]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009abe:	79ba      	ldrb	r2, [r7, #6]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009ac6:	797a      	ldrb	r2, [r7, #5]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ace:	1d3b      	adds	r3, r7, #4
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ad8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ae2:	f107 0320 	add.w	r3, r7, #32
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2202      	movs	r2, #2
 8009afa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b06:	2301      	movs	r3, #1
 8009b08:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0a:	e007      	b.n	8009b1c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7ff fb7f 	bl	8009214 <USBH_MSC_BOT_Process>
 8009b16:	4603      	mov	r3, r0
 8009b18:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1a:	bf00      	nop
  }

  return error;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b086      	sub	sp, #24
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	460b      	mov	r3, r1
 8009b34:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009b36:	2302      	movs	r3, #2
 8009b38:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d002      	beq.n	8009b54 <USBH_MSC_SCSI_Read+0x2e>
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d047      	beq.n	8009be2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009b52:	e04e      	b.n	8009bf2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	fb03 f202 	mul.w	r2, r3, r2
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2280      	movs	r2, #128	; 0x80
 8009b6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	220a      	movs	r2, #10
 8009b72:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	3363      	adds	r3, #99	; 0x63
 8009b7a:	2210      	movs	r2, #16
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f004 fa77 	bl	800e072 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	2228      	movs	r2, #40	; 0x28
 8009b88:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009b8c:	79fa      	ldrb	r2, [r7, #7]
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009b94:	79ba      	ldrb	r2, [r7, #6]
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009b9c:	797a      	ldrb	r2, [r7, #5]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ba4:	1d3b      	adds	r3, r7, #4
 8009ba6:	781a      	ldrb	r2, [r3, #0]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009bae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009bb8:	f107 0320 	add.w	r3, r7, #32
 8009bbc:	781a      	ldrb	r2, [r3, #0]
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	75fb      	strb	r3, [r7, #23]
      break;
 8009be0:	e007      	b.n	8009bf2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	4619      	mov	r1, r3
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f7ff fb14 	bl	8009214 <USBH_MSC_BOT_Process>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf0:	bf00      	nop
  }

  return error;
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	4613      	mov	r3, r2
 8009c08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009c10:	2302      	movs	r3, #2
 8009c12:	e029      	b.n	8009c68 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	79fa      	ldrb	r2, [r7, #7]
 8009c18:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 f81f 	bl	8009c70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f003 ffbf 	bl	800dbe4 <USBH_LL_Init>

  return USBH_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e009      	b.n	8009c96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	33e0      	adds	r3, #224	; 0xe0
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3301      	adds	r3, #1
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b0e      	cmp	r3, #14
 8009c9a:	d9f2      	bls.n	8009c82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e009      	b.n	8009cb6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cbc:	d3f1      	bcc.n	8009ca2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2240      	movs	r2, #64	; 0x40
 8009ce2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d016      	beq.n	8009d5a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10e      	bne.n	8009d54 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d3c:	1c59      	adds	r1, r3, #1
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	33de      	adds	r3, #222	; 0xde
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]
 8009d52:	e004      	b.n	8009d5e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009d54:	2302      	movs	r3, #2
 8009d56:	73fb      	strb	r3, [r7, #15]
 8009d58:	e001      	b.n	8009d5e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009d82:	78fa      	ldrb	r2, [r7, #3]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d204      	bcs.n	8009d92 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	78fa      	ldrb	r2, [r7, #3]
 8009d8c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009d90:	e001      	b.n	8009d96 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d92:	2302      	movs	r3, #2
 8009d94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	4608      	mov	r0, r1
 8009dae:	4611      	mov	r1, r2
 8009db0:	461a      	mov	r2, r3
 8009db2:	4603      	mov	r3, r0
 8009db4:	70fb      	strb	r3, [r7, #3]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70bb      	strb	r3, [r7, #2]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009dcc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009dce:	e025      	b.n	8009e1c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	221a      	movs	r2, #26
 8009dd4:	fb02 f303 	mul.w	r3, r2, r3
 8009dd8:	3308      	adds	r3, #8
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4413      	add	r3, r2
 8009dde:	3302      	adds	r3, #2
 8009de0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	795b      	ldrb	r3, [r3, #5]
 8009de6:	78fa      	ldrb	r2, [r7, #3]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d002      	beq.n	8009df2 <USBH_FindInterface+0x4e>
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	2bff      	cmp	r3, #255	; 0xff
 8009df0:	d111      	bne.n	8009e16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009df6:	78ba      	ldrb	r2, [r7, #2]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d002      	beq.n	8009e02 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dfc:	78bb      	ldrb	r3, [r7, #2]
 8009dfe:	2bff      	cmp	r3, #255	; 0xff
 8009e00:	d109      	bne.n	8009e16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e06:	787a      	ldrb	r2, [r7, #1]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d002      	beq.n	8009e12 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e0c:	787b      	ldrb	r3, [r7, #1]
 8009e0e:	2bff      	cmp	r3, #255	; 0xff
 8009e10:	d101      	bne.n	8009e16 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	e006      	b.n	8009e24 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d9d6      	bls.n	8009dd0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009e22:	23ff      	movs	r3, #255	; 0xff
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f003 ff0f 	bl	800dc5c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009e3e:	2101      	movs	r1, #1
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f004 f826 	bl	800de92 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af04      	add	r7, sp, #16
 8009e56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009e58:	2302      	movs	r3, #2
 8009e5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d102      	bne.n	8009e72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2203      	movs	r2, #3
 8009e70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b0b      	cmp	r3, #11
 8009e7a:	f200 81b3 	bhi.w	800a1e4 <USBH_Process+0x394>
 8009e7e:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <USBH_Process+0x34>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009eb5 	.word	0x08009eb5
 8009e88:	08009ee7 	.word	0x08009ee7
 8009e8c:	08009f4f 	.word	0x08009f4f
 8009e90:	0800a17f 	.word	0x0800a17f
 8009e94:	0800a1e5 	.word	0x0800a1e5
 8009e98:	08009ff3 	.word	0x08009ff3
 8009e9c:	0800a125 	.word	0x0800a125
 8009ea0:	0800a029 	.word	0x0800a029
 8009ea4:	0800a049 	.word	0x0800a049
 8009ea8:	0800a069 	.word	0x0800a069
 8009eac:	0800a097 	.word	0x0800a097
 8009eb0:	0800a167 	.word	0x0800a167
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 8193 	beq.w	800a1e8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009ec8:	20c8      	movs	r0, #200	; 0xc8
 8009eca:	f004 f856 	bl	800df7a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f003 ff1f 	bl	800dd12 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009ee4:	e180      	b.n	800a1e8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d107      	bne.n	8009f00 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2202      	movs	r2, #2
 8009efc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009efe:	e182      	b.n	800a206 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f0a:	d914      	bls.n	8009f36 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f12:	3301      	adds	r3, #1
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d903      	bls.n	8009f2e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	220d      	movs	r2, #13
 8009f2a:	701a      	strb	r2, [r3, #0]
      break;
 8009f2c:	e16b      	b.n	800a206 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
      break;
 8009f34:	e167      	b.n	800a206 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009f3c:	f103 020a 	add.w	r2, r3, #10
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009f46:	200a      	movs	r0, #10
 8009f48:	f004 f817 	bl	800df7a <USBH_Delay>
      break;
 8009f4c:	e15b      	b.n	800a206 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d005      	beq.n	8009f64 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f5e:	2104      	movs	r1, #4
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f64:	2064      	movs	r0, #100	; 0x64
 8009f66:	f004 f808 	bl	800df7a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f003 feac 	bl	800dcc8 <USBH_LL_GetSpeed>
 8009f70:	4603      	mov	r3, r0
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2205      	movs	r2, #5
 8009f7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f80:	2100      	movs	r1, #0
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 f931 	bl	800b1ea <USBH_AllocPipe>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f90:	2180      	movs	r1, #128	; 0x80
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 f929 	bl	800b1ea <USBH_AllocPipe>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	7919      	ldrb	r1, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fb4:	b292      	uxth	r2, r2
 8009fb6:	9202      	str	r2, [sp, #8]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2280      	movs	r2, #128	; 0x80
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 f8e2 	bl	800b18c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7959      	ldrb	r1, [r3, #5]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fdc:	b292      	uxth	r2, r2
 8009fde:	9202      	str	r2, [sp, #8]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	9201      	str	r2, [sp, #4]
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2200      	movs	r2, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 f8ce 	bl	800b18c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ff0:	e109      	b.n	800a206 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f90c 	bl	800a210 <USBH_HandleEnum>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	f040 80f3 	bne.w	800a1ec <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a014:	2b01      	cmp	r3, #1
 800a016:	d103      	bne.n	800a020 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2208      	movs	r2, #8
 800a01c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a01e:	e0e5      	b.n	800a1ec <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2207      	movs	r2, #7
 800a024:	701a      	strb	r2, [r3, #0]
      break;
 800a026:	e0e1      	b.n	800a1ec <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80de 	beq.w	800a1f0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a03a:	2101      	movs	r1, #1
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2208      	movs	r2, #8
 800a044:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a046:	e0d3      	b.n	800a1f0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a04e:	b29b      	uxth	r3, r3
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fc20 	bl	800a898 <USBH_SetCfg>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f040 80ca 	bne.w	800a1f4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2209      	movs	r2, #9
 800a064:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a066:	e0c5      	b.n	800a1f4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a06e:	f003 0320 	and.w	r3, r3, #32
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00b      	beq.n	800a08e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a076:	2101      	movs	r1, #1
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fc30 	bl	800a8de <USBH_SetFeature>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 80b9 	bne.w	800a1f8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	220a      	movs	r2, #10
 800a08a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a08c:	e0b4      	b.n	800a1f8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	220a      	movs	r2, #10
 800a092:	701a      	strb	r2, [r3, #0]
      break;
 800a094:	e0b0      	b.n	800a1f8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 80ad 	beq.w	800a1fc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]
 800a0ae:	e016      	b.n	800a0de <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a0b0:	7bfa      	ldrb	r2, [r7, #15]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32de      	adds	r2, #222	; 0xde
 800a0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ba:	791a      	ldrb	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d108      	bne.n	800a0d8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a0c6:	7bfa      	ldrb	r2, [r7, #15]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	32de      	adds	r2, #222	; 0xde
 800a0cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a0d6:	e005      	b.n	800a0e4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0e5      	beq.n	800a0b0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d016      	beq.n	800a11c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	4798      	blx	r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2206      	movs	r2, #6
 800a104:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a10c:	2103      	movs	r1, #3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a112:	e073      	b.n	800a1fc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	220d      	movs	r2, #13
 800a118:	701a      	strb	r2, [r3, #0]
      break;
 800a11a:	e06f      	b.n	800a1fc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	220d      	movs	r2, #13
 800a120:	701a      	strb	r2, [r3, #0]
      break;
 800a122:	e06b      	b.n	800a1fc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d017      	beq.n	800a15e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	4798      	blx	r3
 800a13a:	4603      	mov	r3, r0
 800a13c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d103      	bne.n	800a14e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	220b      	movs	r2, #11
 800a14a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a14c:	e058      	b.n	800a200 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b02      	cmp	r3, #2
 800a154:	d154      	bne.n	800a200 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	220d      	movs	r2, #13
 800a15a:	701a      	strb	r2, [r3, #0]
      break;
 800a15c:	e050      	b.n	800a200 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	220d      	movs	r2, #13
 800a162:	701a      	strb	r2, [r3, #0]
      break;
 800a164:	e04c      	b.n	800a200 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d049      	beq.n	800a204 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	4798      	blx	r3
      }
      break;
 800a17c:	e042      	b.n	800a204 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff fd72 	bl	8009c70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1ba:	2105      	movs	r1, #5
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d107      	bne.n	800a1dc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff fe2b 	bl	8009e30 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1da:	e014      	b.n	800a206 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f003 fd3d 	bl	800dc5c <USBH_LL_Start>
      break;
 800a1e2:	e010      	b.n	800a206 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a1e4:	bf00      	nop
 800a1e6:	e00e      	b.n	800a206 <USBH_Process+0x3b6>
      break;
 800a1e8:	bf00      	nop
 800a1ea:	e00c      	b.n	800a206 <USBH_Process+0x3b6>
      break;
 800a1ec:	bf00      	nop
 800a1ee:	e00a      	b.n	800a206 <USBH_Process+0x3b6>
    break;
 800a1f0:	bf00      	nop
 800a1f2:	e008      	b.n	800a206 <USBH_Process+0x3b6>
      break;
 800a1f4:	bf00      	nop
 800a1f6:	e006      	b.n	800a206 <USBH_Process+0x3b6>
      break;
 800a1f8:	bf00      	nop
 800a1fa:	e004      	b.n	800a206 <USBH_Process+0x3b6>
      break;
 800a1fc:	bf00      	nop
 800a1fe:	e002      	b.n	800a206 <USBH_Process+0x3b6>
      break;
 800a200:	bf00      	nop
 800a202:	e000      	b.n	800a206 <USBH_Process+0x3b6>
      break;
 800a204:	bf00      	nop
  }
  return USBH_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af04      	add	r7, sp, #16
 800a216:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a218:	2301      	movs	r3, #1
 800a21a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a21c:	2301      	movs	r3, #1
 800a21e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	785b      	ldrb	r3, [r3, #1]
 800a224:	2b07      	cmp	r3, #7
 800a226:	f200 81c1 	bhi.w	800a5ac <USBH_HandleEnum+0x39c>
 800a22a:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <USBH_HandleEnum+0x20>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a251 	.word	0x0800a251
 800a234:	0800a30f 	.word	0x0800a30f
 800a238:	0800a379 	.word	0x0800a379
 800a23c:	0800a407 	.word	0x0800a407
 800a240:	0800a471 	.word	0x0800a471
 800a244:	0800a4e1 	.word	0x0800a4e1
 800a248:	0800a527 	.word	0x0800a527
 800a24c:	0800a56d 	.word	0x0800a56d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a250:	2108      	movs	r1, #8
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa50 	bl	800a6f8 <USBH_Get_DevDesc>
 800a258:	4603      	mov	r3, r0
 800a25a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d130      	bne.n	800a2c4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	7919      	ldrb	r1, [r3, #4]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a286:	b292      	uxth	r2, r2
 800a288:	9202      	str	r2, [sp, #8]
 800a28a:	2200      	movs	r2, #0
 800a28c:	9201      	str	r2, [sp, #4]
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	4603      	mov	r3, r0
 800a292:	2280      	movs	r2, #128	; 0x80
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 ff79 	bl	800b18c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7959      	ldrb	r1, [r3, #5]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2ae:	b292      	uxth	r2, r2
 800a2b0:	9202      	str	r2, [sp, #8]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	9201      	str	r2, [sp, #4]
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 ff65 	bl	800b18c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a2c2:	e175      	b.n	800a5b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	f040 8172 	bne.w	800a5b0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d903      	bls.n	800a2ee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	220d      	movs	r2, #13
 800a2ea:	701a      	strb	r2, [r3, #0]
      break;
 800a2ec:	e160      	b.n	800a5b0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	795b      	ldrb	r3, [r3, #5]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 ff99 	bl	800b22c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	791b      	ldrb	r3, [r3, #4]
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 ff93 	bl	800b22c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
      break;
 800a30c:	e150      	b.n	800a5b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a30e:	2112      	movs	r1, #18
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f9f1 	bl	800a6f8 <USBH_Get_DevDesc>
 800a316:	4603      	mov	r3, r0
 800a318:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d103      	bne.n	800a328 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a326:	e145      	b.n	800a5b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	f040 8142 	bne.w	800a5b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a336:	3301      	adds	r3, #1
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a346:	2b03      	cmp	r3, #3
 800a348:	d903      	bls.n	800a352 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	220d      	movs	r2, #13
 800a34e:	701a      	strb	r2, [r3, #0]
      break;
 800a350:	e130      	b.n	800a5b4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	795b      	ldrb	r3, [r3, #5]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 ff67 	bl	800b22c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	791b      	ldrb	r3, [r3, #4]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 ff61 	bl	800b22c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	701a      	strb	r2, [r3, #0]
      break;
 800a376:	e11d      	b.n	800a5b4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a378:	2101      	movs	r1, #1
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa68 	bl	800a850 <USBH_SetAddress>
 800a380:	4603      	mov	r3, r0
 800a382:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d132      	bne.n	800a3f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a38a:	2002      	movs	r0, #2
 800a38c:	f003 fdf5 	bl	800df7a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2203      	movs	r2, #3
 800a39c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	7919      	ldrb	r1, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	9202      	str	r2, [sp, #8]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	9201      	str	r2, [sp, #4]
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2280      	movs	r2, #128	; 0x80
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fee3 	bl	800b18c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7959      	ldrb	r1, [r3, #5]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3da:	b292      	uxth	r2, r2
 800a3dc:	9202      	str	r2, [sp, #8]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	9201      	str	r2, [sp, #4]
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fecf 	bl	800b18c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a3ee:	e0e3      	b.n	800a5b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	f040 80e0 	bne.w	800a5b8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	220d      	movs	r2, #13
 800a3fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	705a      	strb	r2, [r3, #1]
      break;
 800a404:	e0d8      	b.n	800a5b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a406:	2109      	movs	r1, #9
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f99d 	bl	800a748 <USBH_Get_CfgDesc>
 800a40e:	4603      	mov	r3, r0
 800a410:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d103      	bne.n	800a420 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2204      	movs	r2, #4
 800a41c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a41e:	e0cd      	b.n	800a5bc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a420:	7bbb      	ldrb	r3, [r7, #14]
 800a422:	2b03      	cmp	r3, #3
 800a424:	f040 80ca 	bne.w	800a5bc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a42e:	3301      	adds	r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d903      	bls.n	800a44a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	220d      	movs	r2, #13
 800a446:	701a      	strb	r2, [r3, #0]
      break;
 800a448:	e0b8      	b.n	800a5bc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	795b      	ldrb	r3, [r3, #5]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 feeb 	bl	800b22c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	791b      	ldrb	r3, [r3, #4]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fee5 	bl	800b22c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	701a      	strb	r2, [r3, #0]
      break;
 800a46e:	e0a5      	b.n	800a5bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f965 	bl	800a748 <USBH_Get_CfgDesc>
 800a47e:	4603      	mov	r3, r0
 800a480:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d103      	bne.n	800a490 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2205      	movs	r2, #5
 800a48c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a48e:	e097      	b.n	800a5c0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	2b03      	cmp	r3, #3
 800a494:	f040 8094 	bne.w	800a5c0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a49e:	3301      	adds	r3, #1
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d903      	bls.n	800a4ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	220d      	movs	r2, #13
 800a4b6:	701a      	strb	r2, [r3, #0]
      break;
 800a4b8:	e082      	b.n	800a5c0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	795b      	ldrb	r3, [r3, #5]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 feb3 	bl	800b22c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	791b      	ldrb	r3, [r3, #4]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fead 	bl	800b22c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
      break;
 800a4de:	e06f      	b.n	800a5c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d019      	beq.n	800a51e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4f6:	23ff      	movs	r3, #255	; 0xff
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f949 	bl	800a790 <USBH_Get_StringDesc>
 800a4fe:	4603      	mov	r3, r0
 800a500:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a502:	7bbb      	ldrb	r3, [r7, #14]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d103      	bne.n	800a510 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2206      	movs	r2, #6
 800a50c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a50e:	e059      	b.n	800a5c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a510:	7bbb      	ldrb	r3, [r7, #14]
 800a512:	2b03      	cmp	r3, #3
 800a514:	d156      	bne.n	800a5c4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2206      	movs	r2, #6
 800a51a:	705a      	strb	r2, [r3, #1]
      break;
 800a51c:	e052      	b.n	800a5c4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2206      	movs	r2, #6
 800a522:	705a      	strb	r2, [r3, #1]
      break;
 800a524:	e04e      	b.n	800a5c4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d019      	beq.n	800a564 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a53c:	23ff      	movs	r3, #255	; 0xff
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f926 	bl	800a790 <USBH_Get_StringDesc>
 800a544:	4603      	mov	r3, r0
 800a546:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2207      	movs	r2, #7
 800a552:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a554:	e038      	b.n	800a5c8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a556:	7bbb      	ldrb	r3, [r7, #14]
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d135      	bne.n	800a5c8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2207      	movs	r2, #7
 800a560:	705a      	strb	r2, [r3, #1]
      break;
 800a562:	e031      	b.n	800a5c8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2207      	movs	r2, #7
 800a568:	705a      	strb	r2, [r3, #1]
      break;
 800a56a:	e02d      	b.n	800a5c8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a572:	2b00      	cmp	r3, #0
 800a574:	d017      	beq.n	800a5a6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a582:	23ff      	movs	r3, #255	; 0xff
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f903 	bl	800a790 <USBH_Get_StringDesc>
 800a58a:	4603      	mov	r3, r0
 800a58c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a58e:	7bbb      	ldrb	r3, [r7, #14]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a598:	e018      	b.n	800a5cc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d115      	bne.n	800a5cc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a4:	e012      	b.n	800a5cc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5aa:	e00f      	b.n	800a5cc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a5ac:	bf00      	nop
 800a5ae:	e00e      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5b0:	bf00      	nop
 800a5b2:	e00c      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5b4:	bf00      	nop
 800a5b6:	e00a      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5b8:	bf00      	nop
 800a5ba:	e008      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5bc:	bf00      	nop
 800a5be:	e006      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5c0:	bf00      	nop
 800a5c2:	e004      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5c4:	bf00      	nop
 800a5c6:	e002      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5c8:	bf00      	nop
 800a5ca:	e000      	b.n	800a5ce <USBH_HandleEnum+0x3be>
      break;
 800a5cc:	bf00      	nop
  }
  return Status;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f804 	bl	800a61a <USBH_HandleSof>
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b0b      	cmp	r3, #11
 800a62a:	d10a      	bne.n	800a642 <USBH_HandleSof+0x28>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	4798      	blx	r3
  }
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b083      	sub	sp, #12
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a65a:	bf00      	nop
}
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a666:	b480      	push	{r7}
 800a668:	b083      	sub	sp, #12
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a676:	bf00      	nop
}
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f003 fade 	bl	800dc92 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	791b      	ldrb	r3, [r3, #4]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fda5 	bl	800b22c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	795b      	ldrb	r3, [r3, #5]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fd9f 	bl	800b22c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af02      	add	r7, sp, #8
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	4613      	mov	r3, r2
 800a712:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a716:	2100      	movs	r1, #0
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f864 	bl	800a7e6 <USBH_GetDescriptor>
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a734:	78fa      	ldrb	r2, [r7, #3]
 800a736:	b292      	uxth	r2, r2
 800a738:	4619      	mov	r1, r3
 800a73a:	f000 f918 	bl	800a96e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	331c      	adds	r3, #28
 800a758:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a75a:	887b      	ldrh	r3, [r7, #2]
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a764:	2100      	movs	r1, #0
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f83d 	bl	800a7e6 <USBH_GetDescriptor>
 800a76c:	4603      	mov	r3, r0
 800a76e:	72fb      	strb	r3, [r7, #11]
 800a770:	7afb      	ldrb	r3, [r7, #11]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d107      	bne.n	800a786 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a77c:	887a      	ldrh	r2, [r7, #2]
 800a77e:	68f9      	ldr	r1, [r7, #12]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 f964 	bl	800aa4e <USBH_ParseCfgDesc>
  }

  return status;
 800a786:	7afb      	ldrb	r3, [r7, #11]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af02      	add	r7, sp, #8
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	607a      	str	r2, [r7, #4]
 800a79a:	461a      	mov	r2, r3
 800a79c:	460b      	mov	r3, r1
 800a79e:	72fb      	strb	r3, [r7, #11]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a7a4:	7afb      	ldrb	r3, [r7, #11]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a7ac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a7b4:	893b      	ldrh	r3, [r7, #8]
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 f812 	bl	800a7e6 <USBH_GetDescriptor>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d107      	bne.n	800a7dc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7d2:	893a      	ldrh	r2, [r7, #8]
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 fa37 	bl	800ac4a <USBH_ParseStringDesc>
  }

  return status;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	607b      	str	r3, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	72fb      	strb	r3, [r7, #11]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	789b      	ldrb	r3, [r3, #2]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d11c      	bne.n	800a83a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a806:	b2da      	uxtb	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2206      	movs	r2, #6
 800a810:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	893a      	ldrh	r2, [r7, #8]
 800a816:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a818:	893b      	ldrh	r3, [r7, #8]
 800a81a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a81e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a822:	d104      	bne.n	800a82e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f240 4209 	movw	r2, #1033	; 0x409
 800a82a:	829a      	strh	r2, [r3, #20]
 800a82c:	e002      	b.n	800a834 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8b3a      	ldrh	r2, [r7, #24]
 800a838:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a83a:	8b3b      	ldrh	r3, [r7, #24]
 800a83c:	461a      	mov	r2, r3
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 fa50 	bl	800ace6 <USBH_CtlReq>
 800a846:	4603      	mov	r3, r0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	789b      	ldrb	r3, [r3, #2]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d10f      	bne.n	800a884 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2205      	movs	r2, #5
 800a86e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b29a      	uxth	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a884:	2200      	movs	r2, #0
 800a886:	2100      	movs	r1, #0
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fa2c 	bl	800ace6 <USBH_CtlReq>
 800a88e:	4603      	mov	r3, r0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	789b      	ldrb	r3, [r3, #2]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d10e      	bne.n	800a8ca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2209      	movs	r2, #9
 800a8b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	887a      	ldrh	r2, [r7, #2]
 800a8bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa09 	bl	800ace6 <USBH_CtlReq>
 800a8d4:	4603      	mov	r3, r0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	789b      	ldrb	r3, [r3, #2]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d10f      	bne.n	800a912 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2203      	movs	r2, #3
 800a8fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a8fe:	78fb      	ldrb	r3, [r7, #3]
 800a900:	b29a      	uxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a912:	2200      	movs	r2, #0
 800a914:	2100      	movs	r1, #0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9e5 	bl	800ace6 <USBH_CtlReq>
 800a91c:	4603      	mov	r3, r0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	460b      	mov	r3, r1
 800a930:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	789b      	ldrb	r3, [r3, #2]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d10f      	bne.n	800a95a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a94c:	78fb      	ldrb	r3, [r7, #3]
 800a94e:	b29a      	uxth	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f9c1 	bl	800ace6 <USBH_CtlReq>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a96e:	b480      	push	{r7}
 800a970:	b085      	sub	sp, #20
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	4613      	mov	r3, r2
 800a97a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	781a      	ldrb	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	785a      	ldrb	r2, [r3, #1]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	3302      	adds	r3, #2
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b29a      	uxth	r2, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	3303      	adds	r3, #3
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	021b      	lsls	r3, r3, #8
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	791a      	ldrb	r2, [r3, #4]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	795a      	ldrb	r2, [r3, #5]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	799a      	ldrb	r2, [r3, #6]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	79da      	ldrb	r2, [r3, #7]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d939      	bls.n	800aa42 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	3309      	adds	r3, #9
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	021b      	lsls	r3, r3, #8
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	330a      	adds	r3, #10
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	330b      	adds	r3, #11
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	021b      	lsls	r3, r3, #8
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	330c      	adds	r3, #12
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	330d      	adds	r3, #13
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	7b9a      	ldrb	r2, [r3, #14]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	7bda      	ldrb	r2, [r3, #15]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	7c1a      	ldrb	r2, [r3, #16]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	7c5a      	ldrb	r2, [r3, #17]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	745a      	strb	r2, [r3, #17]
  }
}
 800aa42:	bf00      	nop
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b08a      	sub	sp, #40	; 0x28
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aa60:	2300      	movs	r3, #0
 800aa62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	781a      	ldrb	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	785a      	ldrb	r2, [r3, #1]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	3302      	adds	r3, #2
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	3303      	adds	r3, #3
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	021b      	lsls	r3, r3, #8
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	4313      	orrs	r3, r2
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	791a      	ldrb	r2, [r3, #4]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	795a      	ldrb	r2, [r3, #5]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	799a      	ldrb	r2, [r3, #6]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	79da      	ldrb	r2, [r3, #7]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	7a1a      	ldrb	r2, [r3, #8]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aac4:	88fb      	ldrh	r3, [r7, #6]
 800aac6:	2b09      	cmp	r3, #9
 800aac8:	d95f      	bls.n	800ab8a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aaca:	2309      	movs	r3, #9
 800aacc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aace:	2300      	movs	r3, #0
 800aad0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aad2:	e051      	b.n	800ab78 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aad4:	f107 0316 	add.w	r3, r7, #22
 800aad8:	4619      	mov	r1, r3
 800aada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aadc:	f000 f8e8 	bl	800acb0 <USBH_GetNextDesc>
 800aae0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	785b      	ldrb	r3, [r3, #1]
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d146      	bne.n	800ab78 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aaea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaee:	221a      	movs	r2, #26
 800aaf0:	fb02 f303 	mul.w	r3, r2, r3
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	4413      	add	r3, r2
 800aafa:	3302      	adds	r3, #2
 800aafc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aafe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab00:	69f8      	ldr	r0, [r7, #28]
 800ab02:	f000 f846 	bl	800ab92 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab10:	e022      	b.n	800ab58 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab12:	f107 0316 	add.w	r3, r7, #22
 800ab16:	4619      	mov	r1, r3
 800ab18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab1a:	f000 f8c9 	bl	800acb0 <USBH_GetNextDesc>
 800ab1e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	2b05      	cmp	r3, #5
 800ab26:	d117      	bne.n	800ab58 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab2c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab30:	3201      	adds	r2, #1
 800ab32:	00d2      	lsls	r2, r2, #3
 800ab34:	211a      	movs	r1, #26
 800ab36:	fb01 f303 	mul.w	r3, r1, r3
 800ab3a:	4413      	add	r3, r2
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	4413      	add	r3, r2
 800ab42:	3304      	adds	r3, #4
 800ab44:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ab46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab48:	69b8      	ldr	r0, [r7, #24]
 800ab4a:	f000 f851 	bl	800abf0 <USBH_ParseEPDesc>
            ep_ix++;
 800ab4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ab52:	3301      	adds	r3, #1
 800ab54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	791b      	ldrb	r3, [r3, #4]
 800ab5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d204      	bcs.n	800ab6e <USBH_ParseCfgDesc+0x120>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	885a      	ldrh	r2, [r3, #2]
 800ab68:	8afb      	ldrh	r3, [r7, #22]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d8d1      	bhi.n	800ab12 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ab6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab72:	3301      	adds	r3, #1
 800ab74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d804      	bhi.n	800ab8a <USBH_ParseCfgDesc+0x13c>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	885a      	ldrh	r2, [r3, #2]
 800ab84:	8afb      	ldrh	r3, [r7, #22]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d8a4      	bhi.n	800aad4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ab8a:	bf00      	nop
 800ab8c:	3728      	adds	r7, #40	; 0x28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	781a      	ldrb	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	785a      	ldrb	r2, [r3, #1]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	789a      	ldrb	r2, [r3, #2]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	78da      	ldrb	r2, [r3, #3]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	791a      	ldrb	r2, [r3, #4]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	795a      	ldrb	r2, [r3, #5]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	799a      	ldrb	r2, [r3, #6]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	79da      	ldrb	r2, [r3, #7]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	7a1a      	ldrb	r2, [r3, #8]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	721a      	strb	r2, [r3, #8]
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781a      	ldrb	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	785a      	ldrb	r2, [r3, #1]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	789a      	ldrb	r2, [r3, #2]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	78da      	ldrb	r2, [r3, #3]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	3305      	adds	r3, #5
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	799a      	ldrb	r2, [r3, #6]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	719a      	strb	r2, [r3, #6]
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b087      	sub	sp, #28
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	4613      	mov	r3, r2
 800ac56:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d120      	bne.n	800aca4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	1e9a      	subs	r2, r3, #2
 800ac68:	88fb      	ldrh	r3, [r7, #6]
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	bf28      	it	cs
 800ac6e:	4613      	movcs	r3, r2
 800ac70:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3302      	adds	r3, #2
 800ac76:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	82fb      	strh	r3, [r7, #22]
 800ac7c:	e00b      	b.n	800ac96 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ac7e:	8afb      	ldrh	r3, [r7, #22]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	781a      	ldrb	r2, [r3, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ac90:	8afb      	ldrh	r3, [r7, #22]
 800ac92:	3302      	adds	r3, #2
 800ac94:	82fb      	strh	r3, [r7, #22]
 800ac96:	8afa      	ldrh	r2, [r7, #22]
 800ac98:	8abb      	ldrh	r3, [r7, #20]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d3ef      	bcc.n	800ac7e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
  }
}
 800aca4:	bf00      	nop
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	881a      	ldrh	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	4413      	add	r3, r2
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4413      	add	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acd8:	68fb      	ldr	r3, [r7, #12]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b086      	sub	sp, #24
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	4613      	mov	r3, r2
 800acf2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800acf4:	2301      	movs	r3, #1
 800acf6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	789b      	ldrb	r3, [r3, #2]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d002      	beq.n	800ad06 <USBH_CtlReq+0x20>
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d00f      	beq.n	800ad24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ad04:	e027      	b.n	800ad56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	88fa      	ldrh	r2, [r7, #6]
 800ad10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	75fb      	strb	r3, [r7, #23]
      break;
 800ad22:	e018      	b.n	800ad56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f81b 	bl	800ad60 <USBH_HandleControl>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ad2e:	7dfb      	ldrb	r3, [r7, #23]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <USBH_CtlReq+0x54>
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d106      	bne.n	800ad48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	761a      	strb	r2, [r3, #24]
      break;
 800ad46:	e005      	b.n	800ad54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ad48:	7dfb      	ldrb	r3, [r7, #23]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d102      	bne.n	800ad54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2201      	movs	r2, #1
 800ad52:	709a      	strb	r2, [r3, #2]
      break;
 800ad54:	bf00      	nop
  }
  return status;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7e1b      	ldrb	r3, [r3, #24]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	2b0a      	cmp	r3, #10
 800ad78:	f200 8158 	bhi.w	800b02c <USBH_HandleControl+0x2cc>
 800ad7c:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <USBH_HandleControl+0x24>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800adb1 	.word	0x0800adb1
 800ad88:	0800adcb 	.word	0x0800adcb
 800ad8c:	0800ae35 	.word	0x0800ae35
 800ad90:	0800ae5b 	.word	0x0800ae5b
 800ad94:	0800ae93 	.word	0x0800ae93
 800ad98:	0800aebf 	.word	0x0800aebf
 800ad9c:	0800af11 	.word	0x0800af11
 800ada0:	0800af33 	.word	0x0800af33
 800ada4:	0800af6f 	.word	0x0800af6f
 800ada8:	0800af97 	.word	0x0800af97
 800adac:	0800afd5 	.word	0x0800afd5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f103 0110 	add.w	r1, r3, #16
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	795b      	ldrb	r3, [r3, #5]
 800adba:	461a      	mov	r2, r3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f945 	bl	800b04c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2202      	movs	r2, #2
 800adc6:	761a      	strb	r2, [r3, #24]
      break;
 800adc8:	e13b      	b.n	800b042 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	795b      	ldrb	r3, [r3, #5]
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f003 f84b 	bl	800de6c <USBH_LL_GetURBState>
 800add6:	4603      	mov	r3, r0
 800add8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d11e      	bne.n	800ae1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7c1b      	ldrb	r3, [r3, #16]
 800ade4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ade8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	8adb      	ldrh	r3, [r3, #22]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00a      	beq.n	800ae08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800adf2:	7b7b      	ldrb	r3, [r7, #13]
 800adf4:	2b80      	cmp	r3, #128	; 0x80
 800adf6:	d103      	bne.n	800ae00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2203      	movs	r2, #3
 800adfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adfe:	e117      	b.n	800b030 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2205      	movs	r2, #5
 800ae04:	761a      	strb	r2, [r3, #24]
      break;
 800ae06:	e113      	b.n	800b030 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800ae08:	7b7b      	ldrb	r3, [r7, #13]
 800ae0a:	2b80      	cmp	r3, #128	; 0x80
 800ae0c:	d103      	bne.n	800ae16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2209      	movs	r2, #9
 800ae12:	761a      	strb	r2, [r3, #24]
      break;
 800ae14:	e10c      	b.n	800b030 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2207      	movs	r2, #7
 800ae1a:	761a      	strb	r2, [r3, #24]
      break;
 800ae1c:	e108      	b.n	800b030 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	d003      	beq.n	800ae2c <USBH_HandleControl+0xcc>
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	f040 8102 	bne.w	800b030 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	220b      	movs	r2, #11
 800ae30:	761a      	strb	r2, [r3, #24]
      break;
 800ae32:	e0fd      	b.n	800b030 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6899      	ldr	r1, [r3, #8]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	899a      	ldrh	r2, [r3, #12]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	791b      	ldrb	r3, [r3, #4]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f93c 	bl	800b0ca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2204      	movs	r2, #4
 800ae56:	761a      	strb	r2, [r3, #24]
      break;
 800ae58:	e0f3      	b.n	800b042 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	791b      	ldrb	r3, [r3, #4]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f003 f803 	bl	800de6c <USBH_LL_GetURBState>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d102      	bne.n	800ae76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2209      	movs	r2, #9
 800ae74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	2b05      	cmp	r3, #5
 800ae7a:	d102      	bne.n	800ae82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae80:	e0d8      	b.n	800b034 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	f040 80d5 	bne.w	800b034 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	220b      	movs	r2, #11
 800ae8e:	761a      	strb	r2, [r3, #24]
      break;
 800ae90:	e0d0      	b.n	800b034 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6899      	ldr	r1, [r3, #8]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	899a      	ldrh	r2, [r3, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	7958      	ldrb	r0, [r3, #5]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	4603      	mov	r3, r0
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f8eb 	bl	800b080 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2206      	movs	r2, #6
 800aeba:	761a      	strb	r2, [r3, #24]
      break;
 800aebc:	e0c1      	b.n	800b042 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	795b      	ldrb	r3, [r3, #5]
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f002 ffd1 	bl	800de6c <USBH_LL_GetURBState>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d103      	bne.n	800aedc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2207      	movs	r2, #7
 800aed8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aeda:	e0ad      	b.n	800b038 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	2b05      	cmp	r3, #5
 800aee0:	d105      	bne.n	800aeee <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	220c      	movs	r2, #12
 800aee6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aee8:	2303      	movs	r3, #3
 800aeea:	73fb      	strb	r3, [r7, #15]
      break;
 800aeec:	e0a4      	b.n	800b038 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d103      	bne.n	800aefc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2205      	movs	r2, #5
 800aef8:	761a      	strb	r2, [r3, #24]
      break;
 800aefa:	e09d      	b.n	800b038 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	2b04      	cmp	r3, #4
 800af00:	f040 809a 	bne.w	800b038 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	220b      	movs	r2, #11
 800af08:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800af0a:	2302      	movs	r3, #2
 800af0c:	73fb      	strb	r3, [r7, #15]
      break;
 800af0e:	e093      	b.n	800b038 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	791b      	ldrb	r3, [r3, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	2100      	movs	r1, #0
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f8d6 	bl	800b0ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af24:	b29a      	uxth	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2208      	movs	r2, #8
 800af2e:	761a      	strb	r2, [r3, #24]

      break;
 800af30:	e087      	b.n	800b042 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	791b      	ldrb	r3, [r3, #4]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f002 ff97 	bl	800de6c <USBH_LL_GetURBState>
 800af3e:	4603      	mov	r3, r0
 800af40:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d105      	bne.n	800af54 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	220d      	movs	r2, #13
 800af4c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af52:	e073      	b.n	800b03c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d103      	bne.n	800af62 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	220b      	movs	r2, #11
 800af5e:	761a      	strb	r2, [r3, #24]
      break;
 800af60:	e06c      	b.n	800b03c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b05      	cmp	r3, #5
 800af66:	d169      	bne.n	800b03c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800af68:	2303      	movs	r3, #3
 800af6a:	73fb      	strb	r3, [r7, #15]
      break;
 800af6c:	e066      	b.n	800b03c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	795a      	ldrb	r2, [r3, #5]
 800af72:	2301      	movs	r3, #1
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	4613      	mov	r3, r2
 800af78:	2200      	movs	r2, #0
 800af7a:	2100      	movs	r1, #0
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f87f 	bl	800b080 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af88:	b29a      	uxth	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	220a      	movs	r2, #10
 800af92:	761a      	strb	r2, [r3, #24]
      break;
 800af94:	e055      	b.n	800b042 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	795b      	ldrb	r3, [r3, #5]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f002 ff65 	bl	800de6c <USBH_LL_GetURBState>
 800afa2:	4603      	mov	r3, r0
 800afa4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d105      	bne.n	800afb8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	220d      	movs	r2, #13
 800afb4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800afb6:	e043      	b.n	800b040 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d103      	bne.n	800afc6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2209      	movs	r2, #9
 800afc2:	761a      	strb	r2, [r3, #24]
      break;
 800afc4:	e03c      	b.n	800b040 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d139      	bne.n	800b040 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	220b      	movs	r2, #11
 800afd0:	761a      	strb	r2, [r3, #24]
      break;
 800afd2:	e035      	b.n	800b040 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7e5b      	ldrb	r3, [r3, #25]
 800afd8:	3301      	adds	r3, #1
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	765a      	strb	r2, [r3, #25]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	7e5b      	ldrb	r3, [r3, #25]
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d806      	bhi.n	800aff6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aff4:	e025      	b.n	800b042 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800affc:	2106      	movs	r1, #6
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	795b      	ldrb	r3, [r3, #5]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f90c 	bl	800b22c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	791b      	ldrb	r3, [r3, #4]
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f906 	bl	800b22c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b026:	2302      	movs	r3, #2
 800b028:	73fb      	strb	r3, [r7, #15]
      break;
 800b02a:	e00a      	b.n	800b042 <USBH_HandleControl+0x2e2>

    default:
      break;
 800b02c:	bf00      	nop
 800b02e:	e008      	b.n	800b042 <USBH_HandleControl+0x2e2>
      break;
 800b030:	bf00      	nop
 800b032:	e006      	b.n	800b042 <USBH_HandleControl+0x2e2>
      break;
 800b034:	bf00      	nop
 800b036:	e004      	b.n	800b042 <USBH_HandleControl+0x2e2>
      break;
 800b038:	bf00      	nop
 800b03a:	e002      	b.n	800b042 <USBH_HandleControl+0x2e2>
      break;
 800b03c:	bf00      	nop
 800b03e:	e000      	b.n	800b042 <USBH_HandleControl+0x2e2>
      break;
 800b040:	bf00      	nop
  }

  return status;
 800b042:	7bfb      	ldrb	r3, [r7, #15]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af04      	add	r7, sp, #16
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b05a:	79f9      	ldrb	r1, [r7, #7]
 800b05c:	2300      	movs	r3, #0
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	2308      	movs	r3, #8
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	2300      	movs	r3, #0
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2300      	movs	r3, #0
 800b06e:	2200      	movs	r2, #0
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f002 feca 	bl	800de0a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b088      	sub	sp, #32
 800b084:	af04      	add	r7, sp, #16
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4611      	mov	r1, r2
 800b08c:	461a      	mov	r2, r3
 800b08e:	460b      	mov	r3, r1
 800b090:	80fb      	strh	r3, [r7, #6]
 800b092:	4613      	mov	r3, r2
 800b094:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0a4:	7979      	ldrb	r1, [r7, #5]
 800b0a6:	7e3b      	ldrb	r3, [r7, #24]
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f002 fea5 	bl	800de0a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b088      	sub	sp, #32
 800b0ce:	af04      	add	r7, sp, #16
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	460b      	mov	r3, r1
 800b0da:	80fb      	strh	r3, [r7, #6]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0e0:	7979      	ldrb	r1, [r7, #5]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	9303      	str	r3, [sp, #12]
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	9302      	str	r3, [sp, #8]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f002 fe87 	bl	800de0a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0fc:	2300      	movs	r3, #0

}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b088      	sub	sp, #32
 800b10a:	af04      	add	r7, sp, #16
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	60b9      	str	r1, [r7, #8]
 800b110:	4611      	mov	r1, r2
 800b112:	461a      	mov	r2, r3
 800b114:	460b      	mov	r3, r1
 800b116:	80fb      	strh	r3, [r7, #6]
 800b118:	4613      	mov	r3, r2
 800b11a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b12a:	7979      	ldrb	r1, [r7, #5]
 800b12c:	7e3b      	ldrb	r3, [r7, #24]
 800b12e:	9303      	str	r3, [sp, #12]
 800b130:	88fb      	ldrh	r3, [r7, #6]
 800b132:	9302      	str	r3, [sp, #8]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	2301      	movs	r3, #1
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	2302      	movs	r3, #2
 800b13e:	2200      	movs	r2, #0
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f002 fe62 	bl	800de0a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af04      	add	r7, sp, #16
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	4611      	mov	r1, r2
 800b15c:	461a      	mov	r2, r3
 800b15e:	460b      	mov	r3, r1
 800b160:	80fb      	strh	r3, [r7, #6]
 800b162:	4613      	mov	r3, r2
 800b164:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b166:	7979      	ldrb	r1, [r7, #5]
 800b168:	2300      	movs	r3, #0
 800b16a:	9303      	str	r3, [sp, #12]
 800b16c:	88fb      	ldrh	r3, [r7, #6]
 800b16e:	9302      	str	r3, [sp, #8]
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	2301      	movs	r3, #1
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	2302      	movs	r3, #2
 800b17a:	2201      	movs	r2, #1
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f002 fe44 	bl	800de0a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af04      	add	r7, sp, #16
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	4608      	mov	r0, r1
 800b196:	4611      	mov	r1, r2
 800b198:	461a      	mov	r2, r3
 800b19a:	4603      	mov	r3, r0
 800b19c:	70fb      	strb	r3, [r7, #3]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	70bb      	strb	r3, [r7, #2]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b1a6:	7878      	ldrb	r0, [r7, #1]
 800b1a8:	78ba      	ldrb	r2, [r7, #2]
 800b1aa:	78f9      	ldrb	r1, [r7, #3]
 800b1ac:	8b3b      	ldrh	r3, [r7, #24]
 800b1ae:	9302      	str	r3, [sp, #8]
 800b1b0:	7d3b      	ldrb	r3, [r7, #20]
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	7c3b      	ldrb	r3, [r7, #16]
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f002 fdd7 	bl	800dd6e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b082      	sub	sp, #8
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b1d6:	78fb      	ldrb	r3, [r7, #3]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f002 fdf6 	bl	800ddcc <USBH_LL_ClosePipe>

  return USBH_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f836 	bl	800b268 <USBH_GetFreePipe>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b200:	89fb      	ldrh	r3, [r7, #14]
 800b202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b206:	4293      	cmp	r3, r2
 800b208:	d00a      	beq.n	800b220 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b20a:	78fa      	ldrb	r2, [r7, #3]
 800b20c:	89fb      	ldrh	r3, [r7, #14]
 800b20e:	f003 030f 	and.w	r3, r3, #15
 800b212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	33e0      	adds	r3, #224	; 0xe0
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	440b      	add	r3, r1
 800b21e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b220:	89fb      	ldrh	r3, [r7, #14]
 800b222:	b2db      	uxtb	r3, r3
}
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b238:	78fb      	ldrb	r3, [r7, #3]
 800b23a:	2b0a      	cmp	r3, #10
 800b23c:	d80d      	bhi.n	800b25a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	33e0      	adds	r3, #224	; 0xe0
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	33e0      	adds	r3, #224	; 0xe0
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	440b      	add	r3, r1
 800b258:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b274:	2300      	movs	r3, #0
 800b276:	73fb      	strb	r3, [r7, #15]
 800b278:	e00f      	b.n	800b29a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	33e0      	adds	r3, #224	; 0xe0
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
 800b290:	b29b      	uxth	r3, r3
 800b292:	e007      	b.n	800b2a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	3301      	adds	r3, #1
 800b298:	73fb      	strb	r3, [r7, #15]
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
 800b29c:	2b0a      	cmp	r3, #10
 800b29e:	d9ec      	bls.n	800b27a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b2a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	4a08      	ldr	r2, [pc, #32]	; (800b2e0 <disk_status+0x30>)
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	79fa      	ldrb	r2, [r7, #7]
 800b2c8:	4905      	ldr	r1, [pc, #20]	; (800b2e0 <disk_status+0x30>)
 800b2ca:	440a      	add	r2, r1
 800b2cc:	7a12      	ldrb	r2, [r2, #8]
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	4798      	blx	r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20001378 	.word	0x20001378

0800b2e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <disk_initialize+0x48>)
 800b2f6:	5cd3      	ldrb	r3, [r2, r3]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d111      	bne.n	800b320 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	4a0b      	ldr	r2, [pc, #44]	; (800b32c <disk_initialize+0x48>)
 800b300:	2101      	movs	r1, #1
 800b302:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b304:	79fb      	ldrb	r3, [r7, #7]
 800b306:	4a09      	ldr	r2, [pc, #36]	; (800b32c <disk_initialize+0x48>)
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	79fa      	ldrb	r2, [r7, #7]
 800b312:	4906      	ldr	r1, [pc, #24]	; (800b32c <disk_initialize+0x48>)
 800b314:	440a      	add	r2, r1
 800b316:	7a12      	ldrb	r2, [r2, #8]
 800b318:	4610      	mov	r0, r2
 800b31a:	4798      	blx	r3
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20001378 	.word	0x20001378

0800b330 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	607a      	str	r2, [r7, #4]
 800b33a:	603b      	str	r3, [r7, #0]
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	4a0a      	ldr	r2, [pc, #40]	; (800b36c <disk_read+0x3c>)
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	689c      	ldr	r4, [r3, #8]
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	4a07      	ldr	r2, [pc, #28]	; (800b36c <disk_read+0x3c>)
 800b350:	4413      	add	r3, r2
 800b352:	7a18      	ldrb	r0, [r3, #8]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	47a0      	blx	r4
 800b35c:	4603      	mov	r3, r0
 800b35e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b360:	7dfb      	ldrb	r3, [r7, #23]
}
 800b362:	4618      	mov	r0, r3
 800b364:	371c      	adds	r7, #28
 800b366:	46bd      	mov	sp, r7
 800b368:	bd90      	pop	{r4, r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20001378 	.word	0x20001378

0800b370 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b370:	b590      	push	{r4, r7, lr}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	607a      	str	r2, [r7, #4]
 800b37a:	603b      	str	r3, [r7, #0]
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <disk_write+0x3c>)
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	68dc      	ldr	r4, [r3, #12]
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	4a07      	ldr	r2, [pc, #28]	; (800b3ac <disk_write+0x3c>)
 800b390:	4413      	add	r3, r2
 800b392:	7a18      	ldrb	r0, [r3, #8]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	68b9      	ldr	r1, [r7, #8]
 800b39a:	47a0      	blx	r4
 800b39c:	4603      	mov	r3, r0
 800b39e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	371c      	adds	r7, #28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd90      	pop	{r4, r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	20001378 	.word	0x20001378

0800b3b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	603a      	str	r2, [r7, #0]
 800b3ba:	71fb      	strb	r3, [r7, #7]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	4a09      	ldr	r2, [pc, #36]	; (800b3e8 <disk_ioctl+0x38>)
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	79fa      	ldrb	r2, [r7, #7]
 800b3ce:	4906      	ldr	r1, [pc, #24]	; (800b3e8 <disk_ioctl+0x38>)
 800b3d0:	440a      	add	r2, r1
 800b3d2:	7a10      	ldrb	r0, [r2, #8]
 800b3d4:	79b9      	ldrb	r1, [r7, #6]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4798      	blx	r3
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20001378 	.word	0x20001378

0800b3ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b3fc:	89fb      	ldrh	r3, [r7, #14]
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	b21a      	sxth	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	b21b      	sxth	r3, r3
 800b408:	4313      	orrs	r3, r2
 800b40a:	b21b      	sxth	r3, r3
 800b40c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b40e:	89fb      	ldrh	r3, [r7, #14]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3303      	adds	r3, #3
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	3202      	adds	r2, #2
 800b434:	7812      	ldrb	r2, [r2, #0]
 800b436:	4313      	orrs	r3, r2
 800b438:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	021b      	lsls	r3, r3, #8
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	3201      	adds	r2, #1
 800b442:	7812      	ldrb	r2, [r2, #0]
 800b444:	4313      	orrs	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	7812      	ldrb	r2, [r2, #0]
 800b450:	4313      	orrs	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
	return rv;
 800b454:	68fb      	ldr	r3, [r7, #12]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	460b      	mov	r3, r1
 800b46c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	887a      	ldrh	r2, [r7, #2]
 800b476:	b2d2      	uxtb	r2, r2
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	887b      	ldrh	r3, [r7, #2]
 800b47c:	0a1b      	lsrs	r3, r3, #8
 800b47e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	887a      	ldrh	r2, [r7, #2]
 800b488:	b2d2      	uxtb	r2, r2
 800b48a:	701a      	strb	r2, [r3, #0]
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	b2d2      	uxtb	r2, r2
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	0a1b      	lsrs	r3, r3, #8
 800b4b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	607a      	str	r2, [r7, #4]
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	b2d2      	uxtb	r2, r2
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	0a1b      	lsrs	r3, r3, #8
 800b4c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	607a      	str	r2, [r7, #4]
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	0a1b      	lsrs	r3, r3, #8
 800b4d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	607a      	str	r2, [r7, #4]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	b2d2      	uxtb	r2, r2
 800b4e2:	701a      	strb	r2, [r3, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b4f0:	b480      	push	{r7}
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00d      	beq.n	800b526 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	1c53      	adds	r3, r2, #1
 800b50e:	613b      	str	r3, [r7, #16]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	1c59      	adds	r1, r3, #1
 800b514:	6179      	str	r1, [r7, #20]
 800b516:	7812      	ldrb	r2, [r2, #0]
 800b518:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3b01      	subs	r3, #1
 800b51e:	607b      	str	r3, [r7, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1f1      	bne.n	800b50a <mem_cpy+0x1a>
	}
}
 800b526:	bf00      	nop
 800b528:	371c      	adds	r7, #28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b532:	b480      	push	{r7}
 800b534:	b087      	sub	sp, #28
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	617a      	str	r2, [r7, #20]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3b01      	subs	r3, #1
 800b552:	607b      	str	r3, [r7, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1f3      	bne.n	800b542 <mem_set+0x10>
}
 800b55a:	bf00      	nop
 800b55c:	371c      	adds	r7, #28
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b566:	b480      	push	{r7}
 800b568:	b089      	sub	sp, #36	; 0x24
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	61fb      	str	r3, [r7, #28]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	1c5a      	adds	r2, r3, #1
 800b582:	61fa      	str	r2, [r7, #28]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	4619      	mov	r1, r3
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	61ba      	str	r2, [r7, #24]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	1acb      	subs	r3, r1, r3
 800b592:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	3b01      	subs	r3, #1
 800b598:	607b      	str	r3, [r7, #4]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <mem_cmp+0x40>
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d0eb      	beq.n	800b57e <mem_cmp+0x18>

	return r;
 800b5a6:	697b      	ldr	r3, [r7, #20]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3724      	adds	r7, #36	; 0x24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5be:	e002      	b.n	800b5c6 <chk_chr+0x12>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	607b      	str	r3, [r7, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d005      	beq.n	800b5da <chk_chr+0x26>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d1f2      	bne.n	800b5c0 <chk_chr+0xc>
	return *str;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
	...

0800b5ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e029      	b.n	800b654 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b600:	4a27      	ldr	r2, [pc, #156]	; (800b6a0 <chk_lock+0xb4>)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	011b      	lsls	r3, r3, #4
 800b606:	4413      	add	r3, r2
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d01d      	beq.n	800b64a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b60e:	4a24      	ldr	r2, [pc, #144]	; (800b6a0 <chk_lock+0xb4>)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	4413      	add	r3, r2
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d116      	bne.n	800b64e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b620:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <chk_lock+0xb4>)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	011b      	lsls	r3, r3, #4
 800b626:	4413      	add	r3, r2
 800b628:	3304      	adds	r3, #4
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b630:	429a      	cmp	r2, r3
 800b632:	d10c      	bne.n	800b64e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b634:	4a1a      	ldr	r2, [pc, #104]	; (800b6a0 <chk_lock+0xb4>)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	4413      	add	r3, r2
 800b63c:	3308      	adds	r3, #8
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b644:	429a      	cmp	r2, r3
 800b646:	d102      	bne.n	800b64e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b648:	e007      	b.n	800b65a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b64a:	2301      	movs	r3, #1
 800b64c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3301      	adds	r3, #1
 800b652:	60fb      	str	r3, [r7, #12]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d9d2      	bls.n	800b600 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d109      	bne.n	800b674 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d102      	bne.n	800b66c <chk_lock+0x80>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d101      	bne.n	800b670 <chk_lock+0x84>
 800b66c:	2300      	movs	r3, #0
 800b66e:	e010      	b.n	800b692 <chk_lock+0xa6>
 800b670:	2312      	movs	r3, #18
 800b672:	e00e      	b.n	800b692 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d108      	bne.n	800b68c <chk_lock+0xa0>
 800b67a:	4a09      	ldr	r2, [pc, #36]	; (800b6a0 <chk_lock+0xb4>)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	4413      	add	r3, r2
 800b682:	330c      	adds	r3, #12
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b68a:	d101      	bne.n	800b690 <chk_lock+0xa4>
 800b68c:	2310      	movs	r3, #16
 800b68e:	e000      	b.n	800b692 <chk_lock+0xa6>
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	20001358 	.word	0x20001358

0800b6a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	607b      	str	r3, [r7, #4]
 800b6ae:	e002      	b.n	800b6b6 <enq_lock+0x12>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	607b      	str	r3, [r7, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d806      	bhi.n	800b6ca <enq_lock+0x26>
 800b6bc:	4a09      	ldr	r2, [pc, #36]	; (800b6e4 <enq_lock+0x40>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	011b      	lsls	r3, r3, #4
 800b6c2:	4413      	add	r3, r2
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1f2      	bne.n	800b6b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	bf14      	ite	ne
 800b6d0:	2301      	movne	r3, #1
 800b6d2:	2300      	moveq	r3, #0
 800b6d4:	b2db      	uxtb	r3, r3
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20001358 	.word	0x20001358

0800b6e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	e01f      	b.n	800b738 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b6f8:	4a41      	ldr	r2, [pc, #260]	; (800b800 <inc_lock+0x118>)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	4413      	add	r3, r2
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d113      	bne.n	800b732 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b70a:	4a3d      	ldr	r2, [pc, #244]	; (800b800 <inc_lock+0x118>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	011b      	lsls	r3, r3, #4
 800b710:	4413      	add	r3, r2
 800b712:	3304      	adds	r3, #4
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d109      	bne.n	800b732 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b71e:	4a38      	ldr	r2, [pc, #224]	; (800b800 <inc_lock+0x118>)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	011b      	lsls	r3, r3, #4
 800b724:	4413      	add	r3, r2
 800b726:	3308      	adds	r3, #8
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b72e:	429a      	cmp	r2, r3
 800b730:	d006      	beq.n	800b740 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3301      	adds	r3, #1
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d9dc      	bls.n	800b6f8 <inc_lock+0x10>
 800b73e:	e000      	b.n	800b742 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b740:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2b02      	cmp	r3, #2
 800b746:	d132      	bne.n	800b7ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b748:	2300      	movs	r3, #0
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	e002      	b.n	800b754 <inc_lock+0x6c>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d806      	bhi.n	800b768 <inc_lock+0x80>
 800b75a:	4a29      	ldr	r2, [pc, #164]	; (800b800 <inc_lock+0x118>)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	011b      	lsls	r3, r3, #4
 800b760:	4413      	add	r3, r2
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1f2      	bne.n	800b74e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d101      	bne.n	800b772 <inc_lock+0x8a>
 800b76e:	2300      	movs	r3, #0
 800b770:	e040      	b.n	800b7f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4922      	ldr	r1, [pc, #136]	; (800b800 <inc_lock+0x118>)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	011b      	lsls	r3, r3, #4
 800b77c:	440b      	add	r3, r1
 800b77e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689a      	ldr	r2, [r3, #8]
 800b784:	491e      	ldr	r1, [pc, #120]	; (800b800 <inc_lock+0x118>)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	011b      	lsls	r3, r3, #4
 800b78a:	440b      	add	r3, r1
 800b78c:	3304      	adds	r3, #4
 800b78e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	695a      	ldr	r2, [r3, #20]
 800b794:	491a      	ldr	r1, [pc, #104]	; (800b800 <inc_lock+0x118>)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	440b      	add	r3, r1
 800b79c:	3308      	adds	r3, #8
 800b79e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b7a0:	4a17      	ldr	r2, [pc, #92]	; (800b800 <inc_lock+0x118>)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	011b      	lsls	r3, r3, #4
 800b7a6:	4413      	add	r3, r2
 800b7a8:	330c      	adds	r3, #12
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d009      	beq.n	800b7c8 <inc_lock+0xe0>
 800b7b4:	4a12      	ldr	r2, [pc, #72]	; (800b800 <inc_lock+0x118>)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	011b      	lsls	r3, r3, #4
 800b7ba:	4413      	add	r3, r2
 800b7bc:	330c      	adds	r3, #12
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <inc_lock+0xe0>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e015      	b.n	800b7f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d108      	bne.n	800b7e0 <inc_lock+0xf8>
 800b7ce:	4a0c      	ldr	r2, [pc, #48]	; (800b800 <inc_lock+0x118>)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	4413      	add	r3, r2
 800b7d6:	330c      	adds	r3, #12
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	e001      	b.n	800b7e4 <inc_lock+0xfc>
 800b7e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e4:	4906      	ldr	r1, [pc, #24]	; (800b800 <inc_lock+0x118>)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	440b      	add	r3, r1
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3301      	adds	r3, #1
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr
 800b800:	20001358 	.word	0x20001358

0800b804 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3b01      	subs	r3, #1
 800b810:	607b      	str	r3, [r7, #4]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d825      	bhi.n	800b864 <dec_lock+0x60>
		n = Files[i].ctr;
 800b818:	4a17      	ldr	r2, [pc, #92]	; (800b878 <dec_lock+0x74>)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	011b      	lsls	r3, r3, #4
 800b81e:	4413      	add	r3, r2
 800b820:	330c      	adds	r3, #12
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b826:	89fb      	ldrh	r3, [r7, #14]
 800b828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b82c:	d101      	bne.n	800b832 <dec_lock+0x2e>
 800b82e:	2300      	movs	r3, #0
 800b830:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b832:	89fb      	ldrh	r3, [r7, #14]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <dec_lock+0x3a>
 800b838:	89fb      	ldrh	r3, [r7, #14]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b83e:	4a0e      	ldr	r2, [pc, #56]	; (800b878 <dec_lock+0x74>)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	011b      	lsls	r3, r3, #4
 800b844:	4413      	add	r3, r2
 800b846:	330c      	adds	r3, #12
 800b848:	89fa      	ldrh	r2, [r7, #14]
 800b84a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b84c:	89fb      	ldrh	r3, [r7, #14]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d105      	bne.n	800b85e <dec_lock+0x5a>
 800b852:	4a09      	ldr	r2, [pc, #36]	; (800b878 <dec_lock+0x74>)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	011b      	lsls	r3, r3, #4
 800b858:	4413      	add	r3, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	737b      	strb	r3, [r7, #13]
 800b862:	e001      	b.n	800b868 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b864:	2302      	movs	r3, #2
 800b866:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b868:	7b7b      	ldrb	r3, [r7, #13]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	20001358 	.word	0x20001358

0800b87c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b884:	2300      	movs	r3, #0
 800b886:	60fb      	str	r3, [r7, #12]
 800b888:	e010      	b.n	800b8ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b88a:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <clear_lock+0x44>)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	4413      	add	r3, r2
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	429a      	cmp	r2, r3
 800b898:	d105      	bne.n	800b8a6 <clear_lock+0x2a>
 800b89a:	4a09      	ldr	r2, [pc, #36]	; (800b8c0 <clear_lock+0x44>)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	011b      	lsls	r3, r3, #4
 800b8a0:	4413      	add	r3, r2
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d9eb      	bls.n	800b88a <clear_lock+0xe>
	}
}
 800b8b2:	bf00      	nop
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	20001358 	.word	0x20001358

0800b8c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	78db      	ldrb	r3, [r3, #3]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d034      	beq.n	800b942 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	7858      	ldrb	r0, [r3, #1]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	f7ff fd40 	bl	800b370 <disk_write>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d002      	beq.n	800b8fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	73fb      	strb	r3, [r7, #15]
 800b8fa:	e022      	b.n	800b942 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	1ad2      	subs	r2, r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d217      	bcs.n	800b942 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	789b      	ldrb	r3, [r3, #2]
 800b916:	613b      	str	r3, [r7, #16]
 800b918:	e010      	b.n	800b93c <sync_window+0x78>
					wsect += fs->fsize;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	4413      	add	r3, r2
 800b922:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7858      	ldrb	r0, [r3, #1]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b92e:	2301      	movs	r3, #1
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	f7ff fd1d 	bl	800b370 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3b01      	subs	r3, #1
 800b93a:	613b      	str	r3, [r7, #16]
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d8eb      	bhi.n	800b91a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	429a      	cmp	r2, r3
 800b962:	d01b      	beq.n	800b99c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff ffad 	bl	800b8c4 <sync_window>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d113      	bne.n	800b99c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7858      	ldrb	r0, [r3, #1]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b97e:	2301      	movs	r3, #1
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	f7ff fcd5 	bl	800b330 <disk_read>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b98c:	f04f 33ff 	mov.w	r3, #4294967295
 800b990:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b992:	2301      	movs	r3, #1
 800b994:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
	...

0800b9a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f7ff ff87 	bl	800b8c4 <sync_window>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d158      	bne.n	800ba72 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d148      	bne.n	800ba5a <sync_fs+0xb2>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	791b      	ldrb	r3, [r3, #4]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d144      	bne.n	800ba5a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3330      	adds	r3, #48	; 0x30
 800b9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9d8:	2100      	movs	r1, #0
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff fda9 	bl	800b532 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3330      	adds	r3, #48	; 0x30
 800b9e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7ff fd38 	bl	800b462 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3330      	adds	r3, #48	; 0x30
 800b9f6:	4921      	ldr	r1, [pc, #132]	; (800ba7c <sync_fs+0xd4>)
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fd4d 	bl	800b498 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3330      	adds	r3, #48	; 0x30
 800ba02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba06:	491e      	ldr	r1, [pc, #120]	; (800ba80 <sync_fs+0xd8>)
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff fd45 	bl	800b498 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3330      	adds	r3, #48	; 0x30
 800ba12:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	f7ff fd3b 	bl	800b498 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3330      	adds	r3, #48	; 0x30
 800ba26:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7ff fd31 	bl	800b498 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	7858      	ldrb	r0, [r3, #1]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f7ff fc8e 	bl	800b370 <disk_write>
			fs->fsi_flag = 0;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	785b      	ldrb	r3, [r3, #1]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2100      	movs	r1, #0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff fca4 	bl	800b3b0 <disk_ioctl>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <sync_fs+0xca>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	41615252 	.word	0x41615252
 800ba80:	61417272 	.word	0x61417272

0800ba84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	3b02      	subs	r3, #2
 800ba92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	3b02      	subs	r3, #2
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d301      	bcc.n	800baa4 <clust2sect+0x20>
 800baa0:	2300      	movs	r3, #0
 800baa2:	e008      	b.n	800bab6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	895b      	ldrh	r3, [r3, #10]
 800baa8:	461a      	mov	r2, r3
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	fb03 f202 	mul.w	r2, r3, r2
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	4413      	add	r3, r2
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b086      	sub	sp, #24
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d904      	bls.n	800bae2 <get_fat+0x20>
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d302      	bcc.n	800bae8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bae2:	2301      	movs	r3, #1
 800bae4:	617b      	str	r3, [r7, #20]
 800bae6:	e08c      	b.n	800bc02 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bae8:	f04f 33ff 	mov.w	r3, #4294967295
 800baec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d045      	beq.n	800bb82 <get_fat+0xc0>
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d05d      	beq.n	800bbb6 <get_fat+0xf4>
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d177      	bne.n	800bbee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	085b      	lsrs	r3, r3, #1
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4413      	add	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6a1a      	ldr	r2, [r3, #32]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	0a5b      	lsrs	r3, r3, #9
 800bb14:	4413      	add	r3, r2
 800bb16:	4619      	mov	r1, r3
 800bb18:	6938      	ldr	r0, [r7, #16]
 800bb1a:	f7ff ff17 	bl	800b94c <move_window>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d167      	bne.n	800bbf4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	60fa      	str	r2, [r7, #12]
 800bb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	4413      	add	r3, r2
 800bb32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb36:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	6a1a      	ldr	r2, [r3, #32]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	0a5b      	lsrs	r3, r3, #9
 800bb40:	4413      	add	r3, r2
 800bb42:	4619      	mov	r1, r3
 800bb44:	6938      	ldr	r0, [r7, #16]
 800bb46:	f7ff ff01 	bl	800b94c <move_window>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d153      	bne.n	800bbf8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb5e:	021b      	lsls	r3, r3, #8
 800bb60:	461a      	mov	r2, r3
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <get_fat+0xb6>
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	091b      	lsrs	r3, r3, #4
 800bb76:	e002      	b.n	800bb7e <get_fat+0xbc>
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb7e:	617b      	str	r3, [r7, #20]
			break;
 800bb80:	e03f      	b.n	800bc02 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	6a1a      	ldr	r2, [r3, #32]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	0a1b      	lsrs	r3, r3, #8
 800bb8a:	4413      	add	r3, r2
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6938      	ldr	r0, [r7, #16]
 800bb90:	f7ff fedc 	bl	800b94c <move_window>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d130      	bne.n	800bbfc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bba8:	4413      	add	r3, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fc1e 	bl	800b3ec <ld_word>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	617b      	str	r3, [r7, #20]
			break;
 800bbb4:	e025      	b.n	800bc02 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6a1a      	ldr	r2, [r3, #32]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	09db      	lsrs	r3, r3, #7
 800bbbe:	4413      	add	r3, r2
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6938      	ldr	r0, [r7, #16]
 800bbc4:	f7ff fec2 	bl	800b94c <move_window>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d118      	bne.n	800bc00 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bbdc:	4413      	add	r3, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fc1c 	bl	800b41c <ld_dword>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bbea:	617b      	str	r3, [r7, #20]
			break;
 800bbec:	e009      	b.n	800bc02 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bbee:	2301      	movs	r3, #1
 800bbf0:	617b      	str	r3, [r7, #20]
 800bbf2:	e006      	b.n	800bc02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbf4:	bf00      	nop
 800bbf6:	e004      	b.n	800bc02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbf8:	bf00      	nop
 800bbfa:	e002      	b.n	800bc02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbfc:	bf00      	nop
 800bbfe:	e000      	b.n	800bc02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc00:	bf00      	nop
		}
	}

	return val;
 800bc02:	697b      	ldr	r3, [r7, #20]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc0c:	b590      	push	{r4, r7, lr}
 800bc0e:	b089      	sub	sp, #36	; 0x24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc18:	2302      	movs	r3, #2
 800bc1a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	f240 80d6 	bls.w	800bdd0 <put_fat+0x1c4>
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	f080 80d0 	bcs.w	800bdd0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d073      	beq.n	800bd20 <put_fat+0x114>
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	f000 8091 	beq.w	800bd60 <put_fat+0x154>
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	f040 80c6 	bne.w	800bdd0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	61bb      	str	r3, [r7, #24]
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	4413      	add	r3, r2
 800bc50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6a1a      	ldr	r2, [r3, #32]
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	0a5b      	lsrs	r3, r3, #9
 800bc5a:	4413      	add	r3, r2
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7ff fe74 	bl	800b94c <move_window>
 800bc64:	4603      	mov	r3, r0
 800bc66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc68:	7ffb      	ldrb	r3, [r7, #31]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f040 80a9 	bne.w	800bdc2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	1c59      	adds	r1, r3, #1
 800bc7a:	61b9      	str	r1, [r7, #24]
 800bc7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc80:	4413      	add	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00d      	beq.n	800bcaa <put_fat+0x9e>
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	b25b      	sxtb	r3, r3
 800bc94:	f003 030f 	and.w	r3, r3, #15
 800bc98:	b25a      	sxtb	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	011b      	lsls	r3, r3, #4
 800bca0:	b25b      	sxtb	r3, r3
 800bca2:	4313      	orrs	r3, r2
 800bca4:	b25b      	sxtb	r3, r3
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	e001      	b.n	800bcae <put_fat+0xa2>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a1a      	ldr	r2, [r3, #32]
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	0a5b      	lsrs	r3, r3, #9
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f7ff fe41 	bl	800b94c <move_window>
 800bcca:	4603      	mov	r3, r0
 800bccc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcce:	7ffb      	ldrb	r3, [r7, #31]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d178      	bne.n	800bdc6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce0:	4413      	add	r3, r2
 800bce2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d003      	beq.n	800bcf6 <put_fat+0xea>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	091b      	lsrs	r3, r3, #4
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	e00e      	b.n	800bd14 <put_fat+0x108>
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	b25b      	sxtb	r3, r3
 800bcfc:	f023 030f 	bic.w	r3, r3, #15
 800bd00:	b25a      	sxtb	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	0a1b      	lsrs	r3, r3, #8
 800bd06:	b25b      	sxtb	r3, r3
 800bd08:	f003 030f 	and.w	r3, r3, #15
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	b25b      	sxtb	r3, r3
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	70da      	strb	r2, [r3, #3]
			break;
 800bd1e:	e057      	b.n	800bdd0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6a1a      	ldr	r2, [r3, #32]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	0a1b      	lsrs	r3, r3, #8
 800bd28:	4413      	add	r3, r2
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff fe0d 	bl	800b94c <move_window>
 800bd32:	4603      	mov	r3, r0
 800bd34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd36:	7ffb      	ldrb	r3, [r7, #31]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d146      	bne.n	800bdca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd4a:	4413      	add	r3, r2
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	b292      	uxth	r2, r2
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff fb85 	bl	800b462 <st_word>
			fs->wflag = 1;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	70da      	strb	r2, [r3, #3]
			break;
 800bd5e:	e037      	b.n	800bdd0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6a1a      	ldr	r2, [r3, #32]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	09db      	lsrs	r3, r3, #7
 800bd68:	4413      	add	r3, r2
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f7ff fded 	bl	800b94c <move_window>
 800bd72:	4603      	mov	r3, r0
 800bd74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d128      	bne.n	800bdce <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd90:	4413      	add	r3, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fb42 	bl	800b41c <ld_dword>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bd9e:	4323      	orrs	r3, r4
 800bda0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdb0:	4413      	add	r3, r2
 800bdb2:	6879      	ldr	r1, [r7, #4]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff fb6f 	bl	800b498 <st_dword>
			fs->wflag = 1;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	70da      	strb	r2, [r3, #3]
			break;
 800bdc0:	e006      	b.n	800bdd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800bdc2:	bf00      	nop
 800bdc4:	e004      	b.n	800bdd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800bdc6:	bf00      	nop
 800bdc8:	e002      	b.n	800bdd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800bdca:	bf00      	nop
 800bdcc:	e000      	b.n	800bdd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800bdce:	bf00      	nop
		}
	}
	return res;
 800bdd0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3724      	adds	r7, #36	; 0x24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd90      	pop	{r4, r7, pc}

0800bdda <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b088      	sub	sp, #32
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d904      	bls.n	800be00 <remove_chain+0x26>
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d301      	bcc.n	800be04 <remove_chain+0x2a>
 800be00:	2302      	movs	r3, #2
 800be02:	e04b      	b.n	800be9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00c      	beq.n	800be24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be0a:	f04f 32ff 	mov.w	r2, #4294967295
 800be0e:	6879      	ldr	r1, [r7, #4]
 800be10:	69b8      	ldr	r0, [r7, #24]
 800be12:	f7ff fefb 	bl	800bc0c <put_fat>
 800be16:	4603      	mov	r3, r0
 800be18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be1a:	7ffb      	ldrb	r3, [r7, #31]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <remove_chain+0x4a>
 800be20:	7ffb      	ldrb	r3, [r7, #31]
 800be22:	e03b      	b.n	800be9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be24:	68b9      	ldr	r1, [r7, #8]
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fe4b 	bl	800bac2 <get_fat>
 800be2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d031      	beq.n	800be98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d101      	bne.n	800be3e <remove_chain+0x64>
 800be3a:	2302      	movs	r3, #2
 800be3c:	e02e      	b.n	800be9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be44:	d101      	bne.n	800be4a <remove_chain+0x70>
 800be46:	2301      	movs	r3, #1
 800be48:	e028      	b.n	800be9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be4a:	2200      	movs	r2, #0
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	69b8      	ldr	r0, [r7, #24]
 800be50:	f7ff fedc 	bl	800bc0c <put_fat>
 800be54:	4603      	mov	r3, r0
 800be56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be58:	7ffb      	ldrb	r3, [r7, #31]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <remove_chain+0x88>
 800be5e:	7ffb      	ldrb	r3, [r7, #31]
 800be60:	e01c      	b.n	800be9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	3b02      	subs	r3, #2
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d20b      	bcs.n	800be88 <remove_chain+0xae>
			fs->free_clst++;
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	791b      	ldrb	r3, [r3, #4]
 800be7e:	f043 0301 	orr.w	r3, r3, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	429a      	cmp	r2, r3
 800be94:	d3c6      	bcc.n	800be24 <remove_chain+0x4a>
 800be96:	e000      	b.n	800be9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800be98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3720      	adds	r7, #32
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10d      	bne.n	800bed6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d004      	beq.n	800bed0 <create_chain+0x2c>
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	429a      	cmp	r2, r3
 800bece:	d31b      	bcc.n	800bf08 <create_chain+0x64>
 800bed0:	2301      	movs	r3, #1
 800bed2:	61bb      	str	r3, [r7, #24]
 800bed4:	e018      	b.n	800bf08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff fdf2 	bl	800bac2 <get_fat>
 800bede:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d801      	bhi.n	800beea <create_chain+0x46>
 800bee6:	2301      	movs	r3, #1
 800bee8:	e070      	b.n	800bfcc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef0:	d101      	bne.n	800bef6 <create_chain+0x52>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	e06a      	b.n	800bfcc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	429a      	cmp	r2, r3
 800befe:	d201      	bcs.n	800bf04 <create_chain+0x60>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	e063      	b.n	800bfcc <create_chain+0x128>
		scl = clst;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	69fa      	ldr	r2, [r7, #28]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d307      	bcc.n	800bf2c <create_chain+0x88>
				ncl = 2;
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bf20:	69fa      	ldr	r2, [r7, #28]
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d901      	bls.n	800bf2c <create_chain+0x88>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e04f      	b.n	800bfcc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bf2c:	69f9      	ldr	r1, [r7, #28]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff fdc7 	bl	800bac2 <get_fat>
 800bf34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00e      	beq.n	800bf5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d003      	beq.n	800bf4a <create_chain+0xa6>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf48:	d101      	bne.n	800bf4e <create_chain+0xaa>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	e03e      	b.n	800bfcc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf4e:	69fa      	ldr	r2, [r7, #28]
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d1da      	bne.n	800bf0c <create_chain+0x68>
 800bf56:	2300      	movs	r3, #0
 800bf58:	e038      	b.n	800bfcc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bf5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bf5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf60:	69f9      	ldr	r1, [r7, #28]
 800bf62:	6938      	ldr	r0, [r7, #16]
 800bf64:	f7ff fe52 	bl	800bc0c <put_fat>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d109      	bne.n	800bf86 <create_chain+0xe2>
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bf78:	69fa      	ldr	r2, [r7, #28]
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6938      	ldr	r0, [r7, #16]
 800bf7e:	f7ff fe45 	bl	800bc0c <put_fat>
 800bf82:	4603      	mov	r3, r0
 800bf84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d116      	bne.n	800bfba <create_chain+0x116>
		fs->last_clst = ncl;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	69fa      	ldr	r2, [r7, #28]
 800bf90:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	691a      	ldr	r2, [r3, #16]
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	3b02      	subs	r3, #2
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d804      	bhi.n	800bfaa <create_chain+0x106>
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	1e5a      	subs	r2, r3, #1
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	791b      	ldrb	r3, [r3, #4]
 800bfae:	f043 0301 	orr.w	r3, r3, #1
 800bfb2:	b2da      	uxtb	r2, r3
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	711a      	strb	r2, [r3, #4]
 800bfb8:	e007      	b.n	800bfca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d102      	bne.n	800bfc6 <create_chain+0x122>
 800bfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc4:	e000      	b.n	800bfc8 <create_chain+0x124>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bfca:	69fb      	ldr	r3, [r7, #28]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b087      	sub	sp, #28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe8:	3304      	adds	r3, #4
 800bfea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	0a5b      	lsrs	r3, r3, #9
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	8952      	ldrh	r2, [r2, #10]
 800bff4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bff8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	1d1a      	adds	r2, r3, #4
 800bffe:	613a      	str	r2, [r7, #16]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <clmt_clust+0x3a>
 800c00a:	2300      	movs	r3, #0
 800c00c:	e010      	b.n	800c030 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	429a      	cmp	r2, r3
 800c014:	d307      	bcc.n	800c026 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	617b      	str	r3, [r7, #20]
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	3304      	adds	r3, #4
 800c022:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c024:	e7e9      	b.n	800bffa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c026:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	4413      	add	r3, r2
}
 800c030:	4618      	mov	r0, r3
 800c032:	371c      	adds	r7, #28
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c052:	d204      	bcs.n	800c05e <dir_sdi+0x22>
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	f003 031f 	and.w	r3, r3, #31
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c05e:	2302      	movs	r3, #2
 800c060:	e063      	b.n	800c12a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <dir_sdi+0x46>
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d902      	bls.n	800c082 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10c      	bne.n	800c0a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	095b      	lsrs	r3, r3, #5
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	8912      	ldrh	r2, [r2, #8]
 800c090:	4293      	cmp	r3, r2
 800c092:	d301      	bcc.n	800c098 <dir_sdi+0x5c>
 800c094:	2302      	movs	r3, #2
 800c096:	e048      	b.n	800c12a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	61da      	str	r2, [r3, #28]
 800c0a0:	e029      	b.n	800c0f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	895b      	ldrh	r3, [r3, #10]
 800c0a6:	025b      	lsls	r3, r3, #9
 800c0a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0aa:	e019      	b.n	800c0e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6979      	ldr	r1, [r7, #20]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff fd06 	bl	800bac2 <get_fat>
 800c0b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0be:	d101      	bne.n	800c0c4 <dir_sdi+0x88>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e032      	b.n	800c12a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d904      	bls.n	800c0d4 <dir_sdi+0x98>
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d301      	bcc.n	800c0d8 <dir_sdi+0x9c>
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e028      	b.n	800c12a <dir_sdi+0xee>
			ofs -= csz;
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d2e1      	bcs.n	800c0ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c0e8:	6979      	ldr	r1, [r7, #20]
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f7ff fcca 	bl	800ba84 <clust2sect>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <dir_sdi+0xcc>
 800c104:	2302      	movs	r3, #2
 800c106:	e010      	b.n	800c12a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	69da      	ldr	r2, [r3, #28]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	0a5b      	lsrs	r3, r3, #9
 800c110:	441a      	add	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c122:	441a      	add	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b086      	sub	sp, #24
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	3320      	adds	r3, #32
 800c148:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	69db      	ldr	r3, [r3, #28]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <dir_next+0x28>
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c158:	d301      	bcc.n	800c15e <dir_next+0x2c>
 800c15a:	2304      	movs	r3, #4
 800c15c:	e0aa      	b.n	800c2b4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c164:	2b00      	cmp	r3, #0
 800c166:	f040 8098 	bne.w	800c29a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	69db      	ldr	r3, [r3, #28]
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10b      	bne.n	800c194 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	095b      	lsrs	r3, r3, #5
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	8912      	ldrh	r2, [r2, #8]
 800c184:	4293      	cmp	r3, r2
 800c186:	f0c0 8088 	bcc.w	800c29a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	61da      	str	r2, [r3, #28]
 800c190:	2304      	movs	r3, #4
 800c192:	e08f      	b.n	800c2b4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	0a5b      	lsrs	r3, r3, #9
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	8952      	ldrh	r2, [r2, #10]
 800c19c:	3a01      	subs	r2, #1
 800c19e:	4013      	ands	r3, r2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d17a      	bne.n	800c29a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	f7ff fc88 	bl	800bac2 <get_fat>
 800c1b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d801      	bhi.n	800c1be <dir_next+0x8c>
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	e07a      	b.n	800c2b4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c4:	d101      	bne.n	800c1ca <dir_next+0x98>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e074      	b.n	800c2b4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d358      	bcc.n	800c286 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d104      	bne.n	800c1e4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	61da      	str	r2, [r3, #28]
 800c1e0:	2304      	movs	r3, #4
 800c1e2:	e067      	b.n	800c2b4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	f7ff fe59 	bl	800bea4 <create_chain>
 800c1f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <dir_next+0xcc>
 800c1fa:	2307      	movs	r3, #7
 800c1fc:	e05a      	b.n	800c2b4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d101      	bne.n	800c208 <dir_next+0xd6>
 800c204:	2302      	movs	r3, #2
 800c206:	e055      	b.n	800c2b4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d101      	bne.n	800c214 <dir_next+0xe2>
 800c210:	2301      	movs	r3, #1
 800c212:	e04f      	b.n	800c2b4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f7ff fb55 	bl	800b8c4 <sync_window>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <dir_next+0xf2>
 800c220:	2301      	movs	r3, #1
 800c222:	e047      	b.n	800c2b4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3330      	adds	r3, #48	; 0x30
 800c228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c22c:	2100      	movs	r1, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff f97f 	bl	800b532 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c234:	2300      	movs	r3, #0
 800c236:	613b      	str	r3, [r7, #16]
 800c238:	6979      	ldr	r1, [r7, #20]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f7ff fc22 	bl	800ba84 <clust2sect>
 800c240:	4602      	mov	r2, r0
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	62da      	str	r2, [r3, #44]	; 0x2c
 800c246:	e012      	b.n	800c26e <dir_next+0x13c>
						fs->wflag = 1;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2201      	movs	r2, #1
 800c24c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f7ff fb38 	bl	800b8c4 <sync_window>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <dir_next+0x12c>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e02a      	b.n	800c2b4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3301      	adds	r3, #1
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	895b      	ldrh	r3, [r3, #10]
 800c272:	461a      	mov	r2, r3
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	4293      	cmp	r3, r2
 800c278:	d3e6      	bcc.n	800c248 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	1ad2      	subs	r2, r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c28c:	6979      	ldr	r1, [r7, #20]
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f7ff fbf8 	bl	800ba84 <clust2sect>
 800c294:	4602      	mov	r2, r0
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ac:	441a      	add	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff feb4 	bl	800c03c <dir_sdi>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d12b      	bne.n	800c336 <dir_alloc+0x7a>
		n = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	69db      	ldr	r3, [r3, #28]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f7ff fb2f 	bl	800b94c <move_window>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d11d      	bne.n	800c334 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	2be5      	cmp	r3, #229	; 0xe5
 800c300:	d004      	beq.n	800c30c <dir_alloc+0x50>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d107      	bne.n	800c31c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	3301      	adds	r3, #1
 800c310:	613b      	str	r3, [r7, #16]
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	429a      	cmp	r2, r3
 800c318:	d102      	bne.n	800c320 <dir_alloc+0x64>
 800c31a:	e00c      	b.n	800c336 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c31c:	2300      	movs	r3, #0
 800c31e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c320:	2101      	movs	r1, #1
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff ff05 	bl	800c132 <dir_next>
 800c328:	4603      	mov	r3, r0
 800c32a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d0d7      	beq.n	800c2e2 <dir_alloc+0x26>
 800c332:	e000      	b.n	800c336 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c334:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	2b04      	cmp	r3, #4
 800c33a:	d101      	bne.n	800c340 <dir_alloc+0x84>
 800c33c:	2307      	movs	r3, #7
 800c33e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c340:	7dfb      	ldrb	r3, [r7, #23]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	331a      	adds	r3, #26
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff f847 	bl	800b3ec <ld_word>
 800c35e:	4603      	mov	r3, r0
 800c360:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	2b03      	cmp	r3, #3
 800c368:	d109      	bne.n	800c37e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	3314      	adds	r3, #20
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff f83c 	bl	800b3ec <ld_word>
 800c374:	4603      	mov	r3, r0
 800c376:	041b      	lsls	r3, r3, #16
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c37e:	68fb      	ldr	r3, [r7, #12]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	331a      	adds	r3, #26
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	b292      	uxth	r2, r2
 800c39c:	4611      	mov	r1, r2
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff f85f 	bl	800b462 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	d109      	bne.n	800c3c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	f103 0214 	add.w	r2, r3, #20
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	0c1b      	lsrs	r3, r3, #16
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	f7ff f851 	bl	800b462 <st_word>
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff fe2f 	bl	800c03c <dir_sdi>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d001      	beq.n	800c3ec <dir_find+0x24>
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	e03e      	b.n	800c46a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	69db      	ldr	r3, [r3, #28]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6938      	ldr	r0, [r7, #16]
 800c3f4:	f7ff faaa 	bl	800b94c <move_window>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d12f      	bne.n	800c462 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <dir_find+0x4e>
 800c410:	2304      	movs	r3, #4
 800c412:	75fb      	strb	r3, [r7, #23]
 800c414:	e028      	b.n	800c468 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	330b      	adds	r3, #11
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c422:	b2da      	uxtb	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	330b      	adds	r3, #11
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	f003 0308 	and.w	r3, r3, #8
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <dir_find+0x86>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a18      	ldr	r0, [r3, #32]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3324      	adds	r3, #36	; 0x24
 800c440:	220b      	movs	r2, #11
 800c442:	4619      	mov	r1, r3
 800c444:	f7ff f88f 	bl	800b566 <mem_cmp>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c44e:	2100      	movs	r1, #0
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff fe6e 	bl	800c132 <dir_next>
 800c456:	4603      	mov	r3, r0
 800c458:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d0c5      	beq.n	800c3ec <dir_find+0x24>
 800c460:	e002      	b.n	800c468 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c462:	bf00      	nop
 800c464:	e000      	b.n	800c468 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c466:	bf00      	nop

	return res;
 800c468:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c480:	2101      	movs	r1, #1
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff ff1a 	bl	800c2bc <dir_alloc>
 800c488:	4603      	mov	r3, r0
 800c48a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d11c      	bne.n	800c4cc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	4619      	mov	r1, r3
 800c498:	68b8      	ldr	r0, [r7, #8]
 800c49a:	f7ff fa57 	bl	800b94c <move_window>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c4a2:	7bfb      	ldrb	r3, [r7, #15]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d111      	bne.n	800c4cc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	2220      	movs	r2, #32
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff f83e 	bl	800b532 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a18      	ldr	r0, [r3, #32]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	3324      	adds	r3, #36	; 0x24
 800c4be:	220b      	movs	r2, #11
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f7ff f815 	bl	800b4f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	60fb      	str	r3, [r7, #12]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	3324      	adds	r3, #36	; 0x24
 800c4ec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c4ee:	220b      	movs	r2, #11
 800c4f0:	2120      	movs	r1, #32
 800c4f2:	68b8      	ldr	r0, [r7, #8]
 800c4f4:	f7ff f81d 	bl	800b532 <mem_set>
	si = i = 0; ni = 8;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	617b      	str	r3, [r7, #20]
 800c500:	2308      	movs	r3, #8
 800c502:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	617a      	str	r2, [r7, #20]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	4413      	add	r3, r2
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c512:	7ffb      	ldrb	r3, [r7, #31]
 800c514:	2b20      	cmp	r3, #32
 800c516:	d94e      	bls.n	800c5b6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c518:	7ffb      	ldrb	r3, [r7, #31]
 800c51a:	2b2f      	cmp	r3, #47	; 0x2f
 800c51c:	d006      	beq.n	800c52c <create_name+0x54>
 800c51e:	7ffb      	ldrb	r3, [r7, #31]
 800c520:	2b5c      	cmp	r3, #92	; 0x5c
 800c522:	d110      	bne.n	800c546 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c524:	e002      	b.n	800c52c <create_name+0x54>
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	3301      	adds	r3, #1
 800c52a:	617b      	str	r3, [r7, #20]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	4413      	add	r3, r2
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b2f      	cmp	r3, #47	; 0x2f
 800c536:	d0f6      	beq.n	800c526 <create_name+0x4e>
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	4413      	add	r3, r2
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b5c      	cmp	r3, #92	; 0x5c
 800c542:	d0f0      	beq.n	800c526 <create_name+0x4e>
			break;
 800c544:	e038      	b.n	800c5b8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c546:	7ffb      	ldrb	r3, [r7, #31]
 800c548:	2b2e      	cmp	r3, #46	; 0x2e
 800c54a:	d003      	beq.n	800c554 <create_name+0x7c>
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	429a      	cmp	r2, r3
 800c552:	d30c      	bcc.n	800c56e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	2b0b      	cmp	r3, #11
 800c558:	d002      	beq.n	800c560 <create_name+0x88>
 800c55a:	7ffb      	ldrb	r3, [r7, #31]
 800c55c:	2b2e      	cmp	r3, #46	; 0x2e
 800c55e:	d001      	beq.n	800c564 <create_name+0x8c>
 800c560:	2306      	movs	r3, #6
 800c562:	e044      	b.n	800c5ee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c564:	2308      	movs	r3, #8
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	230b      	movs	r3, #11
 800c56a:	61bb      	str	r3, [r7, #24]
			continue;
 800c56c:	e022      	b.n	800c5b4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c56e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c572:	2b00      	cmp	r3, #0
 800c574:	da04      	bge.n	800c580 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c576:	7ffb      	ldrb	r3, [r7, #31]
 800c578:	3b80      	subs	r3, #128	; 0x80
 800c57a:	4a1f      	ldr	r2, [pc, #124]	; (800c5f8 <create_name+0x120>)
 800c57c:	5cd3      	ldrb	r3, [r2, r3]
 800c57e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c580:	7ffb      	ldrb	r3, [r7, #31]
 800c582:	4619      	mov	r1, r3
 800c584:	481d      	ldr	r0, [pc, #116]	; (800c5fc <create_name+0x124>)
 800c586:	f7ff f815 	bl	800b5b4 <chk_chr>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <create_name+0xbc>
 800c590:	2306      	movs	r3, #6
 800c592:	e02c      	b.n	800c5ee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c594:	7ffb      	ldrb	r3, [r7, #31]
 800c596:	2b60      	cmp	r3, #96	; 0x60
 800c598:	d905      	bls.n	800c5a6 <create_name+0xce>
 800c59a:	7ffb      	ldrb	r3, [r7, #31]
 800c59c:	2b7a      	cmp	r3, #122	; 0x7a
 800c59e:	d802      	bhi.n	800c5a6 <create_name+0xce>
 800c5a0:	7ffb      	ldrb	r3, [r7, #31]
 800c5a2:	3b20      	subs	r3, #32
 800c5a4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	613a      	str	r2, [r7, #16]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	7ffa      	ldrb	r2, [r7, #31]
 800c5b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c5b4:	e7a6      	b.n	800c504 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c5b6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	441a      	add	r2, r3
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d101      	bne.n	800c5cc <create_name+0xf4>
 800c5c8:	2306      	movs	r3, #6
 800c5ca:	e010      	b.n	800c5ee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2be5      	cmp	r3, #229	; 0xe5
 800c5d2:	d102      	bne.n	800c5da <create_name+0x102>
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2205      	movs	r2, #5
 800c5d8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c5da:	7ffb      	ldrb	r3, [r7, #31]
 800c5dc:	2b20      	cmp	r3, #32
 800c5de:	d801      	bhi.n	800c5e4 <create_name+0x10c>
 800c5e0:	2204      	movs	r2, #4
 800c5e2:	e000      	b.n	800c5e6 <create_name+0x10e>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	330b      	adds	r3, #11
 800c5ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c5ec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3720      	adds	r7, #32
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	0800e2fc 	.word	0x0800e2fc
 800c5fc:	0800e224 	.word	0x0800e224

0800c600 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c614:	e002      	b.n	800c61c <follow_path+0x1c>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	603b      	str	r3, [r7, #0]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b2f      	cmp	r3, #47	; 0x2f
 800c622:	d0f8      	beq.n	800c616 <follow_path+0x16>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	2b5c      	cmp	r3, #92	; 0x5c
 800c62a:	d0f4      	beq.n	800c616 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	2200      	movs	r2, #0
 800c630:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b1f      	cmp	r3, #31
 800c638:	d80a      	bhi.n	800c650 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2280      	movs	r2, #128	; 0x80
 800c63e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c642:	2100      	movs	r1, #0
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f7ff fcf9 	bl	800c03c <dir_sdi>
 800c64a:	4603      	mov	r3, r0
 800c64c:	75fb      	strb	r3, [r7, #23]
 800c64e:	e043      	b.n	800c6d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c650:	463b      	mov	r3, r7
 800c652:	4619      	mov	r1, r3
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff ff3f 	bl	800c4d8 <create_name>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d134      	bne.n	800c6ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f7ff feaf 	bl	800c3c8 <dir_find>
 800c66a:	4603      	mov	r3, r0
 800c66c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c674:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c676:	7dfb      	ldrb	r3, [r7, #23]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00a      	beq.n	800c692 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c67c:	7dfb      	ldrb	r3, [r7, #23]
 800c67e:	2b04      	cmp	r3, #4
 800c680:	d127      	bne.n	800c6d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c682:	7afb      	ldrb	r3, [r7, #11]
 800c684:	f003 0304 	and.w	r3, r3, #4
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d122      	bne.n	800c6d2 <follow_path+0xd2>
 800c68c:	2305      	movs	r3, #5
 800c68e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c690:	e01f      	b.n	800c6d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c692:	7afb      	ldrb	r3, [r7, #11]
 800c694:	f003 0304 	and.w	r3, r3, #4
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d11c      	bne.n	800c6d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	799b      	ldrb	r3, [r3, #6]
 800c6a0:	f003 0310 	and.w	r3, r3, #16
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c6a8:	2305      	movs	r3, #5
 800c6aa:	75fb      	strb	r3, [r7, #23]
 800c6ac:	e014      	b.n	800c6d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6bc:	4413      	add	r3, r2
 800c6be:	4619      	mov	r1, r3
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7ff fe42 	bl	800c34a <ld_clust>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6cc:	e7c0      	b.n	800c650 <follow_path+0x50>
			if (res != FR_OK) break;
 800c6ce:	bf00      	nop
 800c6d0:	e002      	b.n	800c6d8 <follow_path+0xd8>
				break;
 800c6d2:	bf00      	nop
 800c6d4:	e000      	b.n	800c6d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6d6:	bf00      	nop
			}
		}
	}

	return res;
 800c6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3718      	adds	r7, #24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b087      	sub	sp, #28
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d031      	beq.n	800c75c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	e002      	b.n	800c706 <get_ldnumber+0x24>
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	3301      	adds	r3, #1
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	2b20      	cmp	r3, #32
 800c70c:	d903      	bls.n	800c716 <get_ldnumber+0x34>
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b3a      	cmp	r3, #58	; 0x3a
 800c714:	d1f4      	bne.n	800c700 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b3a      	cmp	r3, #58	; 0x3a
 800c71c:	d11c      	bne.n	800c758 <get_ldnumber+0x76>
			tp = *path;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	60fa      	str	r2, [r7, #12]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	3b30      	subs	r3, #48	; 0x30
 800c72e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	2b09      	cmp	r3, #9
 800c734:	d80e      	bhi.n	800c754 <get_ldnumber+0x72>
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d10a      	bne.n	800c754 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d107      	bne.n	800c754 <get_ldnumber+0x72>
					vol = (int)i;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	3301      	adds	r3, #1
 800c74c:	617b      	str	r3, [r7, #20]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	e002      	b.n	800c75e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c758:	2300      	movs	r3, #0
 800c75a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c75c:	693b      	ldr	r3, [r7, #16]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
	...

0800c76c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	70da      	strb	r2, [r3, #3]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f04f 32ff 	mov.w	r2, #4294967295
 800c782:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff f8e0 	bl	800b94c <move_window>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d001      	beq.n	800c796 <check_fs+0x2a>
 800c792:	2304      	movs	r3, #4
 800c794:	e038      	b.n	800c808 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3330      	adds	r3, #48	; 0x30
 800c79a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fe fe24 	bl	800b3ec <ld_word>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d001      	beq.n	800c7b4 <check_fs+0x48>
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	e029      	b.n	800c808 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7ba:	2be9      	cmp	r3, #233	; 0xe9
 800c7bc:	d009      	beq.n	800c7d2 <check_fs+0x66>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7c4:	2beb      	cmp	r3, #235	; 0xeb
 800c7c6:	d11e      	bne.n	800c806 <check_fs+0x9a>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c7ce:	2b90      	cmp	r3, #144	; 0x90
 800c7d0:	d119      	bne.n	800c806 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	3330      	adds	r3, #48	; 0x30
 800c7d6:	3336      	adds	r3, #54	; 0x36
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fe fe1f 	bl	800b41c <ld_dword>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7e4:	4a0a      	ldr	r2, [pc, #40]	; (800c810 <check_fs+0xa4>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d101      	bne.n	800c7ee <check_fs+0x82>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	e00c      	b.n	800c808 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3330      	adds	r3, #48	; 0x30
 800c7f2:	3352      	adds	r3, #82	; 0x52
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fe fe11 	bl	800b41c <ld_dword>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	4b05      	ldr	r3, [pc, #20]	; (800c814 <check_fs+0xa8>)
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d101      	bne.n	800c806 <check_fs+0x9a>
 800c802:	2300      	movs	r3, #0
 800c804:	e000      	b.n	800c808 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c806:	2302      	movs	r3, #2
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	00544146 	.word	0x00544146
 800c814:	33544146 	.word	0x33544146

0800c818 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b096      	sub	sp, #88	; 0x58
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	4613      	mov	r3, r2
 800c824:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f7ff ff58 	bl	800c6e2 <get_ldnumber>
 800c832:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c836:	2b00      	cmp	r3, #0
 800c838:	da01      	bge.n	800c83e <find_volume+0x26>
 800c83a:	230b      	movs	r3, #11
 800c83c:	e22e      	b.n	800cc9c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c83e:	4aa8      	ldr	r2, [pc, #672]	; (800cae0 <find_volume+0x2c8>)
 800c840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c846:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d101      	bne.n	800c852 <find_volume+0x3a>
 800c84e:	230c      	movs	r3, #12
 800c850:	e224      	b.n	800cc9c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c856:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c858:	79fb      	ldrb	r3, [r7, #7]
 800c85a:	f023 0301 	bic.w	r3, r3, #1
 800c85e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d01a      	beq.n	800c89e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86a:	785b      	ldrb	r3, [r3, #1]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe fd1f 	bl	800b2b0 <disk_status>
 800c872:	4603      	mov	r3, r0
 800c874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c878:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10c      	bne.n	800c89e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d007      	beq.n	800c89a <find_volume+0x82>
 800c88a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c88e:	f003 0304 	and.w	r3, r3, #4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c896:	230a      	movs	r3, #10
 800c898:	e200      	b.n	800cc9c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c89a:	2300      	movs	r3, #0
 800c89c:	e1fe      	b.n	800cc9c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	785b      	ldrb	r3, [r3, #1]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fe fd17 	bl	800b2e4 <disk_initialize>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c8bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	e1e7      	b.n	800cc9c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <find_volume+0xca>
 800c8d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8d6:	f003 0304 	and.w	r3, r3, #4
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c8de:	230a      	movs	r3, #10
 800c8e0:	e1dc      	b.n	800cc9c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c8e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8ea:	f7ff ff3f 	bl	800c76c <check_fs>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c8f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d14b      	bne.n	800c994 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c900:	e01f      	b.n	800c942 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c904:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90a:	011b      	lsls	r3, r3, #4
 800c90c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c910:	4413      	add	r3, r2
 800c912:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	3304      	adds	r3, #4
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d006      	beq.n	800c92c <find_volume+0x114>
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	3308      	adds	r3, #8
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fd7a 	bl	800b41c <ld_dword>
 800c928:	4602      	mov	r2, r0
 800c92a:	e000      	b.n	800c92e <find_volume+0x116>
 800c92c:	2200      	movs	r2, #0
 800c92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c936:	440b      	add	r3, r1
 800c938:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c93e:	3301      	adds	r3, #1
 800c940:	643b      	str	r3, [r7, #64]	; 0x40
 800c942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c944:	2b03      	cmp	r3, #3
 800c946:	d9dc      	bls.n	800c902 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c948:	2300      	movs	r3, #0
 800c94a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <find_volume+0x140>
 800c952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c954:	3b01      	subs	r3, #1
 800c956:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c960:	4413      	add	r3, r2
 800c962:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c966:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d005      	beq.n	800c97a <find_volume+0x162>
 800c96e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c972:	f7ff fefb 	bl	800c76c <check_fs>
 800c976:	4603      	mov	r3, r0
 800c978:	e000      	b.n	800c97c <find_volume+0x164>
 800c97a:	2303      	movs	r3, #3
 800c97c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c984:	2b01      	cmp	r3, #1
 800c986:	d905      	bls.n	800c994 <find_volume+0x17c>
 800c988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98a:	3301      	adds	r3, #1
 800c98c:	643b      	str	r3, [r7, #64]	; 0x40
 800c98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c990:	2b03      	cmp	r3, #3
 800c992:	d9e1      	bls.n	800c958 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c998:	2b04      	cmp	r3, #4
 800c99a:	d101      	bne.n	800c9a0 <find_volume+0x188>
 800c99c:	2301      	movs	r3, #1
 800c99e:	e17d      	b.n	800cc9c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c9a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d901      	bls.n	800c9ac <find_volume+0x194>
 800c9a8:	230d      	movs	r3, #13
 800c9aa:	e177      	b.n	800cc9c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	3330      	adds	r3, #48	; 0x30
 800c9b0:	330b      	adds	r3, #11
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe fd1a 	bl	800b3ec <ld_word>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9be:	d001      	beq.n	800c9c4 <find_volume+0x1ac>
 800c9c0:	230d      	movs	r3, #13
 800c9c2:	e16b      	b.n	800cc9c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	3330      	adds	r3, #48	; 0x30
 800c9c8:	3316      	adds	r3, #22
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fd0e 	bl	800b3ec <ld_word>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <find_volume+0x1d0>
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	3330      	adds	r3, #48	; 0x30
 800c9de:	3324      	adds	r3, #36	; 0x24
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fe fd1b 	bl	800b41c <ld_dword>
 800c9e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	789b      	ldrb	r3, [r3, #2]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d005      	beq.n	800ca0c <find_volume+0x1f4>
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	789b      	ldrb	r3, [r3, #2]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d001      	beq.n	800ca0c <find_volume+0x1f4>
 800ca08:	230d      	movs	r3, #13
 800ca0a:	e147      	b.n	800cc9c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	789b      	ldrb	r3, [r3, #2]
 800ca10:	461a      	mov	r2, r3
 800ca12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca14:	fb02 f303 	mul.w	r3, r2, r3
 800ca18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d008      	beq.n	800ca40 <find_volume+0x228>
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	895b      	ldrh	r3, [r3, #10]
 800ca32:	461a      	mov	r2, r3
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	895b      	ldrh	r3, [r3, #10]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <find_volume+0x22c>
 800ca40:	230d      	movs	r3, #13
 800ca42:	e12b      	b.n	800cc9c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	3330      	adds	r3, #48	; 0x30
 800ca48:	3311      	adds	r3, #17
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fcce 	bl	800b3ec <ld_word>
 800ca50:	4603      	mov	r3, r0
 800ca52:	461a      	mov	r2, r3
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	891b      	ldrh	r3, [r3, #8]
 800ca5c:	f003 030f 	and.w	r3, r3, #15
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <find_volume+0x252>
 800ca66:	230d      	movs	r3, #13
 800ca68:	e118      	b.n	800cc9c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	3330      	adds	r3, #48	; 0x30
 800ca6e:	3313      	adds	r3, #19
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe fcbb 	bl	800b3ec <ld_word>
 800ca76:	4603      	mov	r3, r0
 800ca78:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <find_volume+0x276>
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	3330      	adds	r3, #48	; 0x30
 800ca84:	3320      	adds	r3, #32
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe fcc8 	bl	800b41c <ld_dword>
 800ca8c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	3330      	adds	r3, #48	; 0x30
 800ca92:	330e      	adds	r3, #14
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fca9 	bl	800b3ec <ld_word>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <find_volume+0x290>
 800caa4:	230d      	movs	r3, #13
 800caa6:	e0f9      	b.n	800cc9c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800caa8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800caaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caac:	4413      	add	r3, r2
 800caae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cab0:	8912      	ldrh	r2, [r2, #8]
 800cab2:	0912      	lsrs	r2, r2, #4
 800cab4:	b292      	uxth	r2, r2
 800cab6:	4413      	add	r3, r2
 800cab8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800caba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d201      	bcs.n	800cac6 <find_volume+0x2ae>
 800cac2:	230d      	movs	r3, #13
 800cac4:	e0ea      	b.n	800cc9c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cace:	8952      	ldrh	r2, [r2, #10]
 800cad0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cad4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d103      	bne.n	800cae4 <find_volume+0x2cc>
 800cadc:	230d      	movs	r3, #13
 800cade:	e0dd      	b.n	800cc9c <find_volume+0x484>
 800cae0:	20001350 	.word	0x20001350
		fmt = FS_FAT32;
 800cae4:	2303      	movs	r3, #3
 800cae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d802      	bhi.n	800cafa <find_volume+0x2e2>
 800caf4:	2302      	movs	r3, #2
 800caf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d802      	bhi.n	800cb0a <find_volume+0x2f2>
 800cb04:	2301      	movs	r3, #1
 800cb06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	1c9a      	adds	r2, r3, #2
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb16:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cb18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb1c:	441a      	add	r2, r3
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cb22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	441a      	add	r2, r3
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cb2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb30:	2b03      	cmp	r3, #3
 800cb32:	d11e      	bne.n	800cb72 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	3330      	adds	r3, #48	; 0x30
 800cb38:	332a      	adds	r3, #42	; 0x2a
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fe fc56 	bl	800b3ec <ld_word>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <find_volume+0x332>
 800cb46:	230d      	movs	r3, #13
 800cb48:	e0a8      	b.n	800cc9c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4c:	891b      	ldrh	r3, [r3, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d001      	beq.n	800cb56 <find_volume+0x33e>
 800cb52:	230d      	movs	r3, #13
 800cb54:	e0a2      	b.n	800cc9c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	3330      	adds	r3, #48	; 0x30
 800cb5a:	332c      	adds	r3, #44	; 0x2c
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe fc5d 	bl	800b41c <ld_dword>
 800cb62:	4602      	mov	r2, r0
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb70:	e01f      	b.n	800cbb2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	891b      	ldrh	r3, [r3, #8]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <find_volume+0x366>
 800cb7a:	230d      	movs	r3, #13
 800cb7c:	e08e      	b.n	800cc9c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb80:	6a1a      	ldr	r2, [r3, #32]
 800cb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb84:	441a      	add	r2, r3
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d103      	bne.n	800cb9a <find_volume+0x382>
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	e00a      	b.n	800cbb0 <find_volume+0x398>
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	695a      	ldr	r2, [r3, #20]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	005b      	lsls	r3, r3, #1
 800cba2:	4413      	add	r3, r2
 800cba4:	085a      	lsrs	r2, r3, #1
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	f003 0301 	and.w	r3, r3, #1
 800cbae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cbb0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb4:	699a      	ldr	r2, [r3, #24]
 800cbb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cbbc:	0a5b      	lsrs	r3, r3, #9
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d201      	bcs.n	800cbc6 <find_volume+0x3ae>
 800cbc2:	230d      	movs	r3, #13
 800cbc4:	e06a      	b.n	800cc9c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbcc:	611a      	str	r2, [r3, #16]
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	691a      	ldr	r2, [r3, #16]
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd8:	2280      	movs	r2, #128	; 0x80
 800cbda:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cbdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d149      	bne.n	800cc78 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	3330      	adds	r3, #48	; 0x30
 800cbe8:	3330      	adds	r3, #48	; 0x30
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fbfe 	bl	800b3ec <ld_word>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d140      	bne.n	800cc78 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cbf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbfe:	f7fe fea5 	bl	800b94c <move_window>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d137      	bne.n	800cc78 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	3330      	adds	r3, #48	; 0x30
 800cc12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fe fbe8 	bl	800b3ec <ld_word>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d127      	bne.n	800cc78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	3330      	adds	r3, #48	; 0x30
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fe fbf5 	bl	800b41c <ld_dword>
 800cc32:	4602      	mov	r2, r0
 800cc34:	4b1b      	ldr	r3, [pc, #108]	; (800cca4 <find_volume+0x48c>)
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d11e      	bne.n	800cc78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	3330      	adds	r3, #48	; 0x30
 800cc3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fe fbea 	bl	800b41c <ld_dword>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	4b17      	ldr	r3, [pc, #92]	; (800cca8 <find_volume+0x490>)
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d113      	bne.n	800cc78 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	3330      	adds	r3, #48	; 0x30
 800cc54:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fe fbdf 	bl	800b41c <ld_dword>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	3330      	adds	r3, #48	; 0x30
 800cc68:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fe fbd5 	bl	800b41c <ld_dword>
 800cc72:	4602      	mov	r2, r0
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc7e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc80:	4b0a      	ldr	r3, [pc, #40]	; (800ccac <find_volume+0x494>)
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	3301      	adds	r3, #1
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	4b08      	ldr	r3, [pc, #32]	; (800ccac <find_volume+0x494>)
 800cc8a:	801a      	strh	r2, [r3, #0]
 800cc8c:	4b07      	ldr	r3, [pc, #28]	; (800ccac <find_volume+0x494>)
 800cc8e:	881a      	ldrh	r2, [r3, #0]
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc96:	f7fe fdf1 	bl	800b87c <clear_lock>
#endif
	return FR_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3758      	adds	r7, #88	; 0x58
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	41615252 	.word	0x41615252
 800cca8:	61417272 	.word	0x61417272
 800ccac:	20001354 	.word	0x20001354

0800ccb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ccba:	2309      	movs	r3, #9
 800ccbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d01c      	beq.n	800ccfe <validate+0x4e>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d018      	beq.n	800ccfe <validate+0x4e>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d013      	beq.n	800ccfe <validate+0x4e>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	889a      	ldrh	r2, [r3, #4]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	88db      	ldrh	r3, [r3, #6]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d10c      	bne.n	800ccfe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	785b      	ldrb	r3, [r3, #1]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe fae0 	bl	800b2b0 <disk_status>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <validate+0x4e>
			res = FR_OK;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <validate+0x5a>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	e000      	b.n	800cd0c <validate+0x5c>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	6013      	str	r3, [r2, #0]
	return res;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b088      	sub	sp, #32
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	4613      	mov	r3, r2
 800cd28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd2e:	f107 0310 	add.w	r3, r7, #16
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff fcd5 	bl	800c6e2 <get_ldnumber>
 800cd38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	da01      	bge.n	800cd44 <f_mount+0x28>
 800cd40:	230b      	movs	r3, #11
 800cd42:	e02b      	b.n	800cd9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd44:	4a17      	ldr	r2, [pc, #92]	; (800cda4 <f_mount+0x88>)
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d005      	beq.n	800cd60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd54:	69b8      	ldr	r0, [r7, #24]
 800cd56:	f7fe fd91 	bl	800b87c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d002      	beq.n	800cd6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	490d      	ldr	r1, [pc, #52]	; (800cda4 <f_mount+0x88>)
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <f_mount+0x66>
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d001      	beq.n	800cd86 <f_mount+0x6a>
 800cd82:	2300      	movs	r3, #0
 800cd84:	e00a      	b.n	800cd9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd86:	f107 010c 	add.w	r1, r7, #12
 800cd8a:	f107 0308 	add.w	r3, r7, #8
 800cd8e:	2200      	movs	r2, #0
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7ff fd41 	bl	800c818 <find_volume>
 800cd96:	4603      	mov	r3, r0
 800cd98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20001350 	.word	0x20001350

0800cda8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b098      	sub	sp, #96	; 0x60
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <f_open+0x18>
 800cdbc:	2309      	movs	r3, #9
 800cdbe:	e1ad      	b.n	800d11c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cdc8:	79fa      	ldrb	r2, [r7, #7]
 800cdca:	f107 0110 	add.w	r1, r7, #16
 800cdce:	f107 0308 	add.w	r3, r7, #8
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff fd20 	bl	800c818 <find_volume>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cdde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f040 8191 	bne.w	800d10a <f_open+0x362>
		dj.obj.fs = fs;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	f107 0314 	add.w	r3, r7, #20
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7ff fc03 	bl	800c600 <follow_path>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ce00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d11a      	bne.n	800ce3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce0c:	b25b      	sxtb	r3, r3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	da03      	bge.n	800ce1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce12:	2306      	movs	r3, #6
 800ce14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce18:	e011      	b.n	800ce3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce1a:	79fb      	ldrb	r3, [r7, #7]
 800ce1c:	f023 0301 	bic.w	r3, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bf14      	ite	ne
 800ce24:	2301      	movne	r3, #1
 800ce26:	2300      	moveq	r3, #0
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f107 0314 	add.w	r3, r7, #20
 800ce30:	4611      	mov	r1, r2
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe fbda 	bl	800b5ec <chk_lock>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	f003 031c 	and.w	r3, r3, #28
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d07f      	beq.n	800cf48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d017      	beq.n	800ce80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce54:	2b04      	cmp	r3, #4
 800ce56:	d10e      	bne.n	800ce76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce58:	f7fe fc24 	bl	800b6a4 <enq_lock>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d006      	beq.n	800ce70 <f_open+0xc8>
 800ce62:	f107 0314 	add.w	r3, r7, #20
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7ff fb03 	bl	800c472 <dir_register>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	e000      	b.n	800ce72 <f_open+0xca>
 800ce70:	2312      	movs	r3, #18
 800ce72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce76:	79fb      	ldrb	r3, [r7, #7]
 800ce78:	f043 0308 	orr.w	r3, r3, #8
 800ce7c:	71fb      	strb	r3, [r7, #7]
 800ce7e:	e010      	b.n	800cea2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce80:	7ebb      	ldrb	r3, [r7, #26]
 800ce82:	f003 0311 	and.w	r3, r3, #17
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d003      	beq.n	800ce92 <f_open+0xea>
					res = FR_DENIED;
 800ce8a:	2307      	movs	r3, #7
 800ce8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce90:	e007      	b.n	800cea2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce92:	79fb      	ldrb	r3, [r7, #7]
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <f_open+0xfa>
 800ce9c:	2308      	movs	r3, #8
 800ce9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d168      	bne.n	800cf7c <f_open+0x1d4>
 800ceaa:	79fb      	ldrb	r3, [r7, #7]
 800ceac:	f003 0308 	and.w	r3, r3, #8
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d063      	beq.n	800cf7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800ceb4:	f7fb fa04 	bl	80082c0 <get_fattime>
 800ceb8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ceba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebc:	330e      	adds	r3, #14
 800cebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fe fae9 	bl	800b498 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec8:	3316      	adds	r3, #22
 800ceca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fe fae3 	bl	800b498 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ced2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced4:	330b      	adds	r3, #11
 800ced6:	2220      	movs	r2, #32
 800ced8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cede:	4611      	mov	r1, r2
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7ff fa32 	bl	800c34a <ld_clust>
 800cee6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ceec:	2200      	movs	r2, #0
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff fa4a 	bl	800c388 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	331c      	adds	r3, #28
 800cef8:	2100      	movs	r1, #0
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe facc 	bl	800b498 <st_dword>
					fs->wflag = 1;
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	2201      	movs	r2, #1
 800cf04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d037      	beq.n	800cf7c <f_open+0x1d4>
						dw = fs->winsect;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cf12:	f107 0314 	add.w	r3, r7, #20
 800cf16:	2200      	movs	r2, #0
 800cf18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fe ff5d 	bl	800bdda <remove_chain>
 800cf20:	4603      	mov	r3, r0
 800cf22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cf26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d126      	bne.n	800cf7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe fd0a 	bl	800b94c <move_window>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf42:	3a01      	subs	r2, #1
 800cf44:	60da      	str	r2, [r3, #12]
 800cf46:	e019      	b.n	800cf7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d115      	bne.n	800cf7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf50:	7ebb      	ldrb	r3, [r7, #26]
 800cf52:	f003 0310 	and.w	r3, r3, #16
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cf5a:	2304      	movs	r3, #4
 800cf5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf60:	e00c      	b.n	800cf7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	f003 0302 	and.w	r3, r3, #2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d007      	beq.n	800cf7c <f_open+0x1d4>
 800cf6c:	7ebb      	ldrb	r3, [r7, #26]
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d002      	beq.n	800cf7c <f_open+0x1d4>
						res = FR_DENIED;
 800cf76:	2307      	movs	r3, #7
 800cf78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cf7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d128      	bne.n	800cfd6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	f003 0308 	and.w	r3, r3, #8
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d003      	beq.n	800cf96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	f023 0301 	bic.w	r3, r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	bf14      	ite	ne
 800cfae:	2301      	movne	r3, #1
 800cfb0:	2300      	moveq	r3, #0
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	f107 0314 	add.w	r3, r7, #20
 800cfba:	4611      	mov	r1, r2
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fe fb93 	bl	800b6e8 <inc_lock>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d102      	bne.n	800cfd6 <f_open+0x22e>
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cfd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f040 8095 	bne.w	800d10a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff f9af 	bl	800c34a <ld_clust>
 800cfec:	4602      	mov	r2, r0
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff4:	331c      	adds	r3, #28
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe fa10 	bl	800b41c <ld_dword>
 800cffc:	4602      	mov	r2, r0
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	88da      	ldrh	r2, [r3, #6]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	79fa      	ldrb	r2, [r7, #7]
 800d01a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3330      	adds	r3, #48	; 0x30
 800d032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d036:	2100      	movs	r1, #0
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fa7a 	bl	800b532 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	f003 0320 	and.w	r3, r3, #32
 800d044:	2b00      	cmp	r3, #0
 800d046:	d060      	beq.n	800d10a <f_open+0x362>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d05c      	beq.n	800d10a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68da      	ldr	r2, [r3, #12]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	895b      	ldrh	r3, [r3, #10]
 800d05c:	025b      	lsls	r3, r3, #9
 800d05e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	657b      	str	r3, [r7, #84]	; 0x54
 800d06c:	e016      	b.n	800d09c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fd25 	bl	800bac2 <get_fat>
 800d078:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d802      	bhi.n	800d086 <f_open+0x2de>
 800d080:	2302      	movs	r3, #2
 800d082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d08c:	d102      	bne.n	800d094 <f_open+0x2ec>
 800d08e:	2301      	movs	r3, #1
 800d090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	657b      	str	r3, [r7, #84]	; 0x54
 800d09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <f_open+0x304>
 800d0a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d8e0      	bhi.n	800d06e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d0b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d127      	bne.n	800d10a <f_open+0x362>
 800d0ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d022      	beq.n	800d10a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe fcdb 	bl	800ba84 <clust2sect>
 800d0ce:	6478      	str	r0, [r7, #68]	; 0x44
 800d0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d103      	bne.n	800d0de <f_open+0x336>
						res = FR_INT_ERR;
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0dc:	e015      	b.n	800d10a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0e0:	0a5a      	lsrs	r2, r3, #9
 800d0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0e4:	441a      	add	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	7858      	ldrb	r0, [r3, #1]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6a1a      	ldr	r2, [r3, #32]
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f7fe f919 	bl	800b330 <disk_read>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <f_open+0x362>
 800d104:	2301      	movs	r3, #1
 800d106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d002      	beq.n	800d118 <f_open+0x370>
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3760      	adds	r7, #96	; 0x60
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08e      	sub	sp, #56	; 0x38
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2200      	movs	r2, #0
 800d13a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f107 0214 	add.w	r2, r7, #20
 800d142:	4611      	mov	r1, r2
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff fdb3 	bl	800ccb0 <validate>
 800d14a:	4603      	mov	r3, r0
 800d14c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d154:	2b00      	cmp	r3, #0
 800d156:	d107      	bne.n	800d168 <f_read+0x44>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	7d5b      	ldrb	r3, [r3, #21]
 800d15c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d160:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <f_read+0x4a>
 800d168:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d16c:	e115      	b.n	800d39a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	7d1b      	ldrb	r3, [r3, #20]
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <f_read+0x5a>
 800d17a:	2307      	movs	r3, #7
 800d17c:	e10d      	b.n	800d39a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	68da      	ldr	r2, [r3, #12]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	6a3b      	ldr	r3, [r7, #32]
 800d18e:	429a      	cmp	r2, r3
 800d190:	f240 80fe 	bls.w	800d390 <f_read+0x26c>
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d198:	e0fa      	b.n	800d390 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	699b      	ldr	r3, [r3, #24]
 800d19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f040 80c6 	bne.w	800d334 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	0a5b      	lsrs	r3, r3, #9
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	8952      	ldrh	r2, [r2, #10]
 800d1b2:	3a01      	subs	r2, #1
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d12f      	bne.n	800d21e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	699b      	ldr	r3, [r3, #24]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d103      	bne.n	800d1ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	633b      	str	r3, [r7, #48]	; 0x30
 800d1cc:	e013      	b.n	800d1f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d007      	beq.n	800d1e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f7fe fef9 	bl	800bfd4 <clmt_clust>
 800d1e2:	6338      	str	r0, [r7, #48]	; 0x30
 800d1e4:	e007      	b.n	800d1f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	f7fe fc67 	bl	800bac2 <get_fat>
 800d1f4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d804      	bhi.n	800d206 <f_read+0xe2>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2202      	movs	r2, #2
 800d200:	755a      	strb	r2, [r3, #21]
 800d202:	2302      	movs	r3, #2
 800d204:	e0c9      	b.n	800d39a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20c:	d104      	bne.n	800d218 <f_read+0xf4>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2201      	movs	r2, #1
 800d212:	755a      	strb	r2, [r3, #21]
 800d214:	2301      	movs	r3, #1
 800d216:	e0c0      	b.n	800d39a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d21c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d21e:	697a      	ldr	r2, [r7, #20]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	69db      	ldr	r3, [r3, #28]
 800d224:	4619      	mov	r1, r3
 800d226:	4610      	mov	r0, r2
 800d228:	f7fe fc2c 	bl	800ba84 <clust2sect>
 800d22c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d104      	bne.n	800d23e <f_read+0x11a>
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2202      	movs	r2, #2
 800d238:	755a      	strb	r2, [r3, #21]
 800d23a:	2302      	movs	r3, #2
 800d23c:	e0ad      	b.n	800d39a <f_read+0x276>
			sect += csect;
 800d23e:	69ba      	ldr	r2, [r7, #24]
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	4413      	add	r3, r2
 800d244:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	0a5b      	lsrs	r3, r3, #9
 800d24a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d039      	beq.n	800d2c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d252:	69fa      	ldr	r2, [r7, #28]
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	4413      	add	r3, r2
 800d258:	697a      	ldr	r2, [r7, #20]
 800d25a:	8952      	ldrh	r2, [r2, #10]
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d905      	bls.n	800d26c <f_read+0x148>
					cc = fs->csize - csect;
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	895b      	ldrh	r3, [r3, #10]
 800d264:	461a      	mov	r2, r3
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	7858      	ldrb	r0, [r3, #1]
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	69ba      	ldr	r2, [r7, #24]
 800d274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d276:	f7fe f85b 	bl	800b330 <disk_read>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d004      	beq.n	800d28a <f_read+0x166>
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2201      	movs	r2, #1
 800d284:	755a      	strb	r2, [r3, #21]
 800d286:	2301      	movs	r3, #1
 800d288:	e087      	b.n	800d39a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	7d1b      	ldrb	r3, [r3, #20]
 800d28e:	b25b      	sxtb	r3, r3
 800d290:	2b00      	cmp	r3, #0
 800d292:	da14      	bge.n	800d2be <f_read+0x19a>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6a1a      	ldr	r2, [r3, #32]
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d90d      	bls.n	800d2be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6a1a      	ldr	r2, [r3, #32]
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	025b      	lsls	r3, r3, #9
 800d2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ae:	18d0      	adds	r0, r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	3330      	adds	r3, #48	; 0x30
 800d2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	f7fe f919 	bl	800b4f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c0:	025b      	lsls	r3, r3, #9
 800d2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d2c4:	e050      	b.n	800d368 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d02e      	beq.n	800d32e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	7d1b      	ldrb	r3, [r3, #20]
 800d2d4:	b25b      	sxtb	r3, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	da18      	bge.n	800d30c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	7858      	ldrb	r0, [r3, #1]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6a1a      	ldr	r2, [r3, #32]
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	f7fe f841 	bl	800b370 <disk_write>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d004      	beq.n	800d2fe <f_read+0x1da>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	755a      	strb	r2, [r3, #21]
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e04d      	b.n	800d39a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	7d1b      	ldrb	r3, [r3, #20]
 800d302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d306:	b2da      	uxtb	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	7858      	ldrb	r0, [r3, #1]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d316:	2301      	movs	r3, #1
 800d318:	69ba      	ldr	r2, [r7, #24]
 800d31a:	f7fe f809 	bl	800b330 <disk_read>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d004      	beq.n	800d32e <f_read+0x20a>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2201      	movs	r2, #1
 800d328:	755a      	strb	r2, [r3, #21]
 800d32a:	2301      	movs	r3, #1
 800d32c:	e035      	b.n	800d39a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	69ba      	ldr	r2, [r7, #24]
 800d332:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d340:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	429a      	cmp	r2, r3
 800d348:	d901      	bls.n	800d34e <f_read+0x22a>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35c:	4413      	add	r3, r2
 800d35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d360:	4619      	mov	r1, r3
 800d362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d364:	f7fe f8c4 	bl	800b4f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	4413      	add	r3, r2
 800d36e:	627b      	str	r3, [r7, #36]	; 0x24
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	699a      	ldr	r2, [r3, #24]
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	441a      	add	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	619a      	str	r2, [r3, #24]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	441a      	add	r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	1ad3      	subs	r3, r2, r3
 800d38e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f47f af01 	bne.w	800d19a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3738      	adds	r7, #56	; 0x38
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b086      	sub	sp, #24
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f107 0208 	add.w	r2, r7, #8
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff fc7c 	bl	800ccb0 <validate>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3bc:	7dfb      	ldrb	r3, [r7, #23]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d168      	bne.n	800d494 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	7d1b      	ldrb	r3, [r3, #20]
 800d3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d062      	beq.n	800d494 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	7d1b      	ldrb	r3, [r3, #20]
 800d3d2:	b25b      	sxtb	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	da15      	bge.n	800d404 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	7858      	ldrb	r0, [r3, #1]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a1a      	ldr	r2, [r3, #32]
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	f7fd ffc2 	bl	800b370 <disk_write>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <f_sync+0x54>
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e04f      	b.n	800d496 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	7d1b      	ldrb	r3, [r3, #20]
 800d3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3fe:	b2da      	uxtb	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d404:	f7fa ff5c 	bl	80082c0 <get_fattime>
 800d408:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d410:	4619      	mov	r1, r3
 800d412:	4610      	mov	r0, r2
 800d414:	f7fe fa9a 	bl	800b94c <move_window>
 800d418:	4603      	mov	r3, r0
 800d41a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d138      	bne.n	800d494 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d426:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	330b      	adds	r3, #11
 800d42c:	781a      	ldrb	r2, [r3, #0]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	330b      	adds	r3, #11
 800d432:	f042 0220 	orr.w	r2, r2, #32
 800d436:	b2d2      	uxtb	r2, r2
 800d438:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6818      	ldr	r0, [r3, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	461a      	mov	r2, r3
 800d444:	68f9      	ldr	r1, [r7, #12]
 800d446:	f7fe ff9f 	bl	800c388 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f103 021c 	add.w	r2, r3, #28
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	4619      	mov	r1, r3
 800d456:	4610      	mov	r0, r2
 800d458:	f7fe f81e 	bl	800b498 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3316      	adds	r3, #22
 800d460:	6939      	ldr	r1, [r7, #16]
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe f818 	bl	800b498 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	3312      	adds	r3, #18
 800d46c:	2100      	movs	r1, #0
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fd fff7 	bl	800b462 <st_word>
					fs->wflag = 1;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2201      	movs	r2, #1
 800d478:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe fa93 	bl	800b9a8 <sync_fs>
 800d482:	4603      	mov	r3, r0
 800d484:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	7d1b      	ldrb	r3, [r3, #20]
 800d48a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d494:	7dfb      	ldrb	r3, [r7, #23]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3718      	adds	r7, #24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7ff ff7b 	bl	800d3a2 <f_sync>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d118      	bne.n	800d4e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f107 0208 	add.w	r2, r7, #8
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fbf6 	bl	800ccb0 <validate>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10c      	bne.n	800d4e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe f996 	bl	800b804 <dec_lock>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d102      	bne.n	800d4e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b090      	sub	sp, #64	; 0x40
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f107 0208 	add.w	r2, r7, #8
 800d502:	4611      	mov	r1, r2
 800d504:	4618      	mov	r0, r3
 800d506:	f7ff fbd3 	bl	800ccb0 <validate>
 800d50a:	4603      	mov	r3, r0
 800d50c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d514:	2b00      	cmp	r3, #0
 800d516:	d103      	bne.n	800d520 <f_lseek+0x2e>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	7d5b      	ldrb	r3, [r3, #21]
 800d51c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d520:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <f_lseek+0x3c>
 800d528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d52c:	e1e6      	b.n	800d8fc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 80d1 	beq.w	800d6da <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53e:	d15a      	bne.n	800d5f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d544:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	1d1a      	adds	r2, r3, #4
 800d54a:	627a      	str	r2, [r7, #36]	; 0x24
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	617b      	str	r3, [r7, #20]
 800d550:	2302      	movs	r3, #2
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d03a      	beq.n	800d5d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	613b      	str	r3, [r7, #16]
 800d564:	2300      	movs	r3, #0
 800d566:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	3302      	adds	r3, #2
 800d56c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	60fb      	str	r3, [r7, #12]
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	3301      	adds	r3, #1
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fe faa0 	bl	800bac2 <get_fat>
 800d582:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d586:	2b01      	cmp	r3, #1
 800d588:	d804      	bhi.n	800d594 <f_lseek+0xa2>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2202      	movs	r2, #2
 800d58e:	755a      	strb	r2, [r3, #21]
 800d590:	2302      	movs	r3, #2
 800d592:	e1b3      	b.n	800d8fc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59a:	d104      	bne.n	800d5a6 <f_lseek+0xb4>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	755a      	strb	r2, [r3, #21]
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e1aa      	b.n	800d8fc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d0de      	beq.n	800d56e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d809      	bhi.n	800d5cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	1d1a      	adds	r2, r3, #4
 800d5bc:	627a      	str	r2, [r7, #36]	; 0x24
 800d5be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c4:	1d1a      	adds	r2, r3, #4
 800d5c6:	627a      	str	r2, [r7, #36]	; 0x24
 800d5c8:	693a      	ldr	r2, [r7, #16]
 800d5ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d3c4      	bcc.n	800d560 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d5de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d803      	bhi.n	800d5ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	e184      	b.n	800d8f8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d5ee:	2311      	movs	r3, #17
 800d5f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d5f4:	e180      	b.n	800d8f8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d902      	bls.n	800d606 <f_lseek+0x114>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f000 8172 	beq.w	800d8f8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	3b01      	subs	r3, #1
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7fe fcda 	bl	800bfd4 <clmt_clust>
 800d620:	4602      	mov	r2, r0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	69db      	ldr	r3, [r3, #28]
 800d62c:	4619      	mov	r1, r3
 800d62e:	4610      	mov	r0, r2
 800d630:	f7fe fa28 	bl	800ba84 <clust2sect>
 800d634:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d104      	bne.n	800d646 <f_lseek+0x154>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2202      	movs	r2, #2
 800d640:	755a      	strb	r2, [r3, #21]
 800d642:	2302      	movs	r3, #2
 800d644:	e15a      	b.n	800d8fc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	3b01      	subs	r3, #1
 800d64a:	0a5b      	lsrs	r3, r3, #9
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	8952      	ldrh	r2, [r2, #10]
 800d650:	3a01      	subs	r2, #1
 800d652:	4013      	ands	r3, r2
 800d654:	69ba      	ldr	r2, [r7, #24]
 800d656:	4413      	add	r3, r2
 800d658:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d662:	2b00      	cmp	r3, #0
 800d664:	f000 8148 	beq.w	800d8f8 <f_lseek+0x406>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a1b      	ldr	r3, [r3, #32]
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	429a      	cmp	r2, r3
 800d670:	f000 8142 	beq.w	800d8f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7d1b      	ldrb	r3, [r3, #20]
 800d678:	b25b      	sxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	da18      	bge.n	800d6b0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	7858      	ldrb	r0, [r3, #1]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1a      	ldr	r2, [r3, #32]
 800d68c:	2301      	movs	r3, #1
 800d68e:	f7fd fe6f 	bl	800b370 <disk_write>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <f_lseek+0x1b0>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	755a      	strb	r2, [r3, #21]
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e12c      	b.n	800d8fc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7d1b      	ldrb	r3, [r3, #20]
 800d6a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	7858      	ldrb	r0, [r3, #1]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	69ba      	ldr	r2, [r7, #24]
 800d6be:	f7fd fe37 	bl	800b330 <disk_read>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d004      	beq.n	800d6d2 <f_lseek+0x1e0>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	755a      	strb	r2, [r3, #21]
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e114      	b.n	800d8fc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	69ba      	ldr	r2, [r7, #24]
 800d6d6:	621a      	str	r2, [r3, #32]
 800d6d8:	e10e      	b.n	800d8f8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d908      	bls.n	800d6f6 <f_lseek+0x204>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	f003 0302 	and.w	r3, r3, #2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d102      	bne.n	800d6f6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d704:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 80a7 	beq.w	800d85c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	895b      	ldrh	r3, [r3, #10]
 800d712:	025b      	lsls	r3, r3, #9
 800d714:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d01b      	beq.n	800d754 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	1e5a      	subs	r2, r3, #1
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	fbb2 f2f3 	udiv	r2, r2, r3
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	1e59      	subs	r1, r3, #1
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d730:	429a      	cmp	r2, r3
 800d732:	d30f      	bcc.n	800d754 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	1e5a      	subs	r2, r3, #1
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	425b      	negs	r3, r3
 800d73c:	401a      	ands	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	69db      	ldr	r3, [r3, #28]
 800d750:	63bb      	str	r3, [r7, #56]	; 0x38
 800d752:	e022      	b.n	800d79a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d119      	bne.n	800d794 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2100      	movs	r1, #0
 800d764:	4618      	mov	r0, r3
 800d766:	f7fe fb9d 	bl	800bea4 <create_chain>
 800d76a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d104      	bne.n	800d77c <f_lseek+0x28a>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2202      	movs	r2, #2
 800d776:	755a      	strb	r2, [r3, #21]
 800d778:	2302      	movs	r3, #2
 800d77a:	e0bf      	b.n	800d8fc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d782:	d104      	bne.n	800d78e <f_lseek+0x29c>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	755a      	strb	r2, [r3, #21]
 800d78a:	2301      	movs	r3, #1
 800d78c:	e0b6      	b.n	800d8fc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d792:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d798:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d05d      	beq.n	800d85c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d7a0:	e03a      	b.n	800d818 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	603b      	str	r3, [r7, #0]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	699a      	ldr	r2, [r3, #24]
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	441a      	add	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ba:	f003 0302 	and.w	r3, r3, #2
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00b      	beq.n	800d7da <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fe fb6c 	bl	800bea4 <create_chain>
 800d7cc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d108      	bne.n	800d7e6 <f_lseek+0x2f4>
							ofs = 0; break;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	e022      	b.n	800d820 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fe f96f 	bl	800bac2 <get_fat>
 800d7e4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ec:	d104      	bne.n	800d7f8 <f_lseek+0x306>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	755a      	strb	r2, [r3, #21]
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e081      	b.n	800d8fc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d904      	bls.n	800d808 <f_lseek+0x316>
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d804:	429a      	cmp	r2, r3
 800d806:	d304      	bcc.n	800d812 <f_lseek+0x320>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2202      	movs	r2, #2
 800d80c:	755a      	strb	r2, [r3, #21]
 800d80e:	2302      	movs	r3, #2
 800d810:	e074      	b.n	800d8fc <f_lseek+0x40a>
					fp->clust = clst;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d816:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d8c0      	bhi.n	800d7a2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	699a      	ldr	r2, [r3, #24]
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	441a      	add	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d832:	2b00      	cmp	r3, #0
 800d834:	d012      	beq.n	800d85c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fe f922 	bl	800ba84 <clust2sect>
 800d840:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d844:	2b00      	cmp	r3, #0
 800d846:	d104      	bne.n	800d852 <f_lseek+0x360>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2202      	movs	r2, #2
 800d84c:	755a      	strb	r2, [r3, #21]
 800d84e:	2302      	movs	r3, #2
 800d850:	e054      	b.n	800d8fc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	0a5b      	lsrs	r3, r3, #9
 800d856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d858:	4413      	add	r3, r2
 800d85a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	699a      	ldr	r2, [r3, #24]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	429a      	cmp	r2, r3
 800d866:	d90a      	bls.n	800d87e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699a      	ldr	r2, [r3, #24]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7d1b      	ldrb	r3, [r3, #20]
 800d874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d886:	2b00      	cmp	r3, #0
 800d888:	d036      	beq.n	800d8f8 <f_lseek+0x406>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6a1b      	ldr	r3, [r3, #32]
 800d88e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d890:	429a      	cmp	r2, r3
 800d892:	d031      	beq.n	800d8f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	7d1b      	ldrb	r3, [r3, #20]
 800d898:	b25b      	sxtb	r3, r3
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	da18      	bge.n	800d8d0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	7858      	ldrb	r0, [r3, #1]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6a1a      	ldr	r2, [r3, #32]
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	f7fd fd5f 	bl	800b370 <disk_write>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d004      	beq.n	800d8c2 <f_lseek+0x3d0>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	755a      	strb	r2, [r3, #21]
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e01c      	b.n	800d8fc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	7858      	ldrb	r0, [r3, #1]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8da:	2301      	movs	r3, #1
 800d8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8de:	f7fd fd27 	bl	800b330 <disk_read>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d004      	beq.n	800d8f2 <f_lseek+0x400>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	755a      	strb	r2, [r3, #21]
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e004      	b.n	800d8fc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d8f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3740      	adds	r7, #64	; 0x40
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d904:	b480      	push	{r7}
 800d906:	b087      	sub	sp, #28
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	4613      	mov	r3, r2
 800d910:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d912:	2301      	movs	r3, #1
 800d914:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d91a:	4b1f      	ldr	r3, [pc, #124]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d91c:	7a5b      	ldrb	r3, [r3, #9]
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b00      	cmp	r3, #0
 800d922:	d131      	bne.n	800d988 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d924:	4b1c      	ldr	r3, [pc, #112]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d926:	7a5b      	ldrb	r3, [r3, #9]
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	461a      	mov	r2, r3
 800d92c:	4b1a      	ldr	r3, [pc, #104]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d92e:	2100      	movs	r1, #0
 800d930:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d932:	4b19      	ldr	r3, [pc, #100]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d934:	7a5b      	ldrb	r3, [r3, #9]
 800d936:	b2db      	uxtb	r3, r3
 800d938:	4a17      	ldr	r2, [pc, #92]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4413      	add	r3, r2
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d942:	4b15      	ldr	r3, [pc, #84]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d944:	7a5b      	ldrb	r3, [r3, #9]
 800d946:	b2db      	uxtb	r3, r3
 800d948:	461a      	mov	r2, r3
 800d94a:	4b13      	ldr	r3, [pc, #76]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d94c:	4413      	add	r3, r2
 800d94e:	79fa      	ldrb	r2, [r7, #7]
 800d950:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d952:	4b11      	ldr	r3, [pc, #68]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d954:	7a5b      	ldrb	r3, [r3, #9]
 800d956:	b2db      	uxtb	r3, r3
 800d958:	1c5a      	adds	r2, r3, #1
 800d95a:	b2d1      	uxtb	r1, r2
 800d95c:	4a0e      	ldr	r2, [pc, #56]	; (800d998 <FATFS_LinkDriverEx+0x94>)
 800d95e:	7251      	strb	r1, [r2, #9]
 800d960:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d962:	7dbb      	ldrb	r3, [r7, #22]
 800d964:	3330      	adds	r3, #48	; 0x30
 800d966:	b2da      	uxtb	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	3301      	adds	r3, #1
 800d970:	223a      	movs	r2, #58	; 0x3a
 800d972:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	3302      	adds	r3, #2
 800d978:	222f      	movs	r2, #47	; 0x2f
 800d97a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	3303      	adds	r3, #3
 800d980:	2200      	movs	r2, #0
 800d982:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d988:	7dfb      	ldrb	r3, [r7, #23]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	371c      	adds	r7, #28
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	20001378 	.word	0x20001378

0800d99c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff ffaa 	bl	800d904 <FATFS_LinkDriverEx>
 800d9b0:	4603      	mov	r3, r0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
	...

0800d9bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	490e      	ldr	r1, [pc, #56]	; (800d9fc <MX_USB_HOST_Init+0x40>)
 800d9c4:	480e      	ldr	r0, [pc, #56]	; (800da00 <MX_USB_HOST_Init+0x44>)
 800d9c6:	f7fc f919 	bl	8009bfc <USBH_Init>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d9d0:	f7f3 fcf6 	bl	80013c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d9d4:	490b      	ldr	r1, [pc, #44]	; (800da04 <MX_USB_HOST_Init+0x48>)
 800d9d6:	480a      	ldr	r0, [pc, #40]	; (800da00 <MX_USB_HOST_Init+0x44>)
 800d9d8:	f7fc f99e 	bl	8009d18 <USBH_RegisterClass>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d9e2:	f7f3 fced 	bl	80013c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d9e6:	4806      	ldr	r0, [pc, #24]	; (800da00 <MX_USB_HOST_Init+0x44>)
 800d9e8:	f7fc fa22 	bl	8009e30 <USBH_Start>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d9f2:	f7f3 fce5 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d9f6:	bf00      	nop
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	0800da1d 	.word	0x0800da1d
 800da00:	20001944 	.word	0x20001944
 800da04:	2000000c 	.word	0x2000000c

0800da08 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800da0c:	4802      	ldr	r0, [pc, #8]	; (800da18 <MX_USB_HOST_Process+0x10>)
 800da0e:	f7fc fa1f 	bl	8009e50 <USBH_Process>
}
 800da12:	bf00      	nop
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	20001944 	.word	0x20001944

0800da1c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	2b04      	cmp	r3, #4
 800da2e:	d819      	bhi.n	800da64 <USBH_UserProcess+0x48>
 800da30:	a201      	add	r2, pc, #4	; (adr r2, 800da38 <USBH_UserProcess+0x1c>)
 800da32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da36:	bf00      	nop
 800da38:	0800da65 	.word	0x0800da65
 800da3c:	0800da55 	.word	0x0800da55
 800da40:	0800da65 	.word	0x0800da65
 800da44:	0800da5d 	.word	0x0800da5d
 800da48:	0800da4d 	.word	0x0800da4d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800da4c:	4b09      	ldr	r3, [pc, #36]	; (800da74 <USBH_UserProcess+0x58>)
 800da4e:	2203      	movs	r2, #3
 800da50:	701a      	strb	r2, [r3, #0]
  break;
 800da52:	e008      	b.n	800da66 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800da54:	4b07      	ldr	r3, [pc, #28]	; (800da74 <USBH_UserProcess+0x58>)
 800da56:	2202      	movs	r2, #2
 800da58:	701a      	strb	r2, [r3, #0]
  break;
 800da5a:	e004      	b.n	800da66 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <USBH_UserProcess+0x58>)
 800da5e:	2201      	movs	r2, #1
 800da60:	701a      	strb	r2, [r3, #0]
  break;
 800da62:	e000      	b.n	800da66 <USBH_UserProcess+0x4a>

  default:
  break;
 800da64:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800da66:	bf00      	nop
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	20001384 	.word	0x20001384

0800da78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b08a      	sub	sp, #40	; 0x28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da80:	f107 0314 	add.w	r3, r7, #20
 800da84:	2200      	movs	r2, #0
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	605a      	str	r2, [r3, #4]
 800da8a:	609a      	str	r2, [r3, #8]
 800da8c:	60da      	str	r2, [r3, #12]
 800da8e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da98:	d147      	bne.n	800db2a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da9a:	2300      	movs	r3, #0
 800da9c:	613b      	str	r3, [r7, #16]
 800da9e:	4b25      	ldr	r3, [pc, #148]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800daa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa2:	4a24      	ldr	r2, [pc, #144]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800daa4:	f043 0301 	orr.w	r3, r3, #1
 800daa8:	6313      	str	r3, [r2, #48]	; 0x30
 800daaa:	4b22      	ldr	r3, [pc, #136]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800daac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	613b      	str	r3, [r7, #16]
 800dab4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dabc:	2300      	movs	r3, #0
 800dabe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dac0:	2300      	movs	r3, #0
 800dac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dac4:	f107 0314 	add.w	r3, r7, #20
 800dac8:	4619      	mov	r1, r3
 800daca:	481b      	ldr	r0, [pc, #108]	; (800db38 <HAL_HCD_MspInit+0xc0>)
 800dacc:	f7f4 fffe 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dad0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dad6:	2302      	movs	r3, #2
 800dad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dada:	2300      	movs	r3, #0
 800dadc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dade:	2303      	movs	r3, #3
 800dae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dae2:	230a      	movs	r3, #10
 800dae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dae6:	f107 0314 	add.w	r3, r7, #20
 800daea:	4619      	mov	r1, r3
 800daec:	4812      	ldr	r0, [pc, #72]	; (800db38 <HAL_HCD_MspInit+0xc0>)
 800daee:	f7f4 ffed 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800daf2:	4b10      	ldr	r3, [pc, #64]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800daf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf6:	4a0f      	ldr	r2, [pc, #60]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800daf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dafc:	6353      	str	r3, [r2, #52]	; 0x34
 800dafe:	2300      	movs	r3, #0
 800db00:	60fb      	str	r3, [r7, #12]
 800db02:	4b0c      	ldr	r3, [pc, #48]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800db04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db06:	4a0b      	ldr	r2, [pc, #44]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800db08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db0c:	6453      	str	r3, [r2, #68]	; 0x44
 800db0e:	4b09      	ldr	r3, [pc, #36]	; (800db34 <HAL_HCD_MspInit+0xbc>)
 800db10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800db1a:	2200      	movs	r2, #0
 800db1c:	2100      	movs	r1, #0
 800db1e:	2043      	movs	r0, #67	; 0x43
 800db20:	f7f4 fbbf 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db24:	2043      	movs	r0, #67	; 0x43
 800db26:	f7f4 fbd8 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db2a:	bf00      	nop
 800db2c:	3728      	adds	r7, #40	; 0x28
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	40023800 	.word	0x40023800
 800db38:	40020000 	.word	0x40020000

0800db3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fc fd53 	bl	800a5f6 <USBH_LL_IncTimer>
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db66:	4618      	mov	r0, r3
 800db68:	f7fc fd8b 	bl	800a682 <USBH_LL_Connect>
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db82:	4618      	mov	r0, r3
 800db84:	f7fc fd94 	bl	800a6b0 <USBH_LL_Disconnect>
}
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	70fb      	strb	r3, [r7, #3]
 800db9c:	4613      	mov	r3, r2
 800db9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dba0:	bf00      	nop
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fc fd45 	bl	800a64a <USBH_LL_PortEnabled>
}
 800dbc0:	bf00      	nop
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fc fd45 	bl	800a666 <USBH_LL_PortDisabled>
}
 800dbdc:	bf00      	nop
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d12a      	bne.n	800dc4c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dbf6:	4a18      	ldr	r2, [pc, #96]	; (800dc58 <USBH_LL_Init+0x74>)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a15      	ldr	r2, [pc, #84]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc02:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc06:	4b14      	ldr	r3, [pc, #80]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dc0c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dc0e:	4b12      	ldr	r3, [pc, #72]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc10:	2208      	movs	r2, #8
 800dc12:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dc14:	4b10      	ldr	r3, [pc, #64]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc16:	2201      	movs	r2, #1
 800dc18:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc1a:	4b0f      	ldr	r3, [pc, #60]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dc20:	4b0d      	ldr	r3, [pc, #52]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc22:	2202      	movs	r2, #2
 800dc24:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc26:	4b0c      	ldr	r3, [pc, #48]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dc2c:	480a      	ldr	r0, [pc, #40]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc2e:	f7f5 f918 	bl	8002e62 <HAL_HCD_Init>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dc38:	f7f3 fbc2 	bl	80013c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dc3c:	4806      	ldr	r0, [pc, #24]	; (800dc58 <USBH_LL_Init+0x74>)
 800dc3e:	f7f5 fd1b 	bl	8003678 <HAL_HCD_GetCurrentFrame>
 800dc42:	4603      	mov	r3, r0
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7fc fcc6 	bl	800a5d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20001d1c 	.word	0x20001d1c

0800dc5c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7f5 fc88 	bl	8003588 <HAL_HCD_Start>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 f986 	bl	800df90 <USBH_Get_USB_Status>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b084      	sub	sp, #16
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f5 fc90 	bl	80035ce <HAL_HCD_Stop>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 f96b 	bl	800df90 <USBH_Get_USB_Status>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7f5 fcda 	bl	8003694 <HAL_HCD_GetCurrentSpeed>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d007      	beq.n	800dcf6 <USBH_LL_GetSpeed+0x2e>
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d302      	bcc.n	800dcf0 <USBH_LL_GetSpeed+0x28>
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	d006      	beq.n	800dcfc <USBH_LL_GetSpeed+0x34>
 800dcee:	e008      	b.n	800dd02 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf4:	e008      	b.n	800dd08 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfa:	e005      	b.n	800dd08 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	73fb      	strb	r3, [r7, #15]
    break;
 800dd00:	e002      	b.n	800dd08 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800dd02:	2301      	movs	r3, #1
 800dd04:	73fb      	strb	r3, [r7, #15]
    break;
 800dd06:	bf00      	nop
  }
  return  speed;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7f5 fc6d 	bl	8003608 <HAL_HCD_ResetPort>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 f92b 	bl	800df90 <USBH_Get_USB_Status>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	460b      	mov	r3, r1
 800dd52:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd5a:	78fa      	ldrb	r2, [r7, #3]
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7f5 fc75 	bl	800364e <HAL_HCD_HC_GetXferCount>
 800dd64:	4603      	mov	r3, r0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dd6e:	b590      	push	{r4, r7, lr}
 800dd70:	b089      	sub	sp, #36	; 0x24
 800dd72:	af04      	add	r7, sp, #16
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	4608      	mov	r0, r1
 800dd78:	4611      	mov	r1, r2
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	70fb      	strb	r3, [r7, #3]
 800dd80:	460b      	mov	r3, r1
 800dd82:	70bb      	strb	r3, [r7, #2]
 800dd84:	4613      	mov	r3, r2
 800dd86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dd96:	787c      	ldrb	r4, [r7, #1]
 800dd98:	78ba      	ldrb	r2, [r7, #2]
 800dd9a:	78f9      	ldrb	r1, [r7, #3]
 800dd9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd9e:	9302      	str	r3, [sp, #8]
 800dda0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	4623      	mov	r3, r4
 800ddae:	f7f5 f8ba 	bl	8002f26 <HAL_HCD_HC_Init>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddb6:	7bfb      	ldrb	r3, [r7, #15]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 f8e9 	bl	800df90 <USBH_Get_USB_Status>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd90      	pop	{r4, r7, pc}

0800ddcc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dde6:	78fa      	ldrb	r2, [r7, #3]
 800dde8:	4611      	mov	r1, r2
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f5 f933 	bl	8003056 <HAL_HCD_HC_Halt>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 f8ca 	bl	800df90 <USBH_Get_USB_Status>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de00:	7bbb      	ldrb	r3, [r7, #14]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800de0a:	b590      	push	{r4, r7, lr}
 800de0c:	b089      	sub	sp, #36	; 0x24
 800de0e:	af04      	add	r7, sp, #16
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	4608      	mov	r0, r1
 800de14:	4611      	mov	r1, r2
 800de16:	461a      	mov	r2, r3
 800de18:	4603      	mov	r3, r0
 800de1a:	70fb      	strb	r3, [r7, #3]
 800de1c:	460b      	mov	r3, r1
 800de1e:	70bb      	strb	r3, [r7, #2]
 800de20:	4613      	mov	r3, r2
 800de22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de24:	2300      	movs	r3, #0
 800de26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de28:	2300      	movs	r3, #0
 800de2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800de32:	787c      	ldrb	r4, [r7, #1]
 800de34:	78ba      	ldrb	r2, [r7, #2]
 800de36:	78f9      	ldrb	r1, [r7, #3]
 800de38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de3c:	9303      	str	r3, [sp, #12]
 800de3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de40:	9302      	str	r3, [sp, #8]
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4623      	mov	r3, r4
 800de4e:	f7f5 f925 	bl	800309c <HAL_HCD_HC_SubmitRequest>
 800de52:	4603      	mov	r3, r0
 800de54:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800de56:	7bfb      	ldrb	r3, [r7, #15]
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 f899 	bl	800df90 <USBH_Get_USB_Status>
 800de5e:	4603      	mov	r3, r0
 800de60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de62:	7bbb      	ldrb	r3, [r7, #14]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd90      	pop	{r4, r7, pc}

0800de6c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	460b      	mov	r3, r1
 800de76:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de7e:	78fa      	ldrb	r2, [r7, #3]
 800de80:	4611      	mov	r1, r2
 800de82:	4618      	mov	r0, r3
 800de84:	f7f5 fbce 	bl	8003624 <HAL_HCD_HC_GetURBState>
 800de88:	4603      	mov	r3, r0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	460b      	mov	r3, r1
 800de9c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800de9e:	20c8      	movs	r0, #200	; 0xc8
 800dea0:	f7f3 fd16 	bl	80018d0 <HAL_Delay>
  return USBH_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800deae:	b480      	push	{r7}
 800deb0:	b085      	sub	sp, #20
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	460b      	mov	r3, r1
 800deb8:	70fb      	strb	r3, [r7, #3]
 800deba:	4613      	mov	r3, r2
 800debc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dec4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dec6:	78fa      	ldrb	r2, [r7, #3]
 800dec8:	68f9      	ldr	r1, [r7, #12]
 800deca:	4613      	mov	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4413      	add	r3, r2
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	440b      	add	r3, r1
 800ded4:	333b      	adds	r3, #59	; 0x3b
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d00a      	beq.n	800def2 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dedc:	78fa      	ldrb	r2, [r7, #3]
 800dede:	68f9      	ldr	r1, [r7, #12]
 800dee0:	4613      	mov	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	440b      	add	r3, r1
 800deea:	3350      	adds	r3, #80	; 0x50
 800deec:	78ba      	ldrb	r2, [r7, #2]
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e009      	b.n	800df06 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800def2:	78fa      	ldrb	r2, [r7, #3]
 800def4:	68f9      	ldr	r1, [r7, #12]
 800def6:	4613      	mov	r3, r2
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4413      	add	r3, r2
 800defc:	00db      	lsls	r3, r3, #3
 800defe:	440b      	add	r3, r1
 800df00:	3351      	adds	r3, #81	; 0x51
 800df02:	78ba      	ldrb	r2, [r7, #2]
 800df04:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3714      	adds	r7, #20
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	460b      	mov	r3, r1
 800df1e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df2a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800df2c:	78fa      	ldrb	r2, [r7, #3]
 800df2e:	68b9      	ldr	r1, [r7, #8]
 800df30:	4613      	mov	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	00db      	lsls	r3, r3, #3
 800df38:	440b      	add	r3, r1
 800df3a:	333b      	adds	r3, #59	; 0x3b
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00a      	beq.n	800df58 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800df42:	78fa      	ldrb	r2, [r7, #3]
 800df44:	68b9      	ldr	r1, [r7, #8]
 800df46:	4613      	mov	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4413      	add	r3, r2
 800df4c:	00db      	lsls	r3, r3, #3
 800df4e:	440b      	add	r3, r1
 800df50:	3350      	adds	r3, #80	; 0x50
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	73fb      	strb	r3, [r7, #15]
 800df56:	e009      	b.n	800df6c <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800df58:	78fa      	ldrb	r2, [r7, #3]
 800df5a:	68b9      	ldr	r1, [r7, #8]
 800df5c:	4613      	mov	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4413      	add	r3, r2
 800df62:	00db      	lsls	r3, r3, #3
 800df64:	440b      	add	r3, r1
 800df66:	3351      	adds	r3, #81	; 0x51
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3714      	adds	r7, #20
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b082      	sub	sp, #8
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7f3 fca4 	bl	80018d0 <HAL_Delay>
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	4603      	mov	r3, r0
 800df98:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df9a:	2300      	movs	r3, #0
 800df9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	2b03      	cmp	r3, #3
 800dfa2:	d817      	bhi.n	800dfd4 <USBH_Get_USB_Status+0x44>
 800dfa4:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <USBH_Get_USB_Status+0x1c>)
 800dfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfaa:	bf00      	nop
 800dfac:	0800dfbd 	.word	0x0800dfbd
 800dfb0:	0800dfc3 	.word	0x0800dfc3
 800dfb4:	0800dfc9 	.word	0x0800dfc9
 800dfb8:	0800dfcf 	.word	0x0800dfcf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc0:	e00b      	b.n	800dfda <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dfc2:	2302      	movs	r3, #2
 800dfc4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc6:	e008      	b.n	800dfda <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	73fb      	strb	r3, [r7, #15]
    break;
 800dfcc:	e005      	b.n	800dfda <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dfce:	2302      	movs	r3, #2
 800dfd0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd2:	e002      	b.n	800dfda <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd8:	bf00      	nop
  }
  return usb_status;
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <__errno>:
 800dfe8:	4b01      	ldr	r3, [pc, #4]	; (800dff0 <__errno+0x8>)
 800dfea:	6818      	ldr	r0, [r3, #0]
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	2000002c 	.word	0x2000002c

0800dff4 <__libc_init_array>:
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	4e0d      	ldr	r6, [pc, #52]	; (800e02c <__libc_init_array+0x38>)
 800dff8:	4c0d      	ldr	r4, [pc, #52]	; (800e030 <__libc_init_array+0x3c>)
 800dffa:	1ba4      	subs	r4, r4, r6
 800dffc:	10a4      	asrs	r4, r4, #2
 800dffe:	2500      	movs	r5, #0
 800e000:	42a5      	cmp	r5, r4
 800e002:	d109      	bne.n	800e018 <__libc_init_array+0x24>
 800e004:	4e0b      	ldr	r6, [pc, #44]	; (800e034 <__libc_init_array+0x40>)
 800e006:	4c0c      	ldr	r4, [pc, #48]	; (800e038 <__libc_init_array+0x44>)
 800e008:	f000 f8f6 	bl	800e1f8 <_init>
 800e00c:	1ba4      	subs	r4, r4, r6
 800e00e:	10a4      	asrs	r4, r4, #2
 800e010:	2500      	movs	r5, #0
 800e012:	42a5      	cmp	r5, r4
 800e014:	d105      	bne.n	800e022 <__libc_init_array+0x2e>
 800e016:	bd70      	pop	{r4, r5, r6, pc}
 800e018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e01c:	4798      	blx	r3
 800e01e:	3501      	adds	r5, #1
 800e020:	e7ee      	b.n	800e000 <__libc_init_array+0xc>
 800e022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e026:	4798      	blx	r3
 800e028:	3501      	adds	r5, #1
 800e02a:	e7f2      	b.n	800e012 <__libc_init_array+0x1e>
 800e02c:	0800e384 	.word	0x0800e384
 800e030:	0800e384 	.word	0x0800e384
 800e034:	0800e384 	.word	0x0800e384
 800e038:	0800e388 	.word	0x0800e388

0800e03c <malloc>:
 800e03c:	4b02      	ldr	r3, [pc, #8]	; (800e048 <malloc+0xc>)
 800e03e:	4601      	mov	r1, r0
 800e040:	6818      	ldr	r0, [r3, #0]
 800e042:	f000 b86d 	b.w	800e120 <_malloc_r>
 800e046:	bf00      	nop
 800e048:	2000002c 	.word	0x2000002c

0800e04c <free>:
 800e04c:	4b02      	ldr	r3, [pc, #8]	; (800e058 <free+0xc>)
 800e04e:	4601      	mov	r1, r0
 800e050:	6818      	ldr	r0, [r3, #0]
 800e052:	f000 b817 	b.w	800e084 <_free_r>
 800e056:	bf00      	nop
 800e058:	2000002c 	.word	0x2000002c

0800e05c <memcpy>:
 800e05c:	b510      	push	{r4, lr}
 800e05e:	1e43      	subs	r3, r0, #1
 800e060:	440a      	add	r2, r1
 800e062:	4291      	cmp	r1, r2
 800e064:	d100      	bne.n	800e068 <memcpy+0xc>
 800e066:	bd10      	pop	{r4, pc}
 800e068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e06c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e070:	e7f7      	b.n	800e062 <memcpy+0x6>

0800e072 <memset>:
 800e072:	4402      	add	r2, r0
 800e074:	4603      	mov	r3, r0
 800e076:	4293      	cmp	r3, r2
 800e078:	d100      	bne.n	800e07c <memset+0xa>
 800e07a:	4770      	bx	lr
 800e07c:	f803 1b01 	strb.w	r1, [r3], #1
 800e080:	e7f9      	b.n	800e076 <memset+0x4>
	...

0800e084 <_free_r>:
 800e084:	b538      	push	{r3, r4, r5, lr}
 800e086:	4605      	mov	r5, r0
 800e088:	2900      	cmp	r1, #0
 800e08a:	d045      	beq.n	800e118 <_free_r+0x94>
 800e08c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e090:	1f0c      	subs	r4, r1, #4
 800e092:	2b00      	cmp	r3, #0
 800e094:	bfb8      	it	lt
 800e096:	18e4      	addlt	r4, r4, r3
 800e098:	f000 f8ac 	bl	800e1f4 <__malloc_lock>
 800e09c:	4a1f      	ldr	r2, [pc, #124]	; (800e11c <_free_r+0x98>)
 800e09e:	6813      	ldr	r3, [r2, #0]
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	b933      	cbnz	r3, 800e0b2 <_free_r+0x2e>
 800e0a4:	6063      	str	r3, [r4, #4]
 800e0a6:	6014      	str	r4, [r2, #0]
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ae:	f000 b8a2 	b.w	800e1f6 <__malloc_unlock>
 800e0b2:	42a3      	cmp	r3, r4
 800e0b4:	d90c      	bls.n	800e0d0 <_free_r+0x4c>
 800e0b6:	6821      	ldr	r1, [r4, #0]
 800e0b8:	1862      	adds	r2, r4, r1
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	bf04      	itt	eq
 800e0be:	681a      	ldreq	r2, [r3, #0]
 800e0c0:	685b      	ldreq	r3, [r3, #4]
 800e0c2:	6063      	str	r3, [r4, #4]
 800e0c4:	bf04      	itt	eq
 800e0c6:	1852      	addeq	r2, r2, r1
 800e0c8:	6022      	streq	r2, [r4, #0]
 800e0ca:	6004      	str	r4, [r0, #0]
 800e0cc:	e7ec      	b.n	800e0a8 <_free_r+0x24>
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	b10a      	cbz	r2, 800e0d8 <_free_r+0x54>
 800e0d4:	42a2      	cmp	r2, r4
 800e0d6:	d9fa      	bls.n	800e0ce <_free_r+0x4a>
 800e0d8:	6819      	ldr	r1, [r3, #0]
 800e0da:	1858      	adds	r0, r3, r1
 800e0dc:	42a0      	cmp	r0, r4
 800e0de:	d10b      	bne.n	800e0f8 <_free_r+0x74>
 800e0e0:	6820      	ldr	r0, [r4, #0]
 800e0e2:	4401      	add	r1, r0
 800e0e4:	1858      	adds	r0, r3, r1
 800e0e6:	4282      	cmp	r2, r0
 800e0e8:	6019      	str	r1, [r3, #0]
 800e0ea:	d1dd      	bne.n	800e0a8 <_free_r+0x24>
 800e0ec:	6810      	ldr	r0, [r2, #0]
 800e0ee:	6852      	ldr	r2, [r2, #4]
 800e0f0:	605a      	str	r2, [r3, #4]
 800e0f2:	4401      	add	r1, r0
 800e0f4:	6019      	str	r1, [r3, #0]
 800e0f6:	e7d7      	b.n	800e0a8 <_free_r+0x24>
 800e0f8:	d902      	bls.n	800e100 <_free_r+0x7c>
 800e0fa:	230c      	movs	r3, #12
 800e0fc:	602b      	str	r3, [r5, #0]
 800e0fe:	e7d3      	b.n	800e0a8 <_free_r+0x24>
 800e100:	6820      	ldr	r0, [r4, #0]
 800e102:	1821      	adds	r1, r4, r0
 800e104:	428a      	cmp	r2, r1
 800e106:	bf04      	itt	eq
 800e108:	6811      	ldreq	r1, [r2, #0]
 800e10a:	6852      	ldreq	r2, [r2, #4]
 800e10c:	6062      	str	r2, [r4, #4]
 800e10e:	bf04      	itt	eq
 800e110:	1809      	addeq	r1, r1, r0
 800e112:	6021      	streq	r1, [r4, #0]
 800e114:	605c      	str	r4, [r3, #4]
 800e116:	e7c7      	b.n	800e0a8 <_free_r+0x24>
 800e118:	bd38      	pop	{r3, r4, r5, pc}
 800e11a:	bf00      	nop
 800e11c:	20001388 	.word	0x20001388

0800e120 <_malloc_r>:
 800e120:	b570      	push	{r4, r5, r6, lr}
 800e122:	1ccd      	adds	r5, r1, #3
 800e124:	f025 0503 	bic.w	r5, r5, #3
 800e128:	3508      	adds	r5, #8
 800e12a:	2d0c      	cmp	r5, #12
 800e12c:	bf38      	it	cc
 800e12e:	250c      	movcc	r5, #12
 800e130:	2d00      	cmp	r5, #0
 800e132:	4606      	mov	r6, r0
 800e134:	db01      	blt.n	800e13a <_malloc_r+0x1a>
 800e136:	42a9      	cmp	r1, r5
 800e138:	d903      	bls.n	800e142 <_malloc_r+0x22>
 800e13a:	230c      	movs	r3, #12
 800e13c:	6033      	str	r3, [r6, #0]
 800e13e:	2000      	movs	r0, #0
 800e140:	bd70      	pop	{r4, r5, r6, pc}
 800e142:	f000 f857 	bl	800e1f4 <__malloc_lock>
 800e146:	4a21      	ldr	r2, [pc, #132]	; (800e1cc <_malloc_r+0xac>)
 800e148:	6814      	ldr	r4, [r2, #0]
 800e14a:	4621      	mov	r1, r4
 800e14c:	b991      	cbnz	r1, 800e174 <_malloc_r+0x54>
 800e14e:	4c20      	ldr	r4, [pc, #128]	; (800e1d0 <_malloc_r+0xb0>)
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	b91b      	cbnz	r3, 800e15c <_malloc_r+0x3c>
 800e154:	4630      	mov	r0, r6
 800e156:	f000 f83d 	bl	800e1d4 <_sbrk_r>
 800e15a:	6020      	str	r0, [r4, #0]
 800e15c:	4629      	mov	r1, r5
 800e15e:	4630      	mov	r0, r6
 800e160:	f000 f838 	bl	800e1d4 <_sbrk_r>
 800e164:	1c43      	adds	r3, r0, #1
 800e166:	d124      	bne.n	800e1b2 <_malloc_r+0x92>
 800e168:	230c      	movs	r3, #12
 800e16a:	6033      	str	r3, [r6, #0]
 800e16c:	4630      	mov	r0, r6
 800e16e:	f000 f842 	bl	800e1f6 <__malloc_unlock>
 800e172:	e7e4      	b.n	800e13e <_malloc_r+0x1e>
 800e174:	680b      	ldr	r3, [r1, #0]
 800e176:	1b5b      	subs	r3, r3, r5
 800e178:	d418      	bmi.n	800e1ac <_malloc_r+0x8c>
 800e17a:	2b0b      	cmp	r3, #11
 800e17c:	d90f      	bls.n	800e19e <_malloc_r+0x7e>
 800e17e:	600b      	str	r3, [r1, #0]
 800e180:	50cd      	str	r5, [r1, r3]
 800e182:	18cc      	adds	r4, r1, r3
 800e184:	4630      	mov	r0, r6
 800e186:	f000 f836 	bl	800e1f6 <__malloc_unlock>
 800e18a:	f104 000b 	add.w	r0, r4, #11
 800e18e:	1d23      	adds	r3, r4, #4
 800e190:	f020 0007 	bic.w	r0, r0, #7
 800e194:	1ac3      	subs	r3, r0, r3
 800e196:	d0d3      	beq.n	800e140 <_malloc_r+0x20>
 800e198:	425a      	negs	r2, r3
 800e19a:	50e2      	str	r2, [r4, r3]
 800e19c:	e7d0      	b.n	800e140 <_malloc_r+0x20>
 800e19e:	428c      	cmp	r4, r1
 800e1a0:	684b      	ldr	r3, [r1, #4]
 800e1a2:	bf16      	itet	ne
 800e1a4:	6063      	strne	r3, [r4, #4]
 800e1a6:	6013      	streq	r3, [r2, #0]
 800e1a8:	460c      	movne	r4, r1
 800e1aa:	e7eb      	b.n	800e184 <_malloc_r+0x64>
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	6849      	ldr	r1, [r1, #4]
 800e1b0:	e7cc      	b.n	800e14c <_malloc_r+0x2c>
 800e1b2:	1cc4      	adds	r4, r0, #3
 800e1b4:	f024 0403 	bic.w	r4, r4, #3
 800e1b8:	42a0      	cmp	r0, r4
 800e1ba:	d005      	beq.n	800e1c8 <_malloc_r+0xa8>
 800e1bc:	1a21      	subs	r1, r4, r0
 800e1be:	4630      	mov	r0, r6
 800e1c0:	f000 f808 	bl	800e1d4 <_sbrk_r>
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	d0cf      	beq.n	800e168 <_malloc_r+0x48>
 800e1c8:	6025      	str	r5, [r4, #0]
 800e1ca:	e7db      	b.n	800e184 <_malloc_r+0x64>
 800e1cc:	20001388 	.word	0x20001388
 800e1d0:	2000138c 	.word	0x2000138c

0800e1d4 <_sbrk_r>:
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	4c06      	ldr	r4, [pc, #24]	; (800e1f0 <_sbrk_r+0x1c>)
 800e1d8:	2300      	movs	r3, #0
 800e1da:	4605      	mov	r5, r0
 800e1dc:	4608      	mov	r0, r1
 800e1de:	6023      	str	r3, [r4, #0]
 800e1e0:	f7f3 fa8e 	bl	8001700 <_sbrk>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d102      	bne.n	800e1ee <_sbrk_r+0x1a>
 800e1e8:	6823      	ldr	r3, [r4, #0]
 800e1ea:	b103      	cbz	r3, 800e1ee <_sbrk_r+0x1a>
 800e1ec:	602b      	str	r3, [r5, #0]
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	20001fe0 	.word	0x20001fe0

0800e1f4 <__malloc_lock>:
 800e1f4:	4770      	bx	lr

0800e1f6 <__malloc_unlock>:
 800e1f6:	4770      	bx	lr

0800e1f8 <_init>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	bf00      	nop
 800e1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1fe:	bc08      	pop	{r3}
 800e200:	469e      	mov	lr, r3
 800e202:	4770      	bx	lr

0800e204 <_fini>:
 800e204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e206:	bf00      	nop
 800e208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20a:	bc08      	pop	{r3}
 800e20c:	469e      	mov	lr, r3
 800e20e:	4770      	bx	lr
